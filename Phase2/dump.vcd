$date
	Mon Apr  8 08:10:08 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_ptb $end
$var wire 16 ! Inst [15:0] $end
$var wire 16 " MemAddress [15:0] $end
$var wire 16 # MemDataIn [15:0] $end
$var wire 16 $ MemDataOut [15:0] $end
$var wire 1 % MemRead $end
$var wire 1 & MemWrite $end
$var wire 1 ' RegWrite $end
$var wire 16 ( WriteData [15:0] $end
$var wire 4 ) WriteRegister [3:0] $end
$var wire 16 * PC [15:0] $end
$var wire 1 + Halt $end
$var reg 1 , clk $end
$var reg 1 - rst_n $end
$var integer 32 . cycle_count [31:0] $end
$var integer 32 / inst_count [31:0] $end
$var integer 32 0 sim_log_file [31:0] $end
$var integer 32 1 trace_file [31:0] $end
$scope module DUT $end
$var wire 16 2 D_X_imm [15:0] $end
$var wire 16 3 D_X_instruction [15:0] $end
$var wire 16 4 D_X_newPC [15:0] $end
$var wire 16 5 D_X_oldPC [15:0] $end
$var wire 16 6 D_X_reg1 [15:0] $end
$var wire 16 7 D_X_reg2 [15:0] $end
$var wire 1 8 D_stall $end
$var wire 1 9 F_D_halt $end
$var wire 16 : F_D_instruction [15:0] $end
$var wire 16 ; F_D_newPC [15:0] $end
$var wire 16 < F_D_oldPC [15:0] $end
$var wire 1 = F_stall $end
$var wire 16 > M_W_ALUOut [15:0] $end
$var wire 16 ? M_W_instruction [15:0] $end
$var wire 16 @ M_W_mem [15:0] $end
$var wire 16 A M_W_newPC [15:0] $end
$var wire 16 B M_W_oldPC [15:0] $end
$var wire 16 C X_M_ALUOut [15:0] $end
$var wire 16 D X_M_aluB [15:0] $end
$var wire 16 E X_M_instruction [15:0] $end
$var wire 16 F X_M_newPC [15:0] $end
$var wire 16 G X_M_oldPC [15:0] $end
$var wire 16 H addr [15:0] $end
$var wire 1 I branch_inst $end
$var wire 1 , clk $end
$var wire 1 J flush $end
$var wire 1 K halt $end
$var wire 1 + hlt $end
$var wire 16 L nextPC [15:0] $end
$var wire 16 M pc [15:0] $end
$var wire 1 - rst_n $end
$var wire 1 N stall_if_id $end
$var wire 16 O writeback_data [15:0] $end
$var wire 1 P stall $end
$var wire 4 Q reg_source2 [3:0] $end
$var wire 4 R reg_source1 [3:0] $end
$var wire 4 S reg_dest [3:0] $end
$var wire 16 T reg2Forward [15:0] $end
$var wire 16 U reg1Forward [15:0] $end
$var wire 16 V programCount [15:0] $end
$var wire 16 W pcInc [15:0] $end
$var wire 16 X pcBranch [15:0] $end
$var wire 16 Y memData_In [15:0] $end
$var wire 16 Z instruction [15:0] $end
$var wire 1 [ flagZ $end
$var wire 1 \ flagNV $end
$var wire 1 ] do_branch $end
$var wire 3 ^ cond [2:0] $end
$var wire 16 _ branchAdd [15:0] $end
$var wire 16 ` aluB [15:0] $end
$var wire 16 a aluA [15:0] $end
$var wire 1 b X_X_B_en $end
$var wire 1 c X_X_A_en $end
$var wire 4 d X_M_reg_source2 [3:0] $end
$var wire 4 e X_M_reg_dest [3:0] $end
$var wire 1 f X_M_halt $end
$var wire 1 g X_M_SavePC $end
$var wire 1 h X_M_RegWrite $end
$var wire 1 i X_M_MemtoReg $end
$var wire 1 j X_M_MemWrite $end
$var wire 1 k X_M_MemRead $end
$var wire 16 l X_ALUOut [15:0] $end
$var wire 3 m NVZflag [2:0] $end
$var wire 3 n NVZ_out [2:0] $end
$var wire 16 o M_mem [15:0] $end
$var wire 1 p M_X_B_en $end
$var wire 1 q M_X_A_en $end
$var wire 4 r M_W_reg_dest [3:0] $end
$var wire 1 s M_W_halt $end
$var wire 1 t M_W_SavePC $end
$var wire 1 u M_W_RegWrite $end
$var wire 1 v M_W_MemtoReg $end
$var wire 1 w M_M_B_en $end
$var wire 16 x D_reg2 [15:0] $end
$var wire 16 y D_reg1 [15:0] $end
$var wire 16 z D_imm [15:0] $end
$var wire 1 { D_branch_src $end
$var wire 1 | D_branch_inst $end
$var wire 4 } D_X_reg_source2 [3:0] $end
$var wire 4 ~ D_X_reg_source1 [3:0] $end
$var wire 4 !" D_X_reg_dest [3:0] $end
$var wire 1 "" D_X_halt $end
$var wire 1 #" D_X_branch_src $end
$var wire 1 $" D_X_branch_inst $end
$var wire 1 %" D_X_SavePC $end
$var wire 1 &" D_X_RegWrite $end
$var wire 1 '" D_X_RegDst $end
$var wire 1 (" D_X_MemtoReg $end
$var wire 1 )" D_X_MemWrite $end
$var wire 1 *" D_X_MemRead $end
$var wire 1 +" D_X_LoadPartial $end
$var wire 1 ," D_X_ALUsrc $end
$var wire 1 -" D_SavePC $end
$var wire 1 ." D_RegWrite $end
$var wire 1 /" D_RegDst $end
$var wire 1 0" D_MemtoReg $end
$var wire 1 1" D_MemWrite $end
$var wire 1 2" D_MemRead $end
$var wire 1 3" D_LoadPartial $end
$var wire 1 4" D_ALUsrc $end
$scope module ALU0 $end
$var wire 16 5" A [15:0] $end
$var wire 16 6" B [15:0] $end
$var wire 16 7" SRA_result [15:0] $end
$var wire 16 8" XOR_result [15:0] $end
$var wire 3 9" opcode [2:0] $end
$var wire 3 :" tempNVZ [2:0] $end
$var wire 1 ;" temp $end
$var wire 16 <" result [15:0] $end
$var wire 1 =" posOvfl $end
$var wire 3 >" nvz_flags [2:0] $end
$var wire 1 ?" negOvfl $end
$var wire 1 @" ifZero $end
$var wire 1 [ flagZ $end
$var wire 1 \ flagNV $end
$var wire 16 A" SLL_result [15:0] $end
$var wire 16 B" ROR_result [15:0] $end
$var wire 16 C" RED_result [15:0] $end
$var wire 16 D" PADDSB_result [15:0] $end
$var wire 16 E" ADDSUB_result [15:0] $end
$scope module iPA_0 $end
$var wire 16 F" A [15:0] $end
$var wire 16 G" B [15:0] $end
$var wire 4 H" tempHalfByte3 [3:0] $end
$var wire 4 I" tempHalfByte2 [3:0] $end
$var wire 4 J" tempHalfByte1 [3:0] $end
$var wire 4 K" tempHalfByte0 [3:0] $end
$var wire 4 L" posOvfl [3:0] $end
$var wire 4 M" negOvfl [3:0] $end
$var wire 16 N" Sum [15:0] $end
$var wire 1 O" Cout3 $end
$var wire 1 P" Cout2 $end
$var wire 1 Q" Cout1 $end
$var wire 1 R" Cout0 $end
$scope module CLA4_0 $end
$var wire 4 S" A [3:0] $end
$var wire 4 T" B [3:0] $end
$var wire 1 U" C0 $end
$var wire 1 V" C1 $end
$var wire 1 W" C2 $end
$var wire 1 X" C3 $end
$var wire 1 Y" Cin $end
$var wire 1 R" Cout $end
$var wire 1 Z" G0 $end
$var wire 1 [" G1 $end
$var wire 1 \" G2 $end
$var wire 1 ]" G3 $end
$var wire 1 ^" P0 $end
$var wire 1 _" P1 $end
$var wire 1 `" P2 $end
$var wire 1 a" P3 $end
$var wire 4 b" Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 c" A [3:0] $end
$var wire 4 d" B [3:0] $end
$var wire 1 e" C0 $end
$var wire 1 f" C1 $end
$var wire 1 g" C2 $end
$var wire 1 h" C3 $end
$var wire 1 i" Cin $end
$var wire 1 Q" Cout $end
$var wire 1 j" G0 $end
$var wire 1 k" G1 $end
$var wire 1 l" G2 $end
$var wire 1 m" G3 $end
$var wire 1 n" P0 $end
$var wire 1 o" P1 $end
$var wire 1 p" P2 $end
$var wire 1 q" P3 $end
$var wire 4 r" Sum [3:0] $end
$upscope $end
$scope module CLA4_2 $end
$var wire 4 s" A [3:0] $end
$var wire 4 t" B [3:0] $end
$var wire 1 u" C0 $end
$var wire 1 v" C1 $end
$var wire 1 w" C2 $end
$var wire 1 x" C3 $end
$var wire 1 y" Cin $end
$var wire 1 P" Cout $end
$var wire 1 z" G0 $end
$var wire 1 {" G1 $end
$var wire 1 |" G2 $end
$var wire 1 }" G3 $end
$var wire 1 ~" P0 $end
$var wire 1 !# P1 $end
$var wire 1 "# P2 $end
$var wire 1 ## P3 $end
$var wire 4 $# Sum [3:0] $end
$upscope $end
$scope module CLA4_3 $end
$var wire 4 %# A [3:0] $end
$var wire 4 &# B [3:0] $end
$var wire 1 '# C0 $end
$var wire 1 (# C1 $end
$var wire 1 )# C2 $end
$var wire 1 *# C3 $end
$var wire 1 +# Cin $end
$var wire 1 O" Cout $end
$var wire 1 ,# G0 $end
$var wire 1 -# G1 $end
$var wire 1 .# G2 $end
$var wire 1 /# G3 $end
$var wire 1 0# P0 $end
$var wire 1 1# P1 $end
$var wire 1 2# P2 $end
$var wire 1 3# P3 $end
$var wire 4 4# Sum [3:0] $end
$upscope $end
$upscope $end
$scope module iRED_0 $end
$var wire 8 5# A [7:0] $end
$var wire 8 6# B [7:0] $end
$var wire 8 7# C [7:0] $end
$var wire 8 8# D [7:0] $end
$var wire 1 9# bit8C $end
$var wire 1 :# bit8Layer1 $end
$var wire 1 ;# bit8Layer2 $end
$var wire 1 <# ms $end
$var wire 8 =# sumCD [7:0] $end
$var wire 8 ># sumABCD [7:0] $end
$var wire 8 ?# sumAB [7:0] $end
$var wire 7 @# header [6:0] $end
$var wire 16 A# Sum_ABCD [15:0] $end
$var wire 1 B# Cout2 $end
$var wire 1 C# Cout1 $end
$var wire 1 D# Cout0 $end
$scope module CLA8_0 $end
$var wire 8 E# A [7:0] $end
$var wire 8 F# B [7:0] $end
$var wire 1 G# Cin $end
$var wire 8 H# Sum [7:0] $end
$var wire 1 D# Cout $end
$var wire 1 I# C0 $end
$scope module CLA4_0 $end
$var wire 4 J# A [3:0] $end
$var wire 4 K# B [3:0] $end
$var wire 1 L# C0 $end
$var wire 1 M# C1 $end
$var wire 1 N# C2 $end
$var wire 1 O# C3 $end
$var wire 1 G# Cin $end
$var wire 1 I# Cout $end
$var wire 1 P# G0 $end
$var wire 1 Q# G1 $end
$var wire 1 R# G2 $end
$var wire 1 S# G3 $end
$var wire 1 T# P0 $end
$var wire 1 U# P1 $end
$var wire 1 V# P2 $end
$var wire 1 W# P3 $end
$var wire 4 X# Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 Y# A [3:0] $end
$var wire 4 Z# B [3:0] $end
$var wire 1 [# C0 $end
$var wire 1 \# C1 $end
$var wire 1 ]# C2 $end
$var wire 1 ^# C3 $end
$var wire 1 I# Cin $end
$var wire 1 D# Cout $end
$var wire 1 _# G0 $end
$var wire 1 `# G1 $end
$var wire 1 a# G2 $end
$var wire 1 b# G3 $end
$var wire 1 c# P0 $end
$var wire 1 d# P1 $end
$var wire 1 e# P2 $end
$var wire 1 f# P3 $end
$var wire 4 g# Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_1 $end
$var wire 8 h# A [7:0] $end
$var wire 8 i# B [7:0] $end
$var wire 1 j# Cin $end
$var wire 8 k# Sum [7:0] $end
$var wire 1 C# Cout $end
$var wire 1 l# C0 $end
$scope module CLA4_0 $end
$var wire 4 m# A [3:0] $end
$var wire 4 n# B [3:0] $end
$var wire 1 o# C0 $end
$var wire 1 p# C1 $end
$var wire 1 q# C2 $end
$var wire 1 r# C3 $end
$var wire 1 j# Cin $end
$var wire 1 l# Cout $end
$var wire 1 s# G0 $end
$var wire 1 t# G1 $end
$var wire 1 u# G2 $end
$var wire 1 v# G3 $end
$var wire 1 w# P0 $end
$var wire 1 x# P1 $end
$var wire 1 y# P2 $end
$var wire 1 z# P3 $end
$var wire 4 {# Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 |# A [3:0] $end
$var wire 4 }# B [3:0] $end
$var wire 1 ~# C0 $end
$var wire 1 !$ C1 $end
$var wire 1 "$ C2 $end
$var wire 1 #$ C3 $end
$var wire 1 l# Cin $end
$var wire 1 C# Cout $end
$var wire 1 $$ G0 $end
$var wire 1 %$ G1 $end
$var wire 1 &$ G2 $end
$var wire 1 '$ G3 $end
$var wire 1 ($ P0 $end
$var wire 1 )$ P1 $end
$var wire 1 *$ P2 $end
$var wire 1 +$ P3 $end
$var wire 4 ,$ Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_2 $end
$var wire 8 -$ A [7:0] $end
$var wire 8 .$ B [7:0] $end
$var wire 1 /$ Cin $end
$var wire 8 0$ Sum [7:0] $end
$var wire 1 B# Cout $end
$var wire 1 1$ C0 $end
$scope module CLA4_0 $end
$var wire 4 2$ A [3:0] $end
$var wire 4 3$ B [3:0] $end
$var wire 1 4$ C0 $end
$var wire 1 5$ C1 $end
$var wire 1 6$ C2 $end
$var wire 1 7$ C3 $end
$var wire 1 /$ Cin $end
$var wire 1 1$ Cout $end
$var wire 1 8$ G0 $end
$var wire 1 9$ G1 $end
$var wire 1 :$ G2 $end
$var wire 1 ;$ G3 $end
$var wire 1 <$ P0 $end
$var wire 1 =$ P1 $end
$var wire 1 >$ P2 $end
$var wire 1 ?$ P3 $end
$var wire 4 @$ Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 A$ A [3:0] $end
$var wire 4 B$ B [3:0] $end
$var wire 1 C$ C0 $end
$var wire 1 D$ C1 $end
$var wire 1 E$ C2 $end
$var wire 1 F$ C3 $end
$var wire 1 1$ Cin $end
$var wire 1 B# Cout $end
$var wire 1 G$ G0 $end
$var wire 1 H$ G1 $end
$var wire 1 I$ G2 $end
$var wire 1 J$ G3 $end
$var wire 1 K$ P0 $end
$var wire 1 L$ P1 $end
$var wire 1 M$ P2 $end
$var wire 1 N$ P3 $end
$var wire 4 O$ Sum [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module iROR_0 $end
$var wire 16 P$ Shift_In [15:0] $end
$var wire 16 Q$ Shift_Out [15:0] $end
$var wire 4 R$ Shift_Val [3:0] $end
$var wire 16 S$ rorbit3 [15:0] $end
$var wire 16 T$ rorbit2 [15:0] $end
$var wire 16 U$ rorbit1 [15:0] $end
$var wire 16 V$ rorbit0 [15:0] $end
$upscope $end
$scope module iSAS16_0 $end
$var wire 16 W$ A [15:0] $end
$var wire 16 X$ B [15:0] $end
$var wire 1 ?" negOvfl $end
$var wire 16 Y$ notB [15:0] $end
$var wire 1 =" posOvfl $end
$var wire 1 Z$ sub $end
$var wire 16 [$ tempSum [15:0] $end
$var wire 16 \$ inputB [15:0] $end
$var wire 1 @" ifZero $end
$var wire 16 ]$ Sum [15:0] $end
$var wire 1 ^$ Cout3 $end
$var wire 1 _$ Cout2 $end
$var wire 1 `$ Cout1 $end
$var wire 1 a$ Cout0 $end
$scope module CLA4_0 $end
$var wire 4 b$ A [3:0] $end
$var wire 4 c$ B [3:0] $end
$var wire 1 d$ C0 $end
$var wire 1 e$ C1 $end
$var wire 1 f$ C2 $end
$var wire 1 g$ C3 $end
$var wire 1 Z$ Cin $end
$var wire 1 a$ Cout $end
$var wire 1 h$ G0 $end
$var wire 1 i$ G1 $end
$var wire 1 j$ G2 $end
$var wire 1 k$ G3 $end
$var wire 1 l$ P0 $end
$var wire 1 m$ P1 $end
$var wire 1 n$ P2 $end
$var wire 1 o$ P3 $end
$var wire 4 p$ Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 q$ A [3:0] $end
$var wire 4 r$ B [3:0] $end
$var wire 1 s$ C0 $end
$var wire 1 t$ C1 $end
$var wire 1 u$ C2 $end
$var wire 1 v$ C3 $end
$var wire 1 a$ Cin $end
$var wire 1 `$ Cout $end
$var wire 1 w$ G0 $end
$var wire 1 x$ G1 $end
$var wire 1 y$ G2 $end
$var wire 1 z$ G3 $end
$var wire 1 {$ P0 $end
$var wire 1 |$ P1 $end
$var wire 1 }$ P2 $end
$var wire 1 ~$ P3 $end
$var wire 4 !% Sum [3:0] $end
$upscope $end
$scope module CLA4_2 $end
$var wire 4 "% A [3:0] $end
$var wire 4 #% B [3:0] $end
$var wire 1 $% C0 $end
$var wire 1 %% C1 $end
$var wire 1 &% C2 $end
$var wire 1 '% C3 $end
$var wire 1 `$ Cin $end
$var wire 1 _$ Cout $end
$var wire 1 (% G0 $end
$var wire 1 )% G1 $end
$var wire 1 *% G2 $end
$var wire 1 +% G3 $end
$var wire 1 ,% P0 $end
$var wire 1 -% P1 $end
$var wire 1 .% P2 $end
$var wire 1 /% P3 $end
$var wire 4 0% Sum [3:0] $end
$upscope $end
$scope module CLA4_3 $end
$var wire 4 1% A [3:0] $end
$var wire 4 2% B [3:0] $end
$var wire 1 3% C0 $end
$var wire 1 4% C1 $end
$var wire 1 5% C2 $end
$var wire 1 6% C3 $end
$var wire 1 _$ Cin $end
$var wire 1 ^$ Cout $end
$var wire 1 7% G0 $end
$var wire 1 8% G1 $end
$var wire 1 9% G2 $end
$var wire 1 :% G3 $end
$var wire 1 ;% P0 $end
$var wire 1 <% P1 $end
$var wire 1 =% P2 $end
$var wire 1 >% P3 $end
$var wire 4 ?% Sum [3:0] $end
$upscope $end
$upscope $end
$scope module ishift_0 $end
$var wire 1 @% Mode $end
$var wire 16 A% Shift_In [15:0] $end
$var wire 4 B% Shift_Val [3:0] $end
$var wire 16 C% rbit3 [15:0] $end
$var wire 16 D% rbit2 [15:0] $end
$var wire 16 E% rbit1 [15:0] $end
$var wire 16 F% rbit0 [15:0] $end
$var wire 16 G% lbit3 [15:0] $end
$var wire 16 H% lbit2 [15:0] $end
$var wire 16 I% lbit1 [15:0] $end
$var wire 16 J% lbit0 [15:0] $end
$var wire 16 K% Shift_Out [15:0] $end
$upscope $end
$upscope $end
$scope module D_X_flops0 $end
$var wire 4 L% Source1_in [3:0] $end
$var wire 4 M% Source2_in [3:0] $end
$var wire 16 N% a_out [15:0] $end
$var wire 16 O% b_out [15:0] $end
$var wire 1 , clk $end
$var wire 1 9 halt_in $end
$var wire 16 P% imm_in [15:0] $end
$var wire 16 Q% imm_out [15:0] $end
$var wire 16 R% instruction_in [15:0] $end
$var wire 16 S% instruction_out [15:0] $end
$var wire 16 T% newPC_in [15:0] $end
$var wire 16 U% newPC_out [15:0] $end
$var wire 16 V% oldPC_in [15:0] $end
$var wire 16 W% oldPC_out [15:0] $end
$var wire 4 X% reg_dest_in [3:0] $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 4 [% reg_dest_out [3:0] $end
$var wire 1 "" halt_out $end
$var wire 1 #" branch_src_out $end
$var wire 1 { branch_src_in $end
$var wire 1 $" branch_inst_out $end
$var wire 1 | branch_inst_in $end
$var wire 16 \% b_in [15:0] $end
$var wire 16 ]% a_in [15:0] $end
$var wire 4 ^% Source2_out [3:0] $end
$var wire 4 _% Source1_out [3:0] $end
$var wire 1 %" SavePC_out $end
$var wire 1 -" SavePC_in $end
$var wire 1 &" RegWrite_out $end
$var wire 1 ." RegWrite_in $end
$var wire 1 '" RegDst_out $end
$var wire 1 /" RegDst_in $end
$var wire 1 (" MemtoReg_out $end
$var wire 1 0" MemtoReg_in $end
$var wire 1 )" MemWrite_out $end
$var wire 1 1" MemWrite_in $end
$var wire 1 *" MemRead_out $end
$var wire 1 2" MemRead_in $end
$var wire 1 +" LoadPartial_out $end
$var wire 1 3" LoadPartial_in $end
$var wire 1 ," ALUsrc_out $end
$var wire 1 4" ALUsrc_in $end
$scope module ALUsrc_dff $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ," q $end
$var wire 1 4" d $end
$var reg 1 ," state $end
$upscope $end
$scope module LoadPartial_dff $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 +" q $end
$var wire 1 3" d $end
$var reg 1 +" state $end
$upscope $end
$scope module MemRead_dff $end
$var wire 1 , clk $end
$var wire 1 *" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 2" d $end
$var reg 1 `% state $end
$upscope $end
$scope module MemWrite_dff $end
$var wire 1 , clk $end
$var wire 1 )" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 1" d $end
$var reg 1 a% state $end
$upscope $end
$scope module MemtoReg_dff $end
$var wire 1 , clk $end
$var wire 1 (" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 0" d $end
$var reg 1 b% state $end
$upscope $end
$scope module RegDst_dff $end
$var wire 1 , clk $end
$var wire 1 '" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 /" d $end
$var reg 1 c% state $end
$upscope $end
$scope module RegWrite_dff $end
$var wire 1 , clk $end
$var wire 1 &" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ." d $end
$var reg 1 d% state $end
$upscope $end
$scope module SavePC_dff $end
$var wire 1 , clk $end
$var wire 1 %" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 -" d $end
$var reg 1 e% state $end
$upscope $end
$scope module Source1_dff[0] $end
$var wire 1 , clk $end
$var wire 1 f% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 g% q $end
$var reg 1 g% state $end
$upscope $end
$scope module Source1_dff[1] $end
$var wire 1 , clk $end
$var wire 1 h% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 i% q $end
$var reg 1 i% state $end
$upscope $end
$scope module Source1_dff[2] $end
$var wire 1 , clk $end
$var wire 1 j% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 k% q $end
$var reg 1 k% state $end
$upscope $end
$scope module Source1_dff[3] $end
$var wire 1 , clk $end
$var wire 1 l% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 m% q $end
$var reg 1 m% state $end
$upscope $end
$scope module Source2_dff[0] $end
$var wire 1 , clk $end
$var wire 1 n% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 o% q $end
$var reg 1 o% state $end
$upscope $end
$scope module Source2_dff[1] $end
$var wire 1 , clk $end
$var wire 1 p% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 q% q $end
$var reg 1 q% state $end
$upscope $end
$scope module Source2_dff[2] $end
$var wire 1 , clk $end
$var wire 1 r% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 s% q $end
$var reg 1 s% state $end
$upscope $end
$scope module Source2_dff[3] $end
$var wire 1 , clk $end
$var wire 1 t% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 u% q $end
$var reg 1 u% state $end
$upscope $end
$scope module a_reg $end
$var wire 16 v% Bitline1 [15:0] $end
$var wire 16 w% Bitline2 [15:0] $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteReg $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 16 z% D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 {% Bitline1 $end
$var wire 1 |% Bitline2 $end
$var wire 1 }% D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 ~% dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 }% d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ~% q $end
$var reg 1 ~% state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 !& Bitline1 $end
$var wire 1 "& Bitline2 $end
$var wire 1 #& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 $& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 #& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 $& q $end
$var reg 1 $& state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 %& Bitline1 $end
$var wire 1 && Bitline2 $end
$var wire 1 '& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 (& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 '& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 (& q $end
$var reg 1 (& state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 )& Bitline1 $end
$var wire 1 *& Bitline2 $end
$var wire 1 +& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 ,& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 +& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ,& q $end
$var reg 1 ,& state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 -& Bitline1 $end
$var wire 1 .& Bitline2 $end
$var wire 1 /& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 0& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 /& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 0& q $end
$var reg 1 0& state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 1& Bitline1 $end
$var wire 1 2& Bitline2 $end
$var wire 1 3& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 4& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 3& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 4& q $end
$var reg 1 4& state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 5& Bitline1 $end
$var wire 1 6& Bitline2 $end
$var wire 1 7& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 8& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 7& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 8& q $end
$var reg 1 8& state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 9& Bitline1 $end
$var wire 1 :& Bitline2 $end
$var wire 1 ;& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 <& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ;& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 <& q $end
$var reg 1 <& state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 =& Bitline1 $end
$var wire 1 >& Bitline2 $end
$var wire 1 ?& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 @& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ?& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 @& q $end
$var reg 1 @& state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 A& Bitline1 $end
$var wire 1 B& Bitline2 $end
$var wire 1 C& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 D& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 C& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 D& q $end
$var reg 1 D& state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 E& Bitline1 $end
$var wire 1 F& Bitline2 $end
$var wire 1 G& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 H& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 G& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 H& q $end
$var reg 1 H& state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 I& Bitline1 $end
$var wire 1 J& Bitline2 $end
$var wire 1 K& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 L& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 K& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 L& q $end
$var reg 1 L& state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 M& Bitline1 $end
$var wire 1 N& Bitline2 $end
$var wire 1 O& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 P& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 O& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 P& q $end
$var reg 1 P& state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 Q& Bitline1 $end
$var wire 1 R& Bitline2 $end
$var wire 1 S& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 T& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 S& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 T& q $end
$var reg 1 T& state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 U& Bitline1 $end
$var wire 1 V& Bitline2 $end
$var wire 1 W& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 X& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 W& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 X& q $end
$var reg 1 X& state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 Y& Bitline1 $end
$var wire 1 Z& Bitline2 $end
$var wire 1 [& D $end
$var wire 1 x% ReadEnable1 $end
$var wire 1 y% ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 \& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 [& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 \& q $end
$var reg 1 \& state $end
$upscope $end
$upscope $end
$upscope $end
$scope module b_reg $end
$var wire 16 ]& Bitline1 [15:0] $end
$var wire 16 ^& Bitline2 [15:0] $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteReg $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 16 a& D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 b& Bitline1 $end
$var wire 1 c& Bitline2 $end
$var wire 1 d& D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 e& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 e& q $end
$var reg 1 e& state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 f& Bitline1 $end
$var wire 1 g& Bitline2 $end
$var wire 1 h& D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 i& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 i& q $end
$var reg 1 i& state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 j& Bitline1 $end
$var wire 1 k& Bitline2 $end
$var wire 1 l& D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 m& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 m& q $end
$var reg 1 m& state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 n& Bitline1 $end
$var wire 1 o& Bitline2 $end
$var wire 1 p& D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 q& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 q& q $end
$var reg 1 q& state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 r& Bitline1 $end
$var wire 1 s& Bitline2 $end
$var wire 1 t& D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 u& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 u& q $end
$var reg 1 u& state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 v& Bitline1 $end
$var wire 1 w& Bitline2 $end
$var wire 1 x& D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 y& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 y& q $end
$var reg 1 y& state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 z& Bitline1 $end
$var wire 1 {& Bitline2 $end
$var wire 1 |& D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 }& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |& d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 }& q $end
$var reg 1 }& state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 ~& Bitline1 $end
$var wire 1 !' Bitline2 $end
$var wire 1 "' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 #' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 #' q $end
$var reg 1 #' state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 $' Bitline1 $end
$var wire 1 %' Bitline2 $end
$var wire 1 &' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 '' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 '' q $end
$var reg 1 '' state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 (' Bitline1 $end
$var wire 1 )' Bitline2 $end
$var wire 1 *' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 +' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 +' q $end
$var reg 1 +' state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ,' Bitline1 $end
$var wire 1 -' Bitline2 $end
$var wire 1 .' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 /' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 /' q $end
$var reg 1 /' state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 0' Bitline1 $end
$var wire 1 1' Bitline2 $end
$var wire 1 2' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 3' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 3' q $end
$var reg 1 3' state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 4' Bitline1 $end
$var wire 1 5' Bitline2 $end
$var wire 1 6' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 7' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 7' q $end
$var reg 1 7' state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 8' Bitline1 $end
$var wire 1 9' Bitline2 $end
$var wire 1 :' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 ;' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ;' q $end
$var reg 1 ;' state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 <' Bitline1 $end
$var wire 1 =' Bitline2 $end
$var wire 1 >' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 ?' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ?' q $end
$var reg 1 ?' state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 @' Bitline1 $end
$var wire 1 A' Bitline2 $end
$var wire 1 B' D $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 C' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 C' q $end
$var reg 1 C' state $end
$upscope $end
$upscope $end
$upscope $end
$scope module branch_inst_dff $end
$var wire 1 , clk $end
$var wire 1 $" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 | d $end
$var reg 1 D' state $end
$upscope $end
$scope module branch_src_dff $end
$var wire 1 , clk $end
$var wire 1 #" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 { d $end
$var reg 1 E' state $end
$upscope $end
$scope module halt_dff $end
$var wire 1 , clk $end
$var wire 1 9 d $end
$var wire 1 "" q $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var reg 1 F' state $end
$upscope $end
$scope module imm_reg $end
$var wire 16 G' Bitline1 [15:0] $end
$var wire 16 H' Bitline2 [15:0] $end
$var wire 16 I' D [15:0] $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteReg $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$scope module bitArray[0] $end
$var wire 1 L' Bitline1 $end
$var wire 1 M' Bitline2 $end
$var wire 1 N' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 O' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 O' q $end
$var reg 1 O' state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 P' Bitline1 $end
$var wire 1 Q' Bitline2 $end
$var wire 1 R' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 S' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 S' q $end
$var reg 1 S' state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 T' Bitline1 $end
$var wire 1 U' Bitline2 $end
$var wire 1 V' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 W' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 W' q $end
$var reg 1 W' state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 X' Bitline1 $end
$var wire 1 Y' Bitline2 $end
$var wire 1 Z' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 [' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 [' q $end
$var reg 1 [' state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 \' Bitline1 $end
$var wire 1 ]' Bitline2 $end
$var wire 1 ^' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 _' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 _' q $end
$var reg 1 _' state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 `' Bitline1 $end
$var wire 1 a' Bitline2 $end
$var wire 1 b' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 c' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 c' q $end
$var reg 1 c' state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 d' Bitline1 $end
$var wire 1 e' Bitline2 $end
$var wire 1 f' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 g' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 g' q $end
$var reg 1 g' state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 h' Bitline1 $end
$var wire 1 i' Bitline2 $end
$var wire 1 j' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 k' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 k' q $end
$var reg 1 k' state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 l' Bitline1 $end
$var wire 1 m' Bitline2 $end
$var wire 1 n' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 o' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 o' q $end
$var reg 1 o' state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 p' Bitline1 $end
$var wire 1 q' Bitline2 $end
$var wire 1 r' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 s' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 s' q $end
$var reg 1 s' state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 t' Bitline1 $end
$var wire 1 u' Bitline2 $end
$var wire 1 v' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 w' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 w' q $end
$var reg 1 w' state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 x' Bitline1 $end
$var wire 1 y' Bitline2 $end
$var wire 1 z' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 {' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 {' q $end
$var reg 1 {' state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 |' Bitline1 $end
$var wire 1 }' Bitline2 $end
$var wire 1 ~' D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 !( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~' d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 !( q $end
$var reg 1 !( state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 "( Bitline1 $end
$var wire 1 #( Bitline2 $end
$var wire 1 $( D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 %( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 %( q $end
$var reg 1 %( state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 &( Bitline1 $end
$var wire 1 '( Bitline2 $end
$var wire 1 (( D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 )( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 )( q $end
$var reg 1 )( state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 *( Bitline1 $end
$var wire 1 +( Bitline2 $end
$var wire 1 ,( D $end
$var wire 1 J' ReadEnable1 $end
$var wire 1 K' ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 -( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 -( q $end
$var reg 1 -( state $end
$upscope $end
$upscope $end
$upscope $end
$scope module instruction_reg $end
$var wire 16 .( Bitline1 [15:0] $end
$var wire 16 /( Bitline2 [15:0] $end
$var wire 16 0( D [15:0] $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteReg $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$scope module bitArray[0] $end
$var wire 1 3( Bitline1 $end
$var wire 1 4( Bitline2 $end
$var wire 1 5( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 6( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 5( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 6( q $end
$var reg 1 6( state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 7( Bitline1 $end
$var wire 1 8( Bitline2 $end
$var wire 1 9( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 :( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 9( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 :( q $end
$var reg 1 :( state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 ;( Bitline1 $end
$var wire 1 <( Bitline2 $end
$var wire 1 =( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 >( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 =( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 >( q $end
$var reg 1 >( state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 ?( Bitline1 $end
$var wire 1 @( Bitline2 $end
$var wire 1 A( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 B( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 A( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 B( q $end
$var reg 1 B( state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 C( Bitline1 $end
$var wire 1 D( Bitline2 $end
$var wire 1 E( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 F( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 E( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 F( q $end
$var reg 1 F( state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 G( Bitline1 $end
$var wire 1 H( Bitline2 $end
$var wire 1 I( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 J( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 I( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 J( q $end
$var reg 1 J( state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 K( Bitline1 $end
$var wire 1 L( Bitline2 $end
$var wire 1 M( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 N( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 M( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 N( q $end
$var reg 1 N( state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 O( Bitline1 $end
$var wire 1 P( Bitline2 $end
$var wire 1 Q( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 R( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Q( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 R( q $end
$var reg 1 R( state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 S( Bitline1 $end
$var wire 1 T( Bitline2 $end
$var wire 1 U( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 V( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 U( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 V( q $end
$var reg 1 V( state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 W( Bitline1 $end
$var wire 1 X( Bitline2 $end
$var wire 1 Y( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 Z( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Y( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 Z( q $end
$var reg 1 Z( state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 [( Bitline1 $end
$var wire 1 \( Bitline2 $end
$var wire 1 ]( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 ^( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ]( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ^( q $end
$var reg 1 ^( state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 _( Bitline1 $end
$var wire 1 `( Bitline2 $end
$var wire 1 a( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 b( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 a( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 b( q $end
$var reg 1 b( state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 c( Bitline1 $end
$var wire 1 d( Bitline2 $end
$var wire 1 e( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 f( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 e( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 f( q $end
$var reg 1 f( state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 g( Bitline1 $end
$var wire 1 h( Bitline2 $end
$var wire 1 i( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 j( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 i( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 j( q $end
$var reg 1 j( state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 k( Bitline1 $end
$var wire 1 l( Bitline2 $end
$var wire 1 m( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 n( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 m( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 n( q $end
$var reg 1 n( state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 o( Bitline1 $end
$var wire 1 p( Bitline2 $end
$var wire 1 q( D $end
$var wire 1 1( ReadEnable1 $end
$var wire 1 2( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 r( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 q( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 r( q $end
$var reg 1 r( state $end
$upscope $end
$upscope $end
$upscope $end
$scope module newPC_reg $end
$var wire 16 s( Bitline1 [15:0] $end
$var wire 16 t( Bitline2 [15:0] $end
$var wire 16 u( D [15:0] $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteReg $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$scope module bitArray[0] $end
$var wire 1 x( Bitline1 $end
$var wire 1 y( Bitline2 $end
$var wire 1 z( D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 {( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 {( q $end
$var reg 1 {( state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 |( Bitline1 $end
$var wire 1 }( Bitline2 $end
$var wire 1 ~( D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 !) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~( d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 !) q $end
$var reg 1 !) state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 ") Bitline1 $end
$var wire 1 #) Bitline2 $end
$var wire 1 $) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 %) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 %) q $end
$var reg 1 %) state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 &) Bitline1 $end
$var wire 1 ') Bitline2 $end
$var wire 1 () D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 )) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 () d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 )) q $end
$var reg 1 )) state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 *) Bitline1 $end
$var wire 1 +) Bitline2 $end
$var wire 1 ,) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 -) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 -) q $end
$var reg 1 -) state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 .) Bitline1 $end
$var wire 1 /) Bitline2 $end
$var wire 1 0) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 1) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 1) q $end
$var reg 1 1) state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 2) Bitline1 $end
$var wire 1 3) Bitline2 $end
$var wire 1 4) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 5) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 5) q $end
$var reg 1 5) state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 6) Bitline1 $end
$var wire 1 7) Bitline2 $end
$var wire 1 8) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 9) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 9) q $end
$var reg 1 9) state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 :) Bitline1 $end
$var wire 1 ;) Bitline2 $end
$var wire 1 <) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 =) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 =) q $end
$var reg 1 =) state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 >) Bitline1 $end
$var wire 1 ?) Bitline2 $end
$var wire 1 @) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 A) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 A) q $end
$var reg 1 A) state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 B) Bitline1 $end
$var wire 1 C) Bitline2 $end
$var wire 1 D) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 E) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 E) q $end
$var reg 1 E) state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 F) Bitline1 $end
$var wire 1 G) Bitline2 $end
$var wire 1 H) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 I) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 I) q $end
$var reg 1 I) state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 J) Bitline1 $end
$var wire 1 K) Bitline2 $end
$var wire 1 L) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 M) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 M) q $end
$var reg 1 M) state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 N) Bitline1 $end
$var wire 1 O) Bitline2 $end
$var wire 1 P) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 Q) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 Q) q $end
$var reg 1 Q) state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 R) Bitline1 $end
$var wire 1 S) Bitline2 $end
$var wire 1 T) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 U) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 U) q $end
$var reg 1 U) state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 V) Bitline1 $end
$var wire 1 W) Bitline2 $end
$var wire 1 X) D $end
$var wire 1 v( ReadEnable1 $end
$var wire 1 w( ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 Y) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 Y) q $end
$var reg 1 Y) state $end
$upscope $end
$upscope $end
$upscope $end
$scope module oldPC_reg $end
$var wire 16 Z) Bitline1 [15:0] $end
$var wire 16 [) Bitline2 [15:0] $end
$var wire 16 \) D [15:0] $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteReg $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$scope module bitArray[0] $end
$var wire 1 _) Bitline1 $end
$var wire 1 `) Bitline2 $end
$var wire 1 a) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 b) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 a) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 b) q $end
$var reg 1 b) state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 c) Bitline1 $end
$var wire 1 d) Bitline2 $end
$var wire 1 e) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 f) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 e) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 f) q $end
$var reg 1 f) state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 g) Bitline1 $end
$var wire 1 h) Bitline2 $end
$var wire 1 i) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 j) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 i) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 j) q $end
$var reg 1 j) state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 k) Bitline1 $end
$var wire 1 l) Bitline2 $end
$var wire 1 m) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 n) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 m) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 n) q $end
$var reg 1 n) state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 o) Bitline1 $end
$var wire 1 p) Bitline2 $end
$var wire 1 q) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 r) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 q) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 r) q $end
$var reg 1 r) state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 s) Bitline1 $end
$var wire 1 t) Bitline2 $end
$var wire 1 u) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 v) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 u) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 v) q $end
$var reg 1 v) state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 w) Bitline1 $end
$var wire 1 x) Bitline2 $end
$var wire 1 y) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 z) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 y) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 z) q $end
$var reg 1 z) state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 {) Bitline1 $end
$var wire 1 |) Bitline2 $end
$var wire 1 }) D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 ~) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 }) d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ~) q $end
$var reg 1 ~) state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 !* Bitline1 $end
$var wire 1 "* Bitline2 $end
$var wire 1 #* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 $* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 #* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 $* q $end
$var reg 1 $* state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 %* Bitline1 $end
$var wire 1 &* Bitline2 $end
$var wire 1 '* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 (* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 '* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 (* q $end
$var reg 1 (* state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 )* Bitline1 $end
$var wire 1 ** Bitline2 $end
$var wire 1 +* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 ,* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 +* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 ,* q $end
$var reg 1 ,* state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 -* Bitline1 $end
$var wire 1 .* Bitline2 $end
$var wire 1 /* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 0* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 /* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 0* q $end
$var reg 1 0* state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 1* Bitline1 $end
$var wire 1 2* Bitline2 $end
$var wire 1 3* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 4* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 3* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 4* q $end
$var reg 1 4* state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 5* Bitline1 $end
$var wire 1 6* Bitline2 $end
$var wire 1 7* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 8* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 7* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 8* q $end
$var reg 1 8* state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 9* Bitline1 $end
$var wire 1 :* Bitline2 $end
$var wire 1 ;* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 <* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ;* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 <* q $end
$var reg 1 <* state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 =* Bitline1 $end
$var wire 1 >* Bitline2 $end
$var wire 1 ?* D $end
$var wire 1 ]) ReadEnable1 $end
$var wire 1 ^) ReadEnable2 $end
$var wire 1 Z% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 Y% rst $end
$var wire 1 @* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ?* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 @* q $end
$var reg 1 @* state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_dest_dff[0] $end
$var wire 1 , clk $end
$var wire 1 A* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 B* q $end
$var reg 1 B* state $end
$upscope $end
$scope module reg_dest_dff[1] $end
$var wire 1 , clk $end
$var wire 1 C* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 D* q $end
$var reg 1 D* state $end
$upscope $end
$scope module reg_dest_dff[2] $end
$var wire 1 , clk $end
$var wire 1 E* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 F* q $end
$var reg 1 F* state $end
$upscope $end
$scope module reg_dest_dff[3] $end
$var wire 1 , clk $end
$var wire 1 G* d $end
$var wire 1 Y% rst $end
$var wire 1 Z% wen $end
$var wire 1 H* q $end
$var reg 1 H* state $end
$upscope $end
$upscope $end
$scope module M_W_flops0 $end
$var wire 16 I* ALUresult_in [15:0] $end
$var wire 16 J* ALUresult_out [15:0] $end
$var wire 1 , clk $end
$var wire 16 K* instruction_in [15:0] $end
$var wire 16 L* instruction_out [15:0] $end
$var wire 16 M* mem_out [15:0] $end
$var wire 16 N* newPC_in [15:0] $end
$var wire 16 O* newPC_out [15:0] $end
$var wire 16 P* oldPC_in [15:0] $end
$var wire 16 Q* oldPC_out [15:0] $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 4 T* reg_dest_out [3:0] $end
$var wire 4 U* reg_dest_in [3:0] $end
$var wire 16 V* mem_in [15:0] $end
$var wire 1 s halt_out $end
$var wire 1 f halt_in $end
$var wire 1 t SavePC_out $end
$var wire 1 g SavePC_in $end
$var wire 1 u RegWrite_out $end
$var wire 1 h RegWrite_in $end
$var wire 1 v MemtoReg_out $end
$var wire 1 i MemtoReg_in $end
$scope module ALUresult_reg $end
$var wire 16 W* Bitline1 [15:0] $end
$var wire 16 X* Bitline2 [15:0] $end
$var wire 16 Y* D [15:0] $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteReg $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$scope module bitArray[0] $end
$var wire 1 \* Bitline1 $end
$var wire 1 ]* Bitline2 $end
$var wire 1 ^* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 _* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 _* q $end
$var reg 1 _* state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 `* Bitline1 $end
$var wire 1 a* Bitline2 $end
$var wire 1 b* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 c* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 c* q $end
$var reg 1 c* state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 d* Bitline1 $end
$var wire 1 e* Bitline2 $end
$var wire 1 f* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 g* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 g* q $end
$var reg 1 g* state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 h* Bitline1 $end
$var wire 1 i* Bitline2 $end
$var wire 1 j* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 k* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 k* q $end
$var reg 1 k* state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 l* Bitline1 $end
$var wire 1 m* Bitline2 $end
$var wire 1 n* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 o* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 o* q $end
$var reg 1 o* state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 p* Bitline1 $end
$var wire 1 q* Bitline2 $end
$var wire 1 r* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 s* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 s* q $end
$var reg 1 s* state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 t* Bitline1 $end
$var wire 1 u* Bitline2 $end
$var wire 1 v* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 w* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 w* q $end
$var reg 1 w* state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 x* Bitline1 $end
$var wire 1 y* Bitline2 $end
$var wire 1 z* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 {* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 {* q $end
$var reg 1 {* state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 |* Bitline1 $end
$var wire 1 }* Bitline2 $end
$var wire 1 ~* D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 !+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~* d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 !+ q $end
$var reg 1 !+ state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 "+ Bitline1 $end
$var wire 1 #+ Bitline2 $end
$var wire 1 $+ D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 %+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 %+ q $end
$var reg 1 %+ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 &+ Bitline1 $end
$var wire 1 '+ Bitline2 $end
$var wire 1 (+ D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 )+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 )+ q $end
$var reg 1 )+ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 *+ Bitline1 $end
$var wire 1 ++ Bitline2 $end
$var wire 1 ,+ D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 -+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 -+ q $end
$var reg 1 -+ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 .+ Bitline1 $end
$var wire 1 /+ Bitline2 $end
$var wire 1 0+ D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 1+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 1+ q $end
$var reg 1 1+ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 2+ Bitline1 $end
$var wire 1 3+ Bitline2 $end
$var wire 1 4+ D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 5+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 5+ q $end
$var reg 1 5+ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 6+ Bitline1 $end
$var wire 1 7+ Bitline2 $end
$var wire 1 8+ D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 9+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 9+ q $end
$var reg 1 9+ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 :+ Bitline1 $end
$var wire 1 ;+ Bitline2 $end
$var wire 1 <+ D $end
$var wire 1 Z* ReadEnable1 $end
$var wire 1 [* ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 =+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 =+ q $end
$var reg 1 =+ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module MemtoReg_dff $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 v q $end
$var wire 1 i d $end
$var reg 1 v state $end
$upscope $end
$scope module RegWrite_dff $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 u q $end
$var wire 1 h d $end
$var reg 1 u state $end
$upscope $end
$scope module SavePC_dff $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 t q $end
$var wire 1 g d $end
$var reg 1 t state $end
$upscope $end
$scope module halt_dff $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 s q $end
$var wire 1 f d $end
$var reg 1 s state $end
$upscope $end
$scope module instruction_reg $end
$var wire 16 >+ Bitline1 [15:0] $end
$var wire 16 ?+ Bitline2 [15:0] $end
$var wire 16 @+ D [15:0] $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteReg $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$scope module bitArray[0] $end
$var wire 1 C+ Bitline1 $end
$var wire 1 D+ Bitline2 $end
$var wire 1 E+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 F+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 E+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 F+ q $end
$var reg 1 F+ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 G+ Bitline1 $end
$var wire 1 H+ Bitline2 $end
$var wire 1 I+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 J+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 I+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 J+ q $end
$var reg 1 J+ state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 K+ Bitline1 $end
$var wire 1 L+ Bitline2 $end
$var wire 1 M+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 N+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 M+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 N+ q $end
$var reg 1 N+ state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 O+ Bitline1 $end
$var wire 1 P+ Bitline2 $end
$var wire 1 Q+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 R+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Q+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 R+ q $end
$var reg 1 R+ state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 S+ Bitline1 $end
$var wire 1 T+ Bitline2 $end
$var wire 1 U+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 V+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 U+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 V+ q $end
$var reg 1 V+ state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 W+ Bitline1 $end
$var wire 1 X+ Bitline2 $end
$var wire 1 Y+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 Z+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Y+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 Z+ q $end
$var reg 1 Z+ state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 [+ Bitline1 $end
$var wire 1 \+ Bitline2 $end
$var wire 1 ]+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 ^+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ]+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ^+ q $end
$var reg 1 ^+ state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 _+ Bitline1 $end
$var wire 1 `+ Bitline2 $end
$var wire 1 a+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 b+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 a+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 b+ q $end
$var reg 1 b+ state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 c+ Bitline1 $end
$var wire 1 d+ Bitline2 $end
$var wire 1 e+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 f+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 e+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 f+ q $end
$var reg 1 f+ state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 g+ Bitline1 $end
$var wire 1 h+ Bitline2 $end
$var wire 1 i+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 j+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 i+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 j+ q $end
$var reg 1 j+ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 k+ Bitline1 $end
$var wire 1 l+ Bitline2 $end
$var wire 1 m+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 n+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 m+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 n+ q $end
$var reg 1 n+ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 o+ Bitline1 $end
$var wire 1 p+ Bitline2 $end
$var wire 1 q+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 r+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 q+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 r+ q $end
$var reg 1 r+ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 s+ Bitline1 $end
$var wire 1 t+ Bitline2 $end
$var wire 1 u+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 v+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 u+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 v+ q $end
$var reg 1 v+ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 w+ Bitline1 $end
$var wire 1 x+ Bitline2 $end
$var wire 1 y+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 z+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 y+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 z+ q $end
$var reg 1 z+ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 {+ Bitline1 $end
$var wire 1 |+ Bitline2 $end
$var wire 1 }+ D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 ~+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 }+ d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ~+ q $end
$var reg 1 ~+ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 !, Bitline1 $end
$var wire 1 ", Bitline2 $end
$var wire 1 #, D $end
$var wire 1 A+ ReadEnable1 $end
$var wire 1 B+ ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 $, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 #, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 $, q $end
$var reg 1 $, state $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_reg $end
$var wire 16 %, Bitline1 [15:0] $end
$var wire 16 &, Bitline2 [15:0] $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteReg $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 16 ), D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 *, Bitline1 $end
$var wire 1 +, Bitline2 $end
$var wire 1 ,, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 -, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 -, q $end
$var reg 1 -, state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 ., Bitline1 $end
$var wire 1 /, Bitline2 $end
$var wire 1 0, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 1, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 1, q $end
$var reg 1 1, state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 2, Bitline1 $end
$var wire 1 3, Bitline2 $end
$var wire 1 4, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 5, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 5, q $end
$var reg 1 5, state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 6, Bitline1 $end
$var wire 1 7, Bitline2 $end
$var wire 1 8, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 9, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 9, q $end
$var reg 1 9, state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 :, Bitline1 $end
$var wire 1 ;, Bitline2 $end
$var wire 1 <, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 =, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 =, q $end
$var reg 1 =, state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 >, Bitline1 $end
$var wire 1 ?, Bitline2 $end
$var wire 1 @, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 A, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 A, q $end
$var reg 1 A, state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 B, Bitline1 $end
$var wire 1 C, Bitline2 $end
$var wire 1 D, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 E, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 E, q $end
$var reg 1 E, state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 F, Bitline1 $end
$var wire 1 G, Bitline2 $end
$var wire 1 H, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 I, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 I, q $end
$var reg 1 I, state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 J, Bitline1 $end
$var wire 1 K, Bitline2 $end
$var wire 1 L, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 M, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 M, q $end
$var reg 1 M, state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 N, Bitline1 $end
$var wire 1 O, Bitline2 $end
$var wire 1 P, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 Q, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 Q, q $end
$var reg 1 Q, state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 R, Bitline1 $end
$var wire 1 S, Bitline2 $end
$var wire 1 T, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 U, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 U, q $end
$var reg 1 U, state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 V, Bitline1 $end
$var wire 1 W, Bitline2 $end
$var wire 1 X, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 Y, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 Y, q $end
$var reg 1 Y, state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 Z, Bitline1 $end
$var wire 1 [, Bitline2 $end
$var wire 1 \, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 ], dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ], q $end
$var reg 1 ], state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 ^, Bitline1 $end
$var wire 1 _, Bitline2 $end
$var wire 1 `, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 a, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 a, q $end
$var reg 1 a, state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 b, Bitline1 $end
$var wire 1 c, Bitline2 $end
$var wire 1 d, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 e, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 e, q $end
$var reg 1 e, state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 f, Bitline1 $end
$var wire 1 g, Bitline2 $end
$var wire 1 h, D $end
$var wire 1 ', ReadEnable1 $end
$var wire 1 (, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 i, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 i, q $end
$var reg 1 i, state $end
$upscope $end
$upscope $end
$upscope $end
$scope module newPC_reg $end
$var wire 16 j, Bitline1 [15:0] $end
$var wire 16 k, Bitline2 [15:0] $end
$var wire 16 l, D [15:0] $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteReg $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$scope module bitArray[0] $end
$var wire 1 o, Bitline1 $end
$var wire 1 p, Bitline2 $end
$var wire 1 q, D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 r, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 q, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 r, q $end
$var reg 1 r, state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 s, Bitline1 $end
$var wire 1 t, Bitline2 $end
$var wire 1 u, D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 v, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 u, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 v, q $end
$var reg 1 v, state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 w, Bitline1 $end
$var wire 1 x, Bitline2 $end
$var wire 1 y, D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 z, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 y, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 z, q $end
$var reg 1 z, state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 {, Bitline1 $end
$var wire 1 |, Bitline2 $end
$var wire 1 }, D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 ~, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 }, d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ~, q $end
$var reg 1 ~, state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 !- Bitline1 $end
$var wire 1 "- Bitline2 $end
$var wire 1 #- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 $- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 #- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 $- q $end
$var reg 1 $- state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 %- Bitline1 $end
$var wire 1 &- Bitline2 $end
$var wire 1 '- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 (- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 '- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 (- q $end
$var reg 1 (- state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 )- Bitline1 $end
$var wire 1 *- Bitline2 $end
$var wire 1 +- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 ,- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 +- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ,- q $end
$var reg 1 ,- state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 -- Bitline1 $end
$var wire 1 .- Bitline2 $end
$var wire 1 /- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 0- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 /- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 0- q $end
$var reg 1 0- state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 1- Bitline1 $end
$var wire 1 2- Bitline2 $end
$var wire 1 3- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 4- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 3- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 4- q $end
$var reg 1 4- state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 5- Bitline1 $end
$var wire 1 6- Bitline2 $end
$var wire 1 7- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 8- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 7- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 8- q $end
$var reg 1 8- state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 9- Bitline1 $end
$var wire 1 :- Bitline2 $end
$var wire 1 ;- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 <- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ;- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 <- q $end
$var reg 1 <- state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 =- Bitline1 $end
$var wire 1 >- Bitline2 $end
$var wire 1 ?- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 @- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ?- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 @- q $end
$var reg 1 @- state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 A- Bitline1 $end
$var wire 1 B- Bitline2 $end
$var wire 1 C- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 D- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 C- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 D- q $end
$var reg 1 D- state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 E- Bitline1 $end
$var wire 1 F- Bitline2 $end
$var wire 1 G- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 H- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 G- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 H- q $end
$var reg 1 H- state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 I- Bitline1 $end
$var wire 1 J- Bitline2 $end
$var wire 1 K- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 L- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 K- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 L- q $end
$var reg 1 L- state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 M- Bitline1 $end
$var wire 1 N- Bitline2 $end
$var wire 1 O- D $end
$var wire 1 m, ReadEnable1 $end
$var wire 1 n, ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 P- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 O- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 P- q $end
$var reg 1 P- state $end
$upscope $end
$upscope $end
$upscope $end
$scope module oldPC_reg $end
$var wire 16 Q- Bitline1 [15:0] $end
$var wire 16 R- Bitline2 [15:0] $end
$var wire 16 S- D [15:0] $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteReg $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$scope module bitArray[0] $end
$var wire 1 V- Bitline1 $end
$var wire 1 W- Bitline2 $end
$var wire 1 X- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 Y- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 Y- q $end
$var reg 1 Y- state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 Z- Bitline1 $end
$var wire 1 [- Bitline2 $end
$var wire 1 \- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 ]- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ]- q $end
$var reg 1 ]- state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 ^- Bitline1 $end
$var wire 1 _- Bitline2 $end
$var wire 1 `- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 a- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 a- q $end
$var reg 1 a- state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 b- Bitline1 $end
$var wire 1 c- Bitline2 $end
$var wire 1 d- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 e- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 e- q $end
$var reg 1 e- state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 f- Bitline1 $end
$var wire 1 g- Bitline2 $end
$var wire 1 h- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 i- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 i- q $end
$var reg 1 i- state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 j- Bitline1 $end
$var wire 1 k- Bitline2 $end
$var wire 1 l- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 m- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 m- q $end
$var reg 1 m- state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 n- Bitline1 $end
$var wire 1 o- Bitline2 $end
$var wire 1 p- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 q- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 q- q $end
$var reg 1 q- state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 r- Bitline1 $end
$var wire 1 s- Bitline2 $end
$var wire 1 t- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 u- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 u- q $end
$var reg 1 u- state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 v- Bitline1 $end
$var wire 1 w- Bitline2 $end
$var wire 1 x- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 y- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 y- q $end
$var reg 1 y- state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 z- Bitline1 $end
$var wire 1 {- Bitline2 $end
$var wire 1 |- D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 }- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |- d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 }- q $end
$var reg 1 }- state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ~- Bitline1 $end
$var wire 1 !. Bitline2 $end
$var wire 1 ". D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 #. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ". d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 #. q $end
$var reg 1 #. state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 $. Bitline1 $end
$var wire 1 %. Bitline2 $end
$var wire 1 &. D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 '. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 '. q $end
$var reg 1 '. state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 (. Bitline1 $end
$var wire 1 ). Bitline2 $end
$var wire 1 *. D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 +. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 +. q $end
$var reg 1 +. state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 ,. Bitline1 $end
$var wire 1 -. Bitline2 $end
$var wire 1 .. D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 /. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 /. q $end
$var reg 1 /. state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 0. Bitline1 $end
$var wire 1 1. Bitline2 $end
$var wire 1 2. D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 3. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 3. q $end
$var reg 1 3. state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 4. Bitline1 $end
$var wire 1 5. Bitline2 $end
$var wire 1 6. D $end
$var wire 1 T- ReadEnable1 $end
$var wire 1 U- ReadEnable2 $end
$var wire 1 S* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 R* rst $end
$var wire 1 7. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 7. q $end
$var reg 1 7. state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_dest_dff[0] $end
$var wire 1 , clk $end
$var wire 1 8. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 9. q $end
$var reg 1 9. state $end
$upscope $end
$scope module reg_dest_dff[1] $end
$var wire 1 , clk $end
$var wire 1 :. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ;. q $end
$var reg 1 ;. state $end
$upscope $end
$scope module reg_dest_dff[2] $end
$var wire 1 , clk $end
$var wire 1 <. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 =. q $end
$var reg 1 =. state $end
$upscope $end
$scope module reg_dest_dff[3] $end
$var wire 1 , clk $end
$var wire 1 >. d $end
$var wire 1 R* rst $end
$var wire 1 S* wen $end
$var wire 1 ?. q $end
$var reg 1 ?. state $end
$upscope $end
$upscope $end
$scope module X_M_flops0 $end
$var wire 16 @. ALUresult_in [15:0] $end
$var wire 16 A. ALUresult_out [15:0] $end
$var wire 1 *" MemRead_in $end
$var wire 1 )" MemWrite_in $end
$var wire 1 (" MemtoReg_in $end
$var wire 1 &" RegWrite_in $end
$var wire 1 %" SavePC_in $end
$var wire 4 B. Source2_in [3:0] $end
$var wire 16 C. b_in [15:0] $end
$var wire 16 D. b_out [15:0] $end
$var wire 1 , clk $end
$var wire 1 "" halt_in $end
$var wire 16 E. instruction_in [15:0] $end
$var wire 16 F. instruction_out [15:0] $end
$var wire 16 G. newPC_in [15:0] $end
$var wire 16 H. newPC_out [15:0] $end
$var wire 16 I. oldPC_in [15:0] $end
$var wire 16 J. oldPC_out [15:0] $end
$var wire 4 K. reg_dest_in [3:0] $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 4 N. reg_dest_out [3:0] $end
$var wire 1 f halt_out $end
$var wire 4 O. Source2_out [3:0] $end
$var wire 1 g SavePC_out $end
$var wire 1 h RegWrite_out $end
$var wire 1 i MemtoReg_out $end
$var wire 1 j MemWrite_out $end
$var wire 1 k MemRead_out $end
$scope module ALUresult_reg $end
$var wire 16 P. Bitline1 [15:0] $end
$var wire 16 Q. Bitline2 [15:0] $end
$var wire 16 R. D [15:0] $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteReg $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$scope module bitArray[0] $end
$var wire 1 U. Bitline1 $end
$var wire 1 V. Bitline2 $end
$var wire 1 W. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 X. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 W. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 X. q $end
$var reg 1 X. state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 Y. Bitline1 $end
$var wire 1 Z. Bitline2 $end
$var wire 1 [. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 \. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 [. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 \. q $end
$var reg 1 \. state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 ]. Bitline1 $end
$var wire 1 ^. Bitline2 $end
$var wire 1 _. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 `. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 _. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 `. q $end
$var reg 1 `. state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 a. Bitline1 $end
$var wire 1 b. Bitline2 $end
$var wire 1 c. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 d. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 c. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 d. q $end
$var reg 1 d. state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 e. Bitline1 $end
$var wire 1 f. Bitline2 $end
$var wire 1 g. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 h. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 g. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 h. q $end
$var reg 1 h. state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 i. Bitline1 $end
$var wire 1 j. Bitline2 $end
$var wire 1 k. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 l. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 k. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 l. q $end
$var reg 1 l. state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 m. Bitline1 $end
$var wire 1 n. Bitline2 $end
$var wire 1 o. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 p. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 o. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 p. q $end
$var reg 1 p. state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 q. Bitline1 $end
$var wire 1 r. Bitline2 $end
$var wire 1 s. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 t. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 s. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 t. q $end
$var reg 1 t. state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 u. Bitline1 $end
$var wire 1 v. Bitline2 $end
$var wire 1 w. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 x. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 w. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 x. q $end
$var reg 1 x. state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 y. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 {. D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 |. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 {. d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 |. q $end
$var reg 1 |. state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 }. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 !/ D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 "/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 !/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 "/ q $end
$var reg 1 "/ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 #/ Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 %/ D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 &/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 %/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 &/ q $end
$var reg 1 &/ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 '/ Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 )/ D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 */ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 )/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 */ q $end
$var reg 1 */ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 +/ Bitline1 $end
$var wire 1 ,/ Bitline2 $end
$var wire 1 -/ D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 ./ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 -/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ./ q $end
$var reg 1 ./ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 // Bitline1 $end
$var wire 1 0/ Bitline2 $end
$var wire 1 1/ D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 2/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 1/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 2/ q $end
$var reg 1 2/ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 3/ Bitline1 $end
$var wire 1 4/ Bitline2 $end
$var wire 1 5/ D $end
$var wire 1 S. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 6/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 5/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 6/ q $end
$var reg 1 6/ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module MemRead_dff $end
$var wire 1 , clk $end
$var wire 1 *" d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 k q $end
$var reg 1 k state $end
$upscope $end
$scope module MemWrite_dff $end
$var wire 1 , clk $end
$var wire 1 )" d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 j q $end
$var reg 1 j state $end
$upscope $end
$scope module MemtoReg_dff $end
$var wire 1 , clk $end
$var wire 1 (" d $end
$var wire 1 i q $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var reg 1 7/ state $end
$upscope $end
$scope module RegWrite_dff $end
$var wire 1 , clk $end
$var wire 1 &" d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 h q $end
$var reg 1 h state $end
$upscope $end
$scope module SavePC_dff $end
$var wire 1 , clk $end
$var wire 1 %" d $end
$var wire 1 g q $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var reg 1 8/ state $end
$upscope $end
$scope module Source2_dff[0] $end
$var wire 1 , clk $end
$var wire 1 9/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 :/ q $end
$var reg 1 :/ state $end
$upscope $end
$scope module Source2_dff[1] $end
$var wire 1 , clk $end
$var wire 1 ;/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 </ q $end
$var reg 1 </ state $end
$upscope $end
$scope module Source2_dff[2] $end
$var wire 1 , clk $end
$var wire 1 =/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 >/ q $end
$var reg 1 >/ state $end
$upscope $end
$scope module Source2_dff[3] $end
$var wire 1 , clk $end
$var wire 1 ?/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 @/ q $end
$var reg 1 @/ state $end
$upscope $end
$scope module b_reg $end
$var wire 16 A/ Bitline1 [15:0] $end
$var wire 16 B/ Bitline2 [15:0] $end
$var wire 16 C/ D [15:0] $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteReg $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$scope module bitArray[0] $end
$var wire 1 F/ Bitline1 $end
$var wire 1 G/ Bitline2 $end
$var wire 1 H/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 I/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 I/ q $end
$var reg 1 I/ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 J/ Bitline1 $end
$var wire 1 K/ Bitline2 $end
$var wire 1 L/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 M/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 M/ q $end
$var reg 1 M/ state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 N/ Bitline1 $end
$var wire 1 O/ Bitline2 $end
$var wire 1 P/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 Q/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 Q/ q $end
$var reg 1 Q/ state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 R/ Bitline1 $end
$var wire 1 S/ Bitline2 $end
$var wire 1 T/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 U/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 U/ q $end
$var reg 1 U/ state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 V/ Bitline1 $end
$var wire 1 W/ Bitline2 $end
$var wire 1 X/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 Y/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 Y/ q $end
$var reg 1 Y/ state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 Z/ Bitline1 $end
$var wire 1 [/ Bitline2 $end
$var wire 1 \/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 ]/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ]/ q $end
$var reg 1 ]/ state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 ^/ Bitline1 $end
$var wire 1 _/ Bitline2 $end
$var wire 1 `/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 a/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 a/ q $end
$var reg 1 a/ state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 b/ Bitline1 $end
$var wire 1 c/ Bitline2 $end
$var wire 1 d/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 e/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 e/ q $end
$var reg 1 e/ state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 f/ Bitline1 $end
$var wire 1 g/ Bitline2 $end
$var wire 1 h/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 i/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 i/ q $end
$var reg 1 i/ state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 j/ Bitline1 $end
$var wire 1 k/ Bitline2 $end
$var wire 1 l/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 m/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 m/ q $end
$var reg 1 m/ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 n/ Bitline1 $end
$var wire 1 o/ Bitline2 $end
$var wire 1 p/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 q/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 q/ q $end
$var reg 1 q/ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 r/ Bitline1 $end
$var wire 1 s/ Bitline2 $end
$var wire 1 t/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 u/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 u/ q $end
$var reg 1 u/ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 v/ Bitline1 $end
$var wire 1 w/ Bitline2 $end
$var wire 1 x/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 y/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 y/ q $end
$var reg 1 y/ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 z/ Bitline1 $end
$var wire 1 {/ Bitline2 $end
$var wire 1 |/ D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 }/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |/ d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 }/ q $end
$var reg 1 }/ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 ~/ Bitline1 $end
$var wire 1 !0 Bitline2 $end
$var wire 1 "0 D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 #0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 #0 q $end
$var reg 1 #0 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 $0 Bitline1 $end
$var wire 1 %0 Bitline2 $end
$var wire 1 &0 D $end
$var wire 1 D/ ReadEnable1 $end
$var wire 1 E/ ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 '0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 '0 q $end
$var reg 1 '0 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module halt_dff $end
$var wire 1 , clk $end
$var wire 1 "" d $end
$var wire 1 f q $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var reg 1 (0 state $end
$upscope $end
$scope module instruction_reg $end
$var wire 16 )0 Bitline1 [15:0] $end
$var wire 16 *0 Bitline2 [15:0] $end
$var wire 16 +0 D [15:0] $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteReg $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$scope module bitArray[0] $end
$var wire 1 .0 Bitline1 $end
$var wire 1 /0 Bitline2 $end
$var wire 1 00 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 10 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 00 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 10 q $end
$var reg 1 10 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 20 Bitline1 $end
$var wire 1 30 Bitline2 $end
$var wire 1 40 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 50 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 40 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 50 q $end
$var reg 1 50 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 60 Bitline1 $end
$var wire 1 70 Bitline2 $end
$var wire 1 80 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 90 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 80 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 90 q $end
$var reg 1 90 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 :0 Bitline1 $end
$var wire 1 ;0 Bitline2 $end
$var wire 1 <0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 =0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 =0 q $end
$var reg 1 =0 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 >0 Bitline1 $end
$var wire 1 ?0 Bitline2 $end
$var wire 1 @0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 A0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 A0 q $end
$var reg 1 A0 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 B0 Bitline1 $end
$var wire 1 C0 Bitline2 $end
$var wire 1 D0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 E0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 E0 q $end
$var reg 1 E0 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 F0 Bitline1 $end
$var wire 1 G0 Bitline2 $end
$var wire 1 H0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 I0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 I0 q $end
$var reg 1 I0 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 J0 Bitline1 $end
$var wire 1 K0 Bitline2 $end
$var wire 1 L0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 M0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 M0 q $end
$var reg 1 M0 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 N0 Bitline1 $end
$var wire 1 O0 Bitline2 $end
$var wire 1 P0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 Q0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 Q0 q $end
$var reg 1 Q0 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 R0 Bitline1 $end
$var wire 1 S0 Bitline2 $end
$var wire 1 T0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 U0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 U0 q $end
$var reg 1 U0 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 V0 Bitline1 $end
$var wire 1 W0 Bitline2 $end
$var wire 1 X0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 Y0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 Y0 q $end
$var reg 1 Y0 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 Z0 Bitline1 $end
$var wire 1 [0 Bitline2 $end
$var wire 1 \0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 ]0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ]0 q $end
$var reg 1 ]0 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 ^0 Bitline1 $end
$var wire 1 _0 Bitline2 $end
$var wire 1 `0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 a0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 a0 q $end
$var reg 1 a0 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 b0 Bitline1 $end
$var wire 1 c0 Bitline2 $end
$var wire 1 d0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 e0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 e0 q $end
$var reg 1 e0 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 f0 Bitline1 $end
$var wire 1 g0 Bitline2 $end
$var wire 1 h0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 i0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 i0 q $end
$var reg 1 i0 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 j0 Bitline1 $end
$var wire 1 k0 Bitline2 $end
$var wire 1 l0 D $end
$var wire 1 ,0 ReadEnable1 $end
$var wire 1 -0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 m0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 m0 q $end
$var reg 1 m0 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module newPC_reg $end
$var wire 16 n0 Bitline1 [15:0] $end
$var wire 16 o0 Bitline2 [15:0] $end
$var wire 16 p0 D [15:0] $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteReg $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$scope module bitArray[0] $end
$var wire 1 s0 Bitline1 $end
$var wire 1 t0 Bitline2 $end
$var wire 1 u0 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 v0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 u0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 v0 q $end
$var reg 1 v0 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 w0 Bitline1 $end
$var wire 1 x0 Bitline2 $end
$var wire 1 y0 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 z0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 y0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 z0 q $end
$var reg 1 z0 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 {0 Bitline1 $end
$var wire 1 |0 Bitline2 $end
$var wire 1 }0 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 ~0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 }0 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ~0 q $end
$var reg 1 ~0 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 !1 Bitline1 $end
$var wire 1 "1 Bitline2 $end
$var wire 1 #1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 $1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 #1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 $1 q $end
$var reg 1 $1 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 %1 Bitline1 $end
$var wire 1 &1 Bitline2 $end
$var wire 1 '1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 (1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 '1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 (1 q $end
$var reg 1 (1 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 )1 Bitline1 $end
$var wire 1 *1 Bitline2 $end
$var wire 1 +1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 ,1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 +1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ,1 q $end
$var reg 1 ,1 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 -1 Bitline1 $end
$var wire 1 .1 Bitline2 $end
$var wire 1 /1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 01 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 /1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 01 q $end
$var reg 1 01 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 11 Bitline1 $end
$var wire 1 21 Bitline2 $end
$var wire 1 31 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 41 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 31 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 41 q $end
$var reg 1 41 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 51 Bitline1 $end
$var wire 1 61 Bitline2 $end
$var wire 1 71 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 81 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 71 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 81 q $end
$var reg 1 81 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 91 Bitline1 $end
$var wire 1 :1 Bitline2 $end
$var wire 1 ;1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 <1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ;1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 <1 q $end
$var reg 1 <1 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 =1 Bitline1 $end
$var wire 1 >1 Bitline2 $end
$var wire 1 ?1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 @1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ?1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 @1 q $end
$var reg 1 @1 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 A1 Bitline1 $end
$var wire 1 B1 Bitline2 $end
$var wire 1 C1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 D1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 C1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 D1 q $end
$var reg 1 D1 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 E1 Bitline1 $end
$var wire 1 F1 Bitline2 $end
$var wire 1 G1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 H1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 G1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 H1 q $end
$var reg 1 H1 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 I1 Bitline1 $end
$var wire 1 J1 Bitline2 $end
$var wire 1 K1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 L1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 K1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 L1 q $end
$var reg 1 L1 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 M1 Bitline1 $end
$var wire 1 N1 Bitline2 $end
$var wire 1 O1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 P1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 O1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 P1 q $end
$var reg 1 P1 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 Q1 Bitline1 $end
$var wire 1 R1 Bitline2 $end
$var wire 1 S1 D $end
$var wire 1 q0 ReadEnable1 $end
$var wire 1 r0 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 T1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 S1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 T1 q $end
$var reg 1 T1 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module oldPC_reg $end
$var wire 16 U1 Bitline1 [15:0] $end
$var wire 16 V1 Bitline2 [15:0] $end
$var wire 16 W1 D [15:0] $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteReg $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$scope module bitArray[0] $end
$var wire 1 Z1 Bitline1 $end
$var wire 1 [1 Bitline2 $end
$var wire 1 \1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 ]1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ]1 q $end
$var reg 1 ]1 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 ^1 Bitline1 $end
$var wire 1 _1 Bitline2 $end
$var wire 1 `1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 a1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 a1 q $end
$var reg 1 a1 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 b1 Bitline1 $end
$var wire 1 c1 Bitline2 $end
$var wire 1 d1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 e1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 e1 q $end
$var reg 1 e1 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 f1 Bitline1 $end
$var wire 1 g1 Bitline2 $end
$var wire 1 h1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 i1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 i1 q $end
$var reg 1 i1 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 j1 Bitline1 $end
$var wire 1 k1 Bitline2 $end
$var wire 1 l1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 m1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 m1 q $end
$var reg 1 m1 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 n1 Bitline1 $end
$var wire 1 o1 Bitline2 $end
$var wire 1 p1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 q1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 q1 q $end
$var reg 1 q1 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 r1 Bitline1 $end
$var wire 1 s1 Bitline2 $end
$var wire 1 t1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 u1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 u1 q $end
$var reg 1 u1 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 v1 Bitline1 $end
$var wire 1 w1 Bitline2 $end
$var wire 1 x1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 y1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 y1 q $end
$var reg 1 y1 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 z1 Bitline1 $end
$var wire 1 {1 Bitline2 $end
$var wire 1 |1 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 }1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |1 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 }1 q $end
$var reg 1 }1 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 ~1 Bitline1 $end
$var wire 1 !2 Bitline2 $end
$var wire 1 "2 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 #2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 #2 q $end
$var reg 1 #2 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 $2 Bitline1 $end
$var wire 1 %2 Bitline2 $end
$var wire 1 &2 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 '2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 '2 q $end
$var reg 1 '2 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 (2 Bitline1 $end
$var wire 1 )2 Bitline2 $end
$var wire 1 *2 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 +2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 +2 q $end
$var reg 1 +2 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 ,2 Bitline1 $end
$var wire 1 -2 Bitline2 $end
$var wire 1 .2 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 /2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 /2 q $end
$var reg 1 /2 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 02 Bitline1 $end
$var wire 1 12 Bitline2 $end
$var wire 1 22 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 32 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 22 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 32 q $end
$var reg 1 32 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 42 Bitline1 $end
$var wire 1 52 Bitline2 $end
$var wire 1 62 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 72 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 62 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 72 q $end
$var reg 1 72 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 82 Bitline1 $end
$var wire 1 92 Bitline2 $end
$var wire 1 :2 D $end
$var wire 1 X1 ReadEnable1 $end
$var wire 1 Y1 ReadEnable2 $end
$var wire 1 M. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 L. rst $end
$var wire 1 ;2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ;2 q $end
$var reg 1 ;2 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_dest_dff[0] $end
$var wire 1 , clk $end
$var wire 1 <2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 =2 q $end
$var reg 1 =2 state $end
$upscope $end
$scope module reg_dest_dff[1] $end
$var wire 1 , clk $end
$var wire 1 >2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 ?2 q $end
$var reg 1 ?2 state $end
$upscope $end
$scope module reg_dest_dff[2] $end
$var wire 1 , clk $end
$var wire 1 @2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 A2 q $end
$var reg 1 A2 state $end
$upscope $end
$scope module reg_dest_dff[3] $end
$var wire 1 , clk $end
$var wire 1 B2 d $end
$var wire 1 L. rst $end
$var wire 1 M. wen $end
$var wire 1 C2 q $end
$var reg 1 C2 state $end
$upscope $end
$upscope $end
$scope module branch0 $end
$var wire 3 D2 NVZflag [2:0] $end
$var wire 1 I branch_inst $end
$var wire 3 E2 cond [2:0] $end
$var wire 1 ] do_branch $end
$upscope $end
$scope module cla_br $end
$var wire 16 F2 B [15:0] $end
$var wire 1 G2 Cin $end
$var wire 16 H2 Sum [15:0] $end
$var wire 1 I2 Cout $end
$var wire 1 J2 C0 $end
$var wire 16 K2 A [15:0] $end
$scope module CLA8_0 $end
$var wire 8 L2 A [7:0] $end
$var wire 8 M2 B [7:0] $end
$var wire 1 G2 Cin $end
$var wire 8 N2 Sum [7:0] $end
$var wire 1 J2 Cout $end
$var wire 1 O2 C0 $end
$scope module CLA4_0 $end
$var wire 4 P2 A [3:0] $end
$var wire 4 Q2 B [3:0] $end
$var wire 1 R2 C0 $end
$var wire 1 S2 C1 $end
$var wire 1 T2 C2 $end
$var wire 1 U2 C3 $end
$var wire 1 G2 Cin $end
$var wire 1 O2 Cout $end
$var wire 1 V2 G0 $end
$var wire 1 W2 G1 $end
$var wire 1 X2 G2 $end
$var wire 1 Y2 G3 $end
$var wire 1 Z2 P0 $end
$var wire 1 [2 P1 $end
$var wire 1 \2 P2 $end
$var wire 1 ]2 P3 $end
$var wire 4 ^2 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 _2 A [3:0] $end
$var wire 4 `2 B [3:0] $end
$var wire 1 a2 C0 $end
$var wire 1 b2 C1 $end
$var wire 1 c2 C2 $end
$var wire 1 d2 C3 $end
$var wire 1 O2 Cin $end
$var wire 1 J2 Cout $end
$var wire 1 e2 G0 $end
$var wire 1 f2 G1 $end
$var wire 1 g2 G2 $end
$var wire 1 h2 G3 $end
$var wire 1 i2 P0 $end
$var wire 1 j2 P1 $end
$var wire 1 k2 P2 $end
$var wire 1 l2 P3 $end
$var wire 4 m2 Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_1 $end
$var wire 8 n2 A [7:0] $end
$var wire 8 o2 B [7:0] $end
$var wire 1 J2 Cin $end
$var wire 8 p2 Sum [7:0] $end
$var wire 1 I2 Cout $end
$var wire 1 q2 C0 $end
$scope module CLA4_0 $end
$var wire 4 r2 A [3:0] $end
$var wire 4 s2 B [3:0] $end
$var wire 1 t2 C0 $end
$var wire 1 u2 C1 $end
$var wire 1 v2 C2 $end
$var wire 1 w2 C3 $end
$var wire 1 J2 Cin $end
$var wire 1 q2 Cout $end
$var wire 1 x2 G0 $end
$var wire 1 y2 G1 $end
$var wire 1 z2 G2 $end
$var wire 1 {2 G3 $end
$var wire 1 |2 P0 $end
$var wire 1 }2 P1 $end
$var wire 1 ~2 P2 $end
$var wire 1 !3 P3 $end
$var wire 4 "3 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 #3 A [3:0] $end
$var wire 4 $3 B [3:0] $end
$var wire 1 %3 C0 $end
$var wire 1 &3 C1 $end
$var wire 1 '3 C2 $end
$var wire 1 (3 C3 $end
$var wire 1 q2 Cin $end
$var wire 1 I2 Cout $end
$var wire 1 )3 G0 $end
$var wire 1 *3 G1 $end
$var wire 1 +3 G2 $end
$var wire 1 ,3 G3 $end
$var wire 1 -3 P0 $end
$var wire 1 .3 P1 $end
$var wire 1 /3 P2 $end
$var wire 1 03 P3 $end
$var wire 4 13 Sum [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cla_inc $end
$var wire 16 23 B [15:0] $end
$var wire 1 33 Cin $end
$var wire 16 43 Sum [15:0] $end
$var wire 1 53 Cout $end
$var wire 1 63 C0 $end
$var wire 16 73 A [15:0] $end
$scope module CLA8_0 $end
$var wire 8 83 A [7:0] $end
$var wire 8 93 B [7:0] $end
$var wire 1 33 Cin $end
$var wire 8 :3 Sum [7:0] $end
$var wire 1 63 Cout $end
$var wire 1 ;3 C0 $end
$scope module CLA4_0 $end
$var wire 4 <3 A [3:0] $end
$var wire 4 =3 B [3:0] $end
$var wire 1 >3 C0 $end
$var wire 1 ?3 C1 $end
$var wire 1 @3 C2 $end
$var wire 1 A3 C3 $end
$var wire 1 33 Cin $end
$var wire 1 ;3 Cout $end
$var wire 1 B3 G0 $end
$var wire 1 C3 G1 $end
$var wire 1 D3 G2 $end
$var wire 1 E3 G3 $end
$var wire 1 F3 P0 $end
$var wire 1 G3 P1 $end
$var wire 1 H3 P2 $end
$var wire 1 I3 P3 $end
$var wire 4 J3 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 K3 A [3:0] $end
$var wire 4 L3 B [3:0] $end
$var wire 1 M3 C0 $end
$var wire 1 N3 C1 $end
$var wire 1 O3 C2 $end
$var wire 1 P3 C3 $end
$var wire 1 ;3 Cin $end
$var wire 1 63 Cout $end
$var wire 1 Q3 G0 $end
$var wire 1 R3 G1 $end
$var wire 1 S3 G2 $end
$var wire 1 T3 G3 $end
$var wire 1 U3 P0 $end
$var wire 1 V3 P1 $end
$var wire 1 W3 P2 $end
$var wire 1 X3 P3 $end
$var wire 4 Y3 Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_1 $end
$var wire 8 Z3 A [7:0] $end
$var wire 8 [3 B [7:0] $end
$var wire 1 63 Cin $end
$var wire 8 \3 Sum [7:0] $end
$var wire 1 53 Cout $end
$var wire 1 ]3 C0 $end
$scope module CLA4_0 $end
$var wire 4 ^3 A [3:0] $end
$var wire 4 _3 B [3:0] $end
$var wire 1 `3 C0 $end
$var wire 1 a3 C1 $end
$var wire 1 b3 C2 $end
$var wire 1 c3 C3 $end
$var wire 1 63 Cin $end
$var wire 1 ]3 Cout $end
$var wire 1 d3 G0 $end
$var wire 1 e3 G1 $end
$var wire 1 f3 G2 $end
$var wire 1 g3 G3 $end
$var wire 1 h3 P0 $end
$var wire 1 i3 P1 $end
$var wire 1 j3 P2 $end
$var wire 1 k3 P3 $end
$var wire 4 l3 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 m3 A [3:0] $end
$var wire 4 n3 B [3:0] $end
$var wire 1 o3 C0 $end
$var wire 1 p3 C1 $end
$var wire 1 q3 C2 $end
$var wire 1 r3 C3 $end
$var wire 1 ]3 Cin $end
$var wire 1 53 Cout $end
$var wire 1 s3 G0 $end
$var wire 1 t3 G1 $end
$var wire 1 u3 G2 $end
$var wire 1 v3 G3 $end
$var wire 1 w3 P0 $end
$var wire 1 x3 P1 $end
$var wire 1 y3 P2 $end
$var wire 1 z3 P3 $end
$var wire 4 {3 Sum [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module control0 $end
$var wire 1 ." RegWrite $end
$var wire 4 |3 opcode [3:0] $end
$var wire 1 [ flagZ $end
$var wire 1 \ flagNV $end
$var wire 1 { branch_src $end
$var wire 1 | branch_inst $end
$var wire 1 -" SavePC $end
$var wire 1 /" RegDst $end
$var wire 1 }3 PCs $end
$var wire 1 0" MemtoReg $end
$var wire 1 1" MemWrite $end
$var wire 1 2" MemRead $end
$var wire 1 3" LoadPartial $end
$var wire 1 ~3 Hlt $end
$var wire 1 4" ALUsrc $end
$var wire 3 !4 ALUOp [2:0] $end
$upscope $end
$scope module data_memory $end
$var wire 16 "4 addr [15:0] $end
$var wire 1 , clk $end
$var wire 16 #4 data_in [15:0] $end
$var wire 1 $4 enable $end
$var wire 1 %4 rst $end
$var wire 1 j wr $end
$var wire 16 &4 data_out [15:0] $end
$var parameter 32 '4 ADDR_WIDTH $end
$var reg 1 (4 loaded $end
$upscope $end
$scope module fdFlop $end
$var wire 1 , clk $end
$var wire 16 )4 instruction_out [15:0] $end
$var wire 16 *4 newPC_in [15:0] $end
$var wire 16 +4 newPC_out [15:0] $end
$var wire 16 ,4 oldPC_out [15:0] $end
$var wire 1 -4 rst $end
$var wire 1 K stopPC $end
$var wire 1 .4 wen $end
$var wire 16 /4 oldPC_in [15:0] $end
$var wire 16 04 instruction_in [15:0] $end
$var wire 1 14 currentHalt $end
$scope module currentlyHalted $end
$var wire 1 14 D $end
$var wire 1 K Q $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 24 interQ $end
$scope module flop0 $end
$var wire 1 34 clk $end
$var wire 1 14 d $end
$var wire 1 24 q $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var reg 1 44 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 54 clk $end
$var wire 1 24 d $end
$var wire 1 K q $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var reg 1 64 state $end
$upscope $end
$upscope $end
$scope module reg_inst $end
$var wire 16 74 Bitline1 [15:0] $end
$var wire 16 84 Bitline2 [15:0] $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteReg $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 16 ;4 D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 <4 Bitline1 $end
$var wire 1 =4 Bitline2 $end
$var wire 1 >4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 ?4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 ?4 q $end
$var reg 1 ?4 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 @4 Bitline1 $end
$var wire 1 A4 Bitline2 $end
$var wire 1 B4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 C4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 C4 q $end
$var reg 1 C4 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 D4 Bitline1 $end
$var wire 1 E4 Bitline2 $end
$var wire 1 F4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 G4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 G4 q $end
$var reg 1 G4 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 H4 Bitline1 $end
$var wire 1 I4 Bitline2 $end
$var wire 1 J4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 K4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 K4 q $end
$var reg 1 K4 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 L4 Bitline1 $end
$var wire 1 M4 Bitline2 $end
$var wire 1 N4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 O4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 O4 q $end
$var reg 1 O4 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 P4 Bitline1 $end
$var wire 1 Q4 Bitline2 $end
$var wire 1 R4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 S4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 S4 q $end
$var reg 1 S4 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 T4 Bitline1 $end
$var wire 1 U4 Bitline2 $end
$var wire 1 V4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 W4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 W4 q $end
$var reg 1 W4 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 X4 Bitline1 $end
$var wire 1 Y4 Bitline2 $end
$var wire 1 Z4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 [4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 [4 q $end
$var reg 1 [4 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 \4 Bitline1 $end
$var wire 1 ]4 Bitline2 $end
$var wire 1 ^4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 _4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 _4 q $end
$var reg 1 _4 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 `4 Bitline1 $end
$var wire 1 a4 Bitline2 $end
$var wire 1 b4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 c4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 c4 q $end
$var reg 1 c4 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 d4 Bitline1 $end
$var wire 1 e4 Bitline2 $end
$var wire 1 f4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 g4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 g4 q $end
$var reg 1 g4 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 h4 Bitline1 $end
$var wire 1 i4 Bitline2 $end
$var wire 1 j4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 k4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 k4 q $end
$var reg 1 k4 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 l4 Bitline1 $end
$var wire 1 m4 Bitline2 $end
$var wire 1 n4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 o4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 o4 q $end
$var reg 1 o4 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 p4 Bitline1 $end
$var wire 1 q4 Bitline2 $end
$var wire 1 r4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 s4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 s4 q $end
$var reg 1 s4 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 t4 Bitline1 $end
$var wire 1 u4 Bitline2 $end
$var wire 1 v4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 w4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 w4 q $end
$var reg 1 w4 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 x4 Bitline1 $end
$var wire 1 y4 Bitline2 $end
$var wire 1 z4 D $end
$var wire 1 94 ReadEnable1 $end
$var wire 1 :4 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 {4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z4 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 {4 q $end
$var reg 1 {4 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_newPC $end
$var wire 16 |4 Bitline1 [15:0] $end
$var wire 16 }4 Bitline2 [15:0] $end
$var wire 16 ~4 D [15:0] $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteReg $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$scope module bitArray[0] $end
$var wire 1 #5 Bitline1 $end
$var wire 1 $5 Bitline2 $end
$var wire 1 %5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 &5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 %5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 &5 q $end
$var reg 1 &5 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 '5 Bitline1 $end
$var wire 1 (5 Bitline2 $end
$var wire 1 )5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 *5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 )5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 *5 q $end
$var reg 1 *5 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 +5 Bitline1 $end
$var wire 1 ,5 Bitline2 $end
$var wire 1 -5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 .5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 -5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 .5 q $end
$var reg 1 .5 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 /5 Bitline1 $end
$var wire 1 05 Bitline2 $end
$var wire 1 15 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 25 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 15 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 25 q $end
$var reg 1 25 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 35 Bitline1 $end
$var wire 1 45 Bitline2 $end
$var wire 1 55 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 65 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 55 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 65 q $end
$var reg 1 65 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 75 Bitline1 $end
$var wire 1 85 Bitline2 $end
$var wire 1 95 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 :5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 95 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 :5 q $end
$var reg 1 :5 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 ;5 Bitline1 $end
$var wire 1 <5 Bitline2 $end
$var wire 1 =5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 >5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 =5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 >5 q $end
$var reg 1 >5 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 ?5 Bitline1 $end
$var wire 1 @5 Bitline2 $end
$var wire 1 A5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 B5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 A5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 B5 q $end
$var reg 1 B5 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 C5 Bitline1 $end
$var wire 1 D5 Bitline2 $end
$var wire 1 E5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 F5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 E5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 F5 q $end
$var reg 1 F5 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 G5 Bitline1 $end
$var wire 1 H5 Bitline2 $end
$var wire 1 I5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 J5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 I5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 J5 q $end
$var reg 1 J5 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 K5 Bitline1 $end
$var wire 1 L5 Bitline2 $end
$var wire 1 M5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 N5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 M5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 N5 q $end
$var reg 1 N5 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 O5 Bitline1 $end
$var wire 1 P5 Bitline2 $end
$var wire 1 Q5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 R5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Q5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 R5 q $end
$var reg 1 R5 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 S5 Bitline1 $end
$var wire 1 T5 Bitline2 $end
$var wire 1 U5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 V5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 U5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 V5 q $end
$var reg 1 V5 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 W5 Bitline1 $end
$var wire 1 X5 Bitline2 $end
$var wire 1 Y5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 Z5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Y5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 Z5 q $end
$var reg 1 Z5 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 [5 Bitline1 $end
$var wire 1 \5 Bitline2 $end
$var wire 1 ]5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 ^5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ]5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 ^5 q $end
$var reg 1 ^5 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 _5 Bitline1 $end
$var wire 1 `5 Bitline2 $end
$var wire 1 a5 D $end
$var wire 1 !5 ReadEnable1 $end
$var wire 1 "5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 b5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 a5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 b5 q $end
$var reg 1 b5 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_oldPC $end
$var wire 16 c5 Bitline1 [15:0] $end
$var wire 16 d5 Bitline2 [15:0] $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteReg $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 16 g5 D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 h5 Bitline1 $end
$var wire 1 i5 Bitline2 $end
$var wire 1 j5 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 k5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 k5 q $end
$var reg 1 k5 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 l5 Bitline1 $end
$var wire 1 m5 Bitline2 $end
$var wire 1 n5 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 o5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 o5 q $end
$var reg 1 o5 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 p5 Bitline1 $end
$var wire 1 q5 Bitline2 $end
$var wire 1 r5 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 s5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 s5 q $end
$var reg 1 s5 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 t5 Bitline1 $end
$var wire 1 u5 Bitline2 $end
$var wire 1 v5 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 w5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 w5 q $end
$var reg 1 w5 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 x5 Bitline1 $end
$var wire 1 y5 Bitline2 $end
$var wire 1 z5 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 {5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 {5 q $end
$var reg 1 {5 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 |5 Bitline1 $end
$var wire 1 }5 Bitline2 $end
$var wire 1 ~5 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 !6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~5 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 !6 q $end
$var reg 1 !6 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 "6 Bitline1 $end
$var wire 1 #6 Bitline2 $end
$var wire 1 $6 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 %6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $6 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 %6 q $end
$var reg 1 %6 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 &6 Bitline1 $end
$var wire 1 '6 Bitline2 $end
$var wire 1 (6 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 )6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (6 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 )6 q $end
$var reg 1 )6 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 *6 Bitline1 $end
$var wire 1 +6 Bitline2 $end
$var wire 1 ,6 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 -6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,6 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 -6 q $end
$var reg 1 -6 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 .6 Bitline1 $end
$var wire 1 /6 Bitline2 $end
$var wire 1 06 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 16 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 06 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 16 q $end
$var reg 1 16 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 26 Bitline1 $end
$var wire 1 36 Bitline2 $end
$var wire 1 46 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 56 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 46 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 56 q $end
$var reg 1 56 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 66 Bitline1 $end
$var wire 1 76 Bitline2 $end
$var wire 1 86 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 96 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 86 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 96 q $end
$var reg 1 96 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 :6 Bitline1 $end
$var wire 1 ;6 Bitline2 $end
$var wire 1 <6 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 =6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <6 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 =6 q $end
$var reg 1 =6 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 >6 Bitline1 $end
$var wire 1 ?6 Bitline2 $end
$var wire 1 @6 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 A6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @6 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 A6 q $end
$var reg 1 A6 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 B6 Bitline1 $end
$var wire 1 C6 Bitline2 $end
$var wire 1 D6 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 E6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D6 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 E6 q $end
$var reg 1 E6 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 F6 Bitline1 $end
$var wire 1 G6 Bitline2 $end
$var wire 1 H6 D $end
$var wire 1 e5 ReadEnable1 $end
$var wire 1 f5 ReadEnable2 $end
$var wire 1 .4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 -4 rst $end
$var wire 1 I6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H6 d $end
$var wire 1 -4 rst $end
$var wire 1 .4 wen $end
$var wire 1 I6 q $end
$var reg 1 I6 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module flg_reg0 $end
$var wire 1 , clk $end
$var wire 1 J6 en $end
$var wire 3 K6 flags [2:0] $end
$var wire 3 L6 opcode [2:0] $end
$var wire 1 - rst_n $end
$var wire 3 M6 flagOuputs [2:0] $end
$var wire 1 N6 Z_flag $end
$var wire 1 O6 V_flag $end
$var wire 1 P6 N_flag $end
$scope module regn $end
$var wire 1 Q6 D $end
$var wire 1 , clk $end
$var wire 1 R6 rst $end
$var wire 1 S6 wen $end
$var wire 1 T6 interQ $end
$var wire 1 U6 Q $end
$scope module flop0 $end
$var wire 1 V6 clk $end
$var wire 1 Q6 d $end
$var wire 1 T6 q $end
$var wire 1 R6 rst $end
$var wire 1 S6 wen $end
$var reg 1 W6 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 X6 clk $end
$var wire 1 T6 d $end
$var wire 1 R6 rst $end
$var wire 1 S6 wen $end
$var wire 1 U6 q $end
$var reg 1 U6 state $end
$upscope $end
$upscope $end
$scope module regv $end
$var wire 1 Y6 D $end
$var wire 1 , clk $end
$var wire 1 Z6 rst $end
$var wire 1 [6 wen $end
$var wire 1 \6 interQ $end
$var wire 1 ]6 Q $end
$scope module flop0 $end
$var wire 1 ^6 clk $end
$var wire 1 Y6 d $end
$var wire 1 \6 q $end
$var wire 1 Z6 rst $end
$var wire 1 [6 wen $end
$var reg 1 _6 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 `6 clk $end
$var wire 1 \6 d $end
$var wire 1 Z6 rst $end
$var wire 1 [6 wen $end
$var wire 1 ]6 q $end
$var reg 1 ]6 state $end
$upscope $end
$upscope $end
$scope module regz $end
$var wire 1 a6 D $end
$var wire 1 , clk $end
$var wire 1 b6 rst $end
$var wire 1 J6 wen $end
$var wire 1 c6 interQ $end
$var wire 1 d6 Q $end
$scope module flop0 $end
$var wire 1 e6 clk $end
$var wire 1 a6 d $end
$var wire 1 c6 q $end
$var wire 1 b6 rst $end
$var wire 1 J6 wen $end
$var reg 1 f6 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 g6 clk $end
$var wire 1 c6 d $end
$var wire 1 b6 rst $end
$var wire 1 J6 wen $end
$var wire 1 d6 q $end
$var reg 1 d6 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module frwd_unit $end
$var wire 4 h6 D_X_reg_source1 [3:0] $end
$var wire 4 i6 D_X_reg_source2 [3:0] $end
$var wire 1 c EXtoEX_frwdA $end
$var wire 1 b EXtoEX_frwdB $end
$var wire 1 q MEMtoEX_frwdA $end
$var wire 1 p MEMtoEX_frwdB $end
$var wire 1 w MEMtoMEM_frwdB $end
$var wire 1 u M_W_RegWrite $end
$var wire 4 j6 M_W_reg_dest [3:0] $end
$var wire 1 j X_M_MemWrite $end
$var wire 1 h X_M_RegWrite $end
$var wire 4 k6 X_M_reg_dest [3:0] $end
$var wire 4 l6 X_M_reg_source2 [3:0] $end
$upscope $end
$scope module hazard_detect0 $end
$var wire 4 m6 D_X_destination_reg [3:0] $end
$var wire 4 n6 D_source_reg [3:0] $end
$var wire 4 o6 opcode [3:0] $end
$var wire 1 P stall $end
$upscope $end
$scope module inst_memory $end
$var wire 1 , clk $end
$var wire 16 p6 data_in [15:0] $end
$var wire 1 q6 enable $end
$var wire 1 r6 rst $end
$var wire 1 s6 wr $end
$var wire 16 t6 data_out [15:0] $end
$var wire 16 u6 addr [15:0] $end
$var parameter 32 v6 ADDR_WIDTH $end
$var reg 1 w6 loaded $end
$upscope $end
$scope module pc0 $end
$var wire 16 x6 blank1 [15:0] $end
$var wire 16 y6 blank2 [15:0] $end
$var wire 1 , clk $end
$var wire 1 z6 en $end
$var wire 16 {6 internalPC1 [15:0] $end
$var wire 16 |6 internalPC2 [15:0] $end
$var wire 16 }6 next [15:0] $end
$var wire 1 - rst_n $end
$var wire 16 ~6 PC [15:0] $end
$scope module reg0 $end
$var wire 16 !7 Bitline1 [15:0] $end
$var wire 16 "7 Bitline2 [15:0] $end
$var wire 16 #7 D [15:0] $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteReg $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$scope module bitArray[0] $end
$var wire 1 )7 Bitline1 $end
$var wire 1 *7 Bitline2 $end
$var wire 1 +7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 ,7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 +7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 ,7 q $end
$var reg 1 ,7 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 -7 Bitline1 $end
$var wire 1 .7 Bitline2 $end
$var wire 1 /7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 07 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 /7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 07 q $end
$var reg 1 07 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 17 Bitline1 $end
$var wire 1 27 Bitline2 $end
$var wire 1 37 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 47 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 37 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 47 q $end
$var reg 1 47 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 57 Bitline1 $end
$var wire 1 67 Bitline2 $end
$var wire 1 77 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 87 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 77 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 87 q $end
$var reg 1 87 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 97 Bitline1 $end
$var wire 1 :7 Bitline2 $end
$var wire 1 ;7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 <7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 ;7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 <7 q $end
$var reg 1 <7 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 =7 Bitline1 $end
$var wire 1 >7 Bitline2 $end
$var wire 1 ?7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 @7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 ?7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 @7 q $end
$var reg 1 @7 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 A7 Bitline1 $end
$var wire 1 B7 Bitline2 $end
$var wire 1 C7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 D7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 C7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 D7 q $end
$var reg 1 D7 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 E7 Bitline1 $end
$var wire 1 F7 Bitline2 $end
$var wire 1 G7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 H7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 G7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 H7 q $end
$var reg 1 H7 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 I7 Bitline1 $end
$var wire 1 J7 Bitline2 $end
$var wire 1 K7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 L7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 K7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 L7 q $end
$var reg 1 L7 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 M7 Bitline1 $end
$var wire 1 N7 Bitline2 $end
$var wire 1 O7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 P7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 O7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 P7 q $end
$var reg 1 P7 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 Q7 Bitline1 $end
$var wire 1 R7 Bitline2 $end
$var wire 1 S7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 T7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 S7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 T7 q $end
$var reg 1 T7 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 U7 Bitline1 $end
$var wire 1 V7 Bitline2 $end
$var wire 1 W7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 X7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 W7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 X7 q $end
$var reg 1 X7 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 Y7 Bitline1 $end
$var wire 1 Z7 Bitline2 $end
$var wire 1 [7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 \7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 [7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 \7 q $end
$var reg 1 \7 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 ]7 Bitline1 $end
$var wire 1 ^7 Bitline2 $end
$var wire 1 _7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 `7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 _7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 `7 q $end
$var reg 1 `7 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 a7 Bitline1 $end
$var wire 1 b7 Bitline2 $end
$var wire 1 c7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 d7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 c7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 d7 q $end
$var reg 1 d7 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 e7 Bitline1 $end
$var wire 1 f7 Bitline2 $end
$var wire 1 g7 D $end
$var wire 1 $7 ReadEnable1 $end
$var wire 1 %7 ReadEnable2 $end
$var wire 1 &7 WriteEnable $end
$var wire 1 '7 clk $end
$var wire 1 (7 rst $end
$var wire 1 h7 dffOut $end
$scope module floppy $end
$var wire 1 '7 clk $end
$var wire 1 g7 d $end
$var wire 1 (7 rst $end
$var wire 1 &7 wen $end
$var wire 1 h7 q $end
$var reg 1 h7 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg1 $end
$var wire 16 i7 Bitline1 [15:0] $end
$var wire 16 j7 Bitline2 [15:0] $end
$var wire 16 k7 D [15:0] $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteReg $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$scope module bitArray[0] $end
$var wire 1 p7 Bitline1 $end
$var wire 1 q7 Bitline2 $end
$var wire 1 r7 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 s7 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r7 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 s7 q $end
$var reg 1 s7 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 t7 Bitline1 $end
$var wire 1 u7 Bitline2 $end
$var wire 1 v7 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 w7 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v7 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 w7 q $end
$var reg 1 w7 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 x7 Bitline1 $end
$var wire 1 y7 Bitline2 $end
$var wire 1 z7 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 {7 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z7 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 {7 q $end
$var reg 1 {7 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 |7 Bitline1 $end
$var wire 1 }7 Bitline2 $end
$var wire 1 ~7 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 !8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~7 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 !8 q $end
$var reg 1 !8 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 "8 Bitline1 $end
$var wire 1 #8 Bitline2 $end
$var wire 1 $8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 %8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 %8 q $end
$var reg 1 %8 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 &8 Bitline1 $end
$var wire 1 '8 Bitline2 $end
$var wire 1 (8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 )8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 )8 q $end
$var reg 1 )8 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 *8 Bitline1 $end
$var wire 1 +8 Bitline2 $end
$var wire 1 ,8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 -8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 -8 q $end
$var reg 1 -8 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 .8 Bitline1 $end
$var wire 1 /8 Bitline2 $end
$var wire 1 08 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 18 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 08 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 18 q $end
$var reg 1 18 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 28 Bitline1 $end
$var wire 1 38 Bitline2 $end
$var wire 1 48 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 58 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 48 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 58 q $end
$var reg 1 58 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 68 Bitline1 $end
$var wire 1 78 Bitline2 $end
$var wire 1 88 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 98 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 88 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 98 q $end
$var reg 1 98 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 :8 Bitline1 $end
$var wire 1 ;8 Bitline2 $end
$var wire 1 <8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 =8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 =8 q $end
$var reg 1 =8 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 >8 Bitline1 $end
$var wire 1 ?8 Bitline2 $end
$var wire 1 @8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 A8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 A8 q $end
$var reg 1 A8 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 B8 Bitline1 $end
$var wire 1 C8 Bitline2 $end
$var wire 1 D8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 E8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 E8 q $end
$var reg 1 E8 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 F8 Bitline1 $end
$var wire 1 G8 Bitline2 $end
$var wire 1 H8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 I8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 I8 q $end
$var reg 1 I8 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 J8 Bitline1 $end
$var wire 1 K8 Bitline2 $end
$var wire 1 L8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 M8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 M8 q $end
$var reg 1 M8 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 N8 Bitline1 $end
$var wire 1 O8 Bitline2 $end
$var wire 1 P8 D $end
$var wire 1 l7 ReadEnable1 $end
$var wire 1 m7 ReadEnable2 $end
$var wire 1 n7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 o7 rst $end
$var wire 1 Q8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P8 d $end
$var wire 1 o7 rst $end
$var wire 1 n7 wen $end
$var wire 1 Q8 q $end
$var reg 1 Q8 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module rf_0 $end
$var wire 16 R8 DstData [15:0] $end
$var wire 4 S8 DstReg [3:0] $end
$var wire 4 T8 SrcReg1 [3:0] $end
$var wire 4 U8 SrcReg2 [3:0] $end
$var wire 1 u WriteReg $end
$var wire 1 , clk $end
$var wire 16 V8 imm1 [15:0] $end
$var wire 16 W8 imm2 [15:0] $end
$var wire 1 X8 rst $end
$var wire 16 Y8 WriteLine [15:0] $end
$var wire 16 Z8 SrcData2 [15:0] $end
$var wire 16 [8 SrcData1 [15:0] $end
$var wire 16 \8 ReadLine2 [15:0] $end
$var wire 16 ]8 ReadLine1 [15:0] $end
$scope module readDecoder1 $end
$var wire 4 ^8 RegId [3:0] $end
$var wire 16 _8 Wordline [15:0] $end
$upscope $end
$scope module readDecoder2 $end
$var wire 4 `8 RegId [3:0] $end
$var wire 16 a8 Wordline [15:0] $end
$upscope $end
$scope module regArray[0] $end
$var wire 16 b8 Bitline1 [15:0] $end
$var wire 16 c8 Bitline2 [15:0] $end
$var wire 16 d8 D [15:0] $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 h8 Bitline1 $end
$var wire 1 i8 Bitline2 $end
$var wire 1 j8 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 k8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j8 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 k8 q $end
$var reg 1 k8 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 l8 Bitline1 $end
$var wire 1 m8 Bitline2 $end
$var wire 1 n8 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 o8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n8 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 o8 q $end
$var reg 1 o8 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 p8 Bitline1 $end
$var wire 1 q8 Bitline2 $end
$var wire 1 r8 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 s8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r8 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 s8 q $end
$var reg 1 s8 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 t8 Bitline1 $end
$var wire 1 u8 Bitline2 $end
$var wire 1 v8 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 w8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v8 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 w8 q $end
$var reg 1 w8 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 x8 Bitline1 $end
$var wire 1 y8 Bitline2 $end
$var wire 1 z8 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 {8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z8 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 {8 q $end
$var reg 1 {8 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 |8 Bitline1 $end
$var wire 1 }8 Bitline2 $end
$var wire 1 ~8 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 !9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~8 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 !9 q $end
$var reg 1 !9 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 "9 Bitline1 $end
$var wire 1 #9 Bitline2 $end
$var wire 1 $9 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 %9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $9 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 %9 q $end
$var reg 1 %9 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 &9 Bitline1 $end
$var wire 1 '9 Bitline2 $end
$var wire 1 (9 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 )9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (9 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 )9 q $end
$var reg 1 )9 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 *9 Bitline1 $end
$var wire 1 +9 Bitline2 $end
$var wire 1 ,9 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 -9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,9 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 -9 q $end
$var reg 1 -9 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 .9 Bitline1 $end
$var wire 1 /9 Bitline2 $end
$var wire 1 09 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 19 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 09 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 19 q $end
$var reg 1 19 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 29 Bitline1 $end
$var wire 1 39 Bitline2 $end
$var wire 1 49 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 59 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 49 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 59 q $end
$var reg 1 59 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 69 Bitline1 $end
$var wire 1 79 Bitline2 $end
$var wire 1 89 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 99 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 89 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 99 q $end
$var reg 1 99 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 :9 Bitline1 $end
$var wire 1 ;9 Bitline2 $end
$var wire 1 <9 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 =9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <9 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 =9 q $end
$var reg 1 =9 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 >9 Bitline1 $end
$var wire 1 ?9 Bitline2 $end
$var wire 1 @9 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 A9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @9 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 A9 q $end
$var reg 1 A9 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 B9 Bitline1 $end
$var wire 1 C9 Bitline2 $end
$var wire 1 D9 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 E9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D9 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 E9 q $end
$var reg 1 E9 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 F9 Bitline1 $end
$var wire 1 G9 Bitline2 $end
$var wire 1 H9 D $end
$var wire 1 e8 ReadEnable1 $end
$var wire 1 f8 ReadEnable2 $end
$var wire 1 g8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 I9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H9 d $end
$var wire 1 X8 rst $end
$var wire 1 g8 wen $end
$var wire 1 I9 q $end
$var reg 1 I9 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[1] $end
$var wire 16 J9 Bitline1 [15:0] $end
$var wire 16 K9 Bitline2 [15:0] $end
$var wire 16 L9 D [15:0] $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 P9 Bitline1 $end
$var wire 1 Q9 Bitline2 $end
$var wire 1 R9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 S9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 S9 q $end
$var reg 1 S9 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 T9 Bitline1 $end
$var wire 1 U9 Bitline2 $end
$var wire 1 V9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 W9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 W9 q $end
$var reg 1 W9 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 X9 Bitline1 $end
$var wire 1 Y9 Bitline2 $end
$var wire 1 Z9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 [9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 [9 q $end
$var reg 1 [9 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 \9 Bitline1 $end
$var wire 1 ]9 Bitline2 $end
$var wire 1 ^9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 _9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 _9 q $end
$var reg 1 _9 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 `9 Bitline1 $end
$var wire 1 a9 Bitline2 $end
$var wire 1 b9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 c9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 c9 q $end
$var reg 1 c9 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 d9 Bitline1 $end
$var wire 1 e9 Bitline2 $end
$var wire 1 f9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 g9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 g9 q $end
$var reg 1 g9 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 h9 Bitline1 $end
$var wire 1 i9 Bitline2 $end
$var wire 1 j9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 k9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 k9 q $end
$var reg 1 k9 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 l9 Bitline1 $end
$var wire 1 m9 Bitline2 $end
$var wire 1 n9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 o9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 o9 q $end
$var reg 1 o9 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 p9 Bitline1 $end
$var wire 1 q9 Bitline2 $end
$var wire 1 r9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 s9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 s9 q $end
$var reg 1 s9 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 t9 Bitline1 $end
$var wire 1 u9 Bitline2 $end
$var wire 1 v9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 w9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 w9 q $end
$var reg 1 w9 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 x9 Bitline1 $end
$var wire 1 y9 Bitline2 $end
$var wire 1 z9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 {9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 {9 q $end
$var reg 1 {9 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 |9 Bitline1 $end
$var wire 1 }9 Bitline2 $end
$var wire 1 ~9 D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 !: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~9 d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 !: q $end
$var reg 1 !: state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 ": Bitline1 $end
$var wire 1 #: Bitline2 $end
$var wire 1 $: D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 %: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $: d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 %: q $end
$var reg 1 %: state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 &: Bitline1 $end
$var wire 1 ': Bitline2 $end
$var wire 1 (: D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ): dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (: d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 ): q $end
$var reg 1 ): state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 *: Bitline1 $end
$var wire 1 +: Bitline2 $end
$var wire 1 ,: D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 -: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,: d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 -: q $end
$var reg 1 -: state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 .: Bitline1 $end
$var wire 1 /: Bitline2 $end
$var wire 1 0: D $end
$var wire 1 M9 ReadEnable1 $end
$var wire 1 N9 ReadEnable2 $end
$var wire 1 O9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 1: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0: d $end
$var wire 1 X8 rst $end
$var wire 1 O9 wen $end
$var wire 1 1: q $end
$var reg 1 1: state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[2] $end
$var wire 16 2: Bitline1 [15:0] $end
$var wire 16 3: Bitline2 [15:0] $end
$var wire 16 4: D [15:0] $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 8: Bitline1 $end
$var wire 1 9: Bitline2 $end
$var wire 1 :: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ;: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 ;: q $end
$var reg 1 ;: state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 <: Bitline1 $end
$var wire 1 =: Bitline2 $end
$var wire 1 >: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ?: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 ?: q $end
$var reg 1 ?: state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 @: Bitline1 $end
$var wire 1 A: Bitline2 $end
$var wire 1 B: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 C: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 C: q $end
$var reg 1 C: state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 D: Bitline1 $end
$var wire 1 E: Bitline2 $end
$var wire 1 F: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 G: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 G: q $end
$var reg 1 G: state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 H: Bitline1 $end
$var wire 1 I: Bitline2 $end
$var wire 1 J: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 K: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 K: q $end
$var reg 1 K: state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 L: Bitline1 $end
$var wire 1 M: Bitline2 $end
$var wire 1 N: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 O: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 O: q $end
$var reg 1 O: state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 P: Bitline1 $end
$var wire 1 Q: Bitline2 $end
$var wire 1 R: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 S: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 S: q $end
$var reg 1 S: state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 T: Bitline1 $end
$var wire 1 U: Bitline2 $end
$var wire 1 V: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 W: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 W: q $end
$var reg 1 W: state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 X: Bitline1 $end
$var wire 1 Y: Bitline2 $end
$var wire 1 Z: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 [: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 [: q $end
$var reg 1 [: state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 \: Bitline1 $end
$var wire 1 ]: Bitline2 $end
$var wire 1 ^: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 _: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 _: q $end
$var reg 1 _: state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 `: Bitline1 $end
$var wire 1 a: Bitline2 $end
$var wire 1 b: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 c: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 c: q $end
$var reg 1 c: state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 d: Bitline1 $end
$var wire 1 e: Bitline2 $end
$var wire 1 f: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 g: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 g: q $end
$var reg 1 g: state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 h: Bitline1 $end
$var wire 1 i: Bitline2 $end
$var wire 1 j: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 k: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 k: q $end
$var reg 1 k: state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 l: Bitline1 $end
$var wire 1 m: Bitline2 $end
$var wire 1 n: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 o: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 o: q $end
$var reg 1 o: state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 p: Bitline1 $end
$var wire 1 q: Bitline2 $end
$var wire 1 r: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 s: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 s: q $end
$var reg 1 s: state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 t: Bitline1 $end
$var wire 1 u: Bitline2 $end
$var wire 1 v: D $end
$var wire 1 5: ReadEnable1 $end
$var wire 1 6: ReadEnable2 $end
$var wire 1 7: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 w: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v: d $end
$var wire 1 X8 rst $end
$var wire 1 7: wen $end
$var wire 1 w: q $end
$var reg 1 w: state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[3] $end
$var wire 16 x: Bitline1 [15:0] $end
$var wire 16 y: Bitline2 [15:0] $end
$var wire 16 z: D [15:0] $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 ~: Bitline1 $end
$var wire 1 !; Bitline2 $end
$var wire 1 "; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 #; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 #; q $end
$var reg 1 #; state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 $; Bitline1 $end
$var wire 1 %; Bitline2 $end
$var wire 1 &; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 '; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 '; q $end
$var reg 1 '; state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 (; Bitline1 $end
$var wire 1 ); Bitline2 $end
$var wire 1 *; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 +; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 +; q $end
$var reg 1 +; state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 ,; Bitline1 $end
$var wire 1 -; Bitline2 $end
$var wire 1 .; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 /; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 /; q $end
$var reg 1 /; state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 0; Bitline1 $end
$var wire 1 1; Bitline2 $end
$var wire 1 2; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 3; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 3; q $end
$var reg 1 3; state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 4; Bitline1 $end
$var wire 1 5; Bitline2 $end
$var wire 1 6; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 7; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 7; q $end
$var reg 1 7; state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 8; Bitline1 $end
$var wire 1 9; Bitline2 $end
$var wire 1 :; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ;; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 ;; q $end
$var reg 1 ;; state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 <; Bitline1 $end
$var wire 1 =; Bitline2 $end
$var wire 1 >; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ?; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 ?; q $end
$var reg 1 ?; state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 @; Bitline1 $end
$var wire 1 A; Bitline2 $end
$var wire 1 B; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 C; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 C; q $end
$var reg 1 C; state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 D; Bitline1 $end
$var wire 1 E; Bitline2 $end
$var wire 1 F; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 G; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 G; q $end
$var reg 1 G; state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 H; Bitline1 $end
$var wire 1 I; Bitline2 $end
$var wire 1 J; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 K; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 K; q $end
$var reg 1 K; state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 L; Bitline1 $end
$var wire 1 M; Bitline2 $end
$var wire 1 N; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 O; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 O; q $end
$var reg 1 O; state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 P; Bitline1 $end
$var wire 1 Q; Bitline2 $end
$var wire 1 R; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 S; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 S; q $end
$var reg 1 S; state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 T; Bitline1 $end
$var wire 1 U; Bitline2 $end
$var wire 1 V; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 W; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 W; q $end
$var reg 1 W; state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 X; Bitline1 $end
$var wire 1 Y; Bitline2 $end
$var wire 1 Z; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 [; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 [; q $end
$var reg 1 [; state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 \; Bitline1 $end
$var wire 1 ]; Bitline2 $end
$var wire 1 ^; D $end
$var wire 1 {: ReadEnable1 $end
$var wire 1 |: ReadEnable2 $end
$var wire 1 }: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 _; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^; d $end
$var wire 1 X8 rst $end
$var wire 1 }: wen $end
$var wire 1 _; q $end
$var reg 1 _; state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[4] $end
$var wire 16 `; Bitline1 [15:0] $end
$var wire 16 a; Bitline2 [15:0] $end
$var wire 16 b; D [15:0] $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 f; Bitline1 $end
$var wire 1 g; Bitline2 $end
$var wire 1 h; D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 i; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h; d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 i; q $end
$var reg 1 i; state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 j; Bitline1 $end
$var wire 1 k; Bitline2 $end
$var wire 1 l; D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 m; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l; d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 m; q $end
$var reg 1 m; state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 n; Bitline1 $end
$var wire 1 o; Bitline2 $end
$var wire 1 p; D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 q; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p; d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 q; q $end
$var reg 1 q; state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 r; Bitline1 $end
$var wire 1 s; Bitline2 $end
$var wire 1 t; D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 u; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t; d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 u; q $end
$var reg 1 u; state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 v; Bitline1 $end
$var wire 1 w; Bitline2 $end
$var wire 1 x; D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 y; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x; d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 y; q $end
$var reg 1 y; state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 z; Bitline1 $end
$var wire 1 {; Bitline2 $end
$var wire 1 |; D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 }; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |; d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 }; q $end
$var reg 1 }; state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 ~; Bitline1 $end
$var wire 1 !< Bitline2 $end
$var wire 1 "< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 #< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 #< q $end
$var reg 1 #< state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 $< Bitline1 $end
$var wire 1 %< Bitline2 $end
$var wire 1 &< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 '< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 '< q $end
$var reg 1 '< state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 (< Bitline1 $end
$var wire 1 )< Bitline2 $end
$var wire 1 *< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 +< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 +< q $end
$var reg 1 +< state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 ,< Bitline1 $end
$var wire 1 -< Bitline2 $end
$var wire 1 .< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 /< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 /< q $end
$var reg 1 /< state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 0< Bitline1 $end
$var wire 1 1< Bitline2 $end
$var wire 1 2< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 3< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 3< q $end
$var reg 1 3< state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 4< Bitline1 $end
$var wire 1 5< Bitline2 $end
$var wire 1 6< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 7< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 7< q $end
$var reg 1 7< state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 8< Bitline1 $end
$var wire 1 9< Bitline2 $end
$var wire 1 :< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ;< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 ;< q $end
$var reg 1 ;< state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 << Bitline1 $end
$var wire 1 =< Bitline2 $end
$var wire 1 >< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ?< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 ?< q $end
$var reg 1 ?< state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 @< Bitline1 $end
$var wire 1 A< Bitline2 $end
$var wire 1 B< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 C< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 C< q $end
$var reg 1 C< state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 D< Bitline1 $end
$var wire 1 E< Bitline2 $end
$var wire 1 F< D $end
$var wire 1 c; ReadEnable1 $end
$var wire 1 d; ReadEnable2 $end
$var wire 1 e; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 G< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F< d $end
$var wire 1 X8 rst $end
$var wire 1 e; wen $end
$var wire 1 G< q $end
$var reg 1 G< state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[5] $end
$var wire 16 H< Bitline1 [15:0] $end
$var wire 16 I< Bitline2 [15:0] $end
$var wire 16 J< D [15:0] $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 N< Bitline1 $end
$var wire 1 O< Bitline2 $end
$var wire 1 P< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 Q< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 Q< q $end
$var reg 1 Q< state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 R< Bitline1 $end
$var wire 1 S< Bitline2 $end
$var wire 1 T< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 U< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 U< q $end
$var reg 1 U< state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 V< Bitline1 $end
$var wire 1 W< Bitline2 $end
$var wire 1 X< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 Y< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 Y< q $end
$var reg 1 Y< state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 Z< Bitline1 $end
$var wire 1 [< Bitline2 $end
$var wire 1 \< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ]< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 ]< q $end
$var reg 1 ]< state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 ^< Bitline1 $end
$var wire 1 _< Bitline2 $end
$var wire 1 `< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 a< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 a< q $end
$var reg 1 a< state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 b< Bitline1 $end
$var wire 1 c< Bitline2 $end
$var wire 1 d< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 e< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 e< q $end
$var reg 1 e< state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 f< Bitline1 $end
$var wire 1 g< Bitline2 $end
$var wire 1 h< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 i< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 i< q $end
$var reg 1 i< state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 j< Bitline1 $end
$var wire 1 k< Bitline2 $end
$var wire 1 l< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 m< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 m< q $end
$var reg 1 m< state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 n< Bitline1 $end
$var wire 1 o< Bitline2 $end
$var wire 1 p< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 q< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 q< q $end
$var reg 1 q< state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 r< Bitline1 $end
$var wire 1 s< Bitline2 $end
$var wire 1 t< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 u< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 u< q $end
$var reg 1 u< state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 v< Bitline1 $end
$var wire 1 w< Bitline2 $end
$var wire 1 x< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 y< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 y< q $end
$var reg 1 y< state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 z< Bitline1 $end
$var wire 1 {< Bitline2 $end
$var wire 1 |< D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 }< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |< d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 }< q $end
$var reg 1 }< state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 ~< Bitline1 $end
$var wire 1 != Bitline2 $end
$var wire 1 "= D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 #= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "= d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 #= q $end
$var reg 1 #= state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 $= Bitline1 $end
$var wire 1 %= Bitline2 $end
$var wire 1 &= D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 '= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &= d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 '= q $end
$var reg 1 '= state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 (= Bitline1 $end
$var wire 1 )= Bitline2 $end
$var wire 1 *= D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 += dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *= d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 += q $end
$var reg 1 += state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 ,= Bitline1 $end
$var wire 1 -= Bitline2 $end
$var wire 1 .= D $end
$var wire 1 K< ReadEnable1 $end
$var wire 1 L< ReadEnable2 $end
$var wire 1 M< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 /= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .= d $end
$var wire 1 X8 rst $end
$var wire 1 M< wen $end
$var wire 1 /= q $end
$var reg 1 /= state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[6] $end
$var wire 16 0= Bitline1 [15:0] $end
$var wire 16 1= Bitline2 [15:0] $end
$var wire 16 2= D [15:0] $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 6= Bitline1 $end
$var wire 1 7= Bitline2 $end
$var wire 1 8= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 9= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 9= q $end
$var reg 1 9= state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 := Bitline1 $end
$var wire 1 ;= Bitline2 $end
$var wire 1 <= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 == dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 == q $end
$var reg 1 == state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 >= Bitline1 $end
$var wire 1 ?= Bitline2 $end
$var wire 1 @= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 A= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 A= q $end
$var reg 1 A= state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 B= Bitline1 $end
$var wire 1 C= Bitline2 $end
$var wire 1 D= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 E= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 E= q $end
$var reg 1 E= state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 F= Bitline1 $end
$var wire 1 G= Bitline2 $end
$var wire 1 H= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 I= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 I= q $end
$var reg 1 I= state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 J= Bitline1 $end
$var wire 1 K= Bitline2 $end
$var wire 1 L= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 M= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 M= q $end
$var reg 1 M= state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 N= Bitline1 $end
$var wire 1 O= Bitline2 $end
$var wire 1 P= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 Q= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 Q= q $end
$var reg 1 Q= state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 R= Bitline1 $end
$var wire 1 S= Bitline2 $end
$var wire 1 T= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 U= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 U= q $end
$var reg 1 U= state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 V= Bitline1 $end
$var wire 1 W= Bitline2 $end
$var wire 1 X= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 Y= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 Y= q $end
$var reg 1 Y= state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 Z= Bitline1 $end
$var wire 1 [= Bitline2 $end
$var wire 1 \= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ]= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 ]= q $end
$var reg 1 ]= state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ^= Bitline1 $end
$var wire 1 _= Bitline2 $end
$var wire 1 `= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 a= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 a= q $end
$var reg 1 a= state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 b= Bitline1 $end
$var wire 1 c= Bitline2 $end
$var wire 1 d= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 e= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 e= q $end
$var reg 1 e= state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 f= Bitline1 $end
$var wire 1 g= Bitline2 $end
$var wire 1 h= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 i= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 i= q $end
$var reg 1 i= state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 j= Bitline1 $end
$var wire 1 k= Bitline2 $end
$var wire 1 l= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 m= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 m= q $end
$var reg 1 m= state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 n= Bitline1 $end
$var wire 1 o= Bitline2 $end
$var wire 1 p= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 q= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 q= q $end
$var reg 1 q= state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 r= Bitline1 $end
$var wire 1 s= Bitline2 $end
$var wire 1 t= D $end
$var wire 1 3= ReadEnable1 $end
$var wire 1 4= ReadEnable2 $end
$var wire 1 5= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 u= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t= d $end
$var wire 1 X8 rst $end
$var wire 1 5= wen $end
$var wire 1 u= q $end
$var reg 1 u= state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[7] $end
$var wire 16 v= Bitline1 [15:0] $end
$var wire 16 w= Bitline2 [15:0] $end
$var wire 16 x= D [15:0] $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 |= Bitline1 $end
$var wire 1 }= Bitline2 $end
$var wire 1 ~= D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 !> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~= d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 !> q $end
$var reg 1 !> state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 "> Bitline1 $end
$var wire 1 #> Bitline2 $end
$var wire 1 $> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 %> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 %> q $end
$var reg 1 %> state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 &> Bitline1 $end
$var wire 1 '> Bitline2 $end
$var wire 1 (> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 )> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 )> q $end
$var reg 1 )> state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 *> Bitline1 $end
$var wire 1 +> Bitline2 $end
$var wire 1 ,> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 -> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 -> q $end
$var reg 1 -> state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 .> Bitline1 $end
$var wire 1 /> Bitline2 $end
$var wire 1 0> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 1> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 1> q $end
$var reg 1 1> state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 2> Bitline1 $end
$var wire 1 3> Bitline2 $end
$var wire 1 4> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 5> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 5> q $end
$var reg 1 5> state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 6> Bitline1 $end
$var wire 1 7> Bitline2 $end
$var wire 1 8> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 9> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 9> q $end
$var reg 1 9> state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 :> Bitline1 $end
$var wire 1 ;> Bitline2 $end
$var wire 1 <> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 => dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 => q $end
$var reg 1 => state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 >> Bitline1 $end
$var wire 1 ?> Bitline2 $end
$var wire 1 @> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 A> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 A> q $end
$var reg 1 A> state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 B> Bitline1 $end
$var wire 1 C> Bitline2 $end
$var wire 1 D> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 E> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 E> q $end
$var reg 1 E> state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 F> Bitline1 $end
$var wire 1 G> Bitline2 $end
$var wire 1 H> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 I> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 I> q $end
$var reg 1 I> state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 J> Bitline1 $end
$var wire 1 K> Bitline2 $end
$var wire 1 L> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 M> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 M> q $end
$var reg 1 M> state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 N> Bitline1 $end
$var wire 1 O> Bitline2 $end
$var wire 1 P> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 Q> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 Q> q $end
$var reg 1 Q> state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 R> Bitline1 $end
$var wire 1 S> Bitline2 $end
$var wire 1 T> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 U> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 U> q $end
$var reg 1 U> state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 V> Bitline1 $end
$var wire 1 W> Bitline2 $end
$var wire 1 X> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 Y> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 Y> q $end
$var reg 1 Y> state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 Z> Bitline1 $end
$var wire 1 [> Bitline2 $end
$var wire 1 \> D $end
$var wire 1 y= ReadEnable1 $end
$var wire 1 z= ReadEnable2 $end
$var wire 1 {= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ]> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \> d $end
$var wire 1 X8 rst $end
$var wire 1 {= wen $end
$var wire 1 ]> q $end
$var reg 1 ]> state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[8] $end
$var wire 16 ^> Bitline1 [15:0] $end
$var wire 16 _> Bitline2 [15:0] $end
$var wire 16 `> D [15:0] $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 d> Bitline1 $end
$var wire 1 e> Bitline2 $end
$var wire 1 f> D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 g> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f> d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 g> q $end
$var reg 1 g> state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 h> Bitline1 $end
$var wire 1 i> Bitline2 $end
$var wire 1 j> D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 k> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j> d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 k> q $end
$var reg 1 k> state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 l> Bitline1 $end
$var wire 1 m> Bitline2 $end
$var wire 1 n> D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 o> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n> d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 o> q $end
$var reg 1 o> state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 p> Bitline1 $end
$var wire 1 q> Bitline2 $end
$var wire 1 r> D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 s> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r> d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 s> q $end
$var reg 1 s> state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 t> Bitline1 $end
$var wire 1 u> Bitline2 $end
$var wire 1 v> D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 w> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v> d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 w> q $end
$var reg 1 w> state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 x> Bitline1 $end
$var wire 1 y> Bitline2 $end
$var wire 1 z> D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 {> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z> d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 {> q $end
$var reg 1 {> state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 |> Bitline1 $end
$var wire 1 }> Bitline2 $end
$var wire 1 ~> D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 !? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~> d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 !? q $end
$var reg 1 !? state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 "? Bitline1 $end
$var wire 1 #? Bitline2 $end
$var wire 1 $? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 %? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 %? q $end
$var reg 1 %? state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 &? Bitline1 $end
$var wire 1 '? Bitline2 $end
$var wire 1 (? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 )? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 )? q $end
$var reg 1 )? state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 *? Bitline1 $end
$var wire 1 +? Bitline2 $end
$var wire 1 ,? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 -? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 -? q $end
$var reg 1 -? state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 .? Bitline1 $end
$var wire 1 /? Bitline2 $end
$var wire 1 0? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 1? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 1? q $end
$var reg 1 1? state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 2? Bitline1 $end
$var wire 1 3? Bitline2 $end
$var wire 1 4? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 5? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 5? q $end
$var reg 1 5? state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 6? Bitline1 $end
$var wire 1 7? Bitline2 $end
$var wire 1 8? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 9? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 9? q $end
$var reg 1 9? state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 :? Bitline1 $end
$var wire 1 ;? Bitline2 $end
$var wire 1 <? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 =? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 =? q $end
$var reg 1 =? state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 >? Bitline1 $end
$var wire 1 ?? Bitline2 $end
$var wire 1 @? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 A? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 A? q $end
$var reg 1 A? state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 B? Bitline1 $end
$var wire 1 C? Bitline2 $end
$var wire 1 D? D $end
$var wire 1 a> ReadEnable1 $end
$var wire 1 b> ReadEnable2 $end
$var wire 1 c> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 E? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D? d $end
$var wire 1 X8 rst $end
$var wire 1 c> wen $end
$var wire 1 E? q $end
$var reg 1 E? state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[9] $end
$var wire 16 F? Bitline1 [15:0] $end
$var wire 16 G? Bitline2 [15:0] $end
$var wire 16 H? D [15:0] $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 L? Bitline1 $end
$var wire 1 M? Bitline2 $end
$var wire 1 N? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 O? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 O? q $end
$var reg 1 O? state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 P? Bitline1 $end
$var wire 1 Q? Bitline2 $end
$var wire 1 R? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 S? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 S? q $end
$var reg 1 S? state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 T? Bitline1 $end
$var wire 1 U? Bitline2 $end
$var wire 1 V? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 W? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 W? q $end
$var reg 1 W? state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 X? Bitline1 $end
$var wire 1 Y? Bitline2 $end
$var wire 1 Z? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 [? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 [? q $end
$var reg 1 [? state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 \? Bitline1 $end
$var wire 1 ]? Bitline2 $end
$var wire 1 ^? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 _? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 _? q $end
$var reg 1 _? state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 `? Bitline1 $end
$var wire 1 a? Bitline2 $end
$var wire 1 b? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 c? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 c? q $end
$var reg 1 c? state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 d? Bitline1 $end
$var wire 1 e? Bitline2 $end
$var wire 1 f? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 g? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 g? q $end
$var reg 1 g? state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 h? Bitline1 $end
$var wire 1 i? Bitline2 $end
$var wire 1 j? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 k? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 k? q $end
$var reg 1 k? state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 l? Bitline1 $end
$var wire 1 m? Bitline2 $end
$var wire 1 n? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 o? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 o? q $end
$var reg 1 o? state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 p? Bitline1 $end
$var wire 1 q? Bitline2 $end
$var wire 1 r? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 s? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 s? q $end
$var reg 1 s? state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 t? Bitline1 $end
$var wire 1 u? Bitline2 $end
$var wire 1 v? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 w? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 w? q $end
$var reg 1 w? state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 x? Bitline1 $end
$var wire 1 y? Bitline2 $end
$var wire 1 z? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 {? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 {? q $end
$var reg 1 {? state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 |? Bitline1 $end
$var wire 1 }? Bitline2 $end
$var wire 1 ~? D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 !@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~? d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 !@ q $end
$var reg 1 !@ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 "@ Bitline1 $end
$var wire 1 #@ Bitline2 $end
$var wire 1 $@ D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 %@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $@ d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 %@ q $end
$var reg 1 %@ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 &@ Bitline1 $end
$var wire 1 '@ Bitline2 $end
$var wire 1 (@ D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 )@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (@ d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 )@ q $end
$var reg 1 )@ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 *@ Bitline1 $end
$var wire 1 +@ Bitline2 $end
$var wire 1 ,@ D $end
$var wire 1 I? ReadEnable1 $end
$var wire 1 J? ReadEnable2 $end
$var wire 1 K? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 -@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,@ d $end
$var wire 1 X8 rst $end
$var wire 1 K? wen $end
$var wire 1 -@ q $end
$var reg 1 -@ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[10] $end
$var wire 16 .@ Bitline1 [15:0] $end
$var wire 16 /@ Bitline2 [15:0] $end
$var wire 16 0@ D [15:0] $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 4@ Bitline1 $end
$var wire 1 5@ Bitline2 $end
$var wire 1 6@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 7@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 7@ q $end
$var reg 1 7@ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 8@ Bitline1 $end
$var wire 1 9@ Bitline2 $end
$var wire 1 :@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ;@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 ;@ q $end
$var reg 1 ;@ state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 <@ Bitline1 $end
$var wire 1 =@ Bitline2 $end
$var wire 1 >@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ?@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 ?@ q $end
$var reg 1 ?@ state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 @@ Bitline1 $end
$var wire 1 A@ Bitline2 $end
$var wire 1 B@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 C@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 C@ q $end
$var reg 1 C@ state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 D@ Bitline1 $end
$var wire 1 E@ Bitline2 $end
$var wire 1 F@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 G@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 G@ q $end
$var reg 1 G@ state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 H@ Bitline1 $end
$var wire 1 I@ Bitline2 $end
$var wire 1 J@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 K@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 K@ q $end
$var reg 1 K@ state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 L@ Bitline1 $end
$var wire 1 M@ Bitline2 $end
$var wire 1 N@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 O@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 O@ q $end
$var reg 1 O@ state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 P@ Bitline1 $end
$var wire 1 Q@ Bitline2 $end
$var wire 1 R@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 S@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 S@ q $end
$var reg 1 S@ state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 T@ Bitline1 $end
$var wire 1 U@ Bitline2 $end
$var wire 1 V@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 W@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 W@ q $end
$var reg 1 W@ state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 X@ Bitline1 $end
$var wire 1 Y@ Bitline2 $end
$var wire 1 Z@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 [@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 [@ q $end
$var reg 1 [@ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 \@ Bitline1 $end
$var wire 1 ]@ Bitline2 $end
$var wire 1 ^@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 _@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 _@ q $end
$var reg 1 _@ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 `@ Bitline1 $end
$var wire 1 a@ Bitline2 $end
$var wire 1 b@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 c@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 c@ q $end
$var reg 1 c@ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 d@ Bitline1 $end
$var wire 1 e@ Bitline2 $end
$var wire 1 f@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 g@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 g@ q $end
$var reg 1 g@ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 h@ Bitline1 $end
$var wire 1 i@ Bitline2 $end
$var wire 1 j@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 k@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 k@ q $end
$var reg 1 k@ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 l@ Bitline1 $end
$var wire 1 m@ Bitline2 $end
$var wire 1 n@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 o@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 o@ q $end
$var reg 1 o@ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 p@ Bitline1 $end
$var wire 1 q@ Bitline2 $end
$var wire 1 r@ D $end
$var wire 1 1@ ReadEnable1 $end
$var wire 1 2@ ReadEnable2 $end
$var wire 1 3@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 s@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r@ d $end
$var wire 1 X8 rst $end
$var wire 1 3@ wen $end
$var wire 1 s@ q $end
$var reg 1 s@ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[11] $end
$var wire 16 t@ Bitline1 [15:0] $end
$var wire 16 u@ Bitline2 [15:0] $end
$var wire 16 v@ D [15:0] $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 z@ Bitline1 $end
$var wire 1 {@ Bitline2 $end
$var wire 1 |@ D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 }@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |@ d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 }@ q $end
$var reg 1 }@ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 ~@ Bitline1 $end
$var wire 1 !A Bitline2 $end
$var wire 1 "A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 #A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 #A q $end
$var reg 1 #A state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 $A Bitline1 $end
$var wire 1 %A Bitline2 $end
$var wire 1 &A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 'A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 'A q $end
$var reg 1 'A state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 (A Bitline1 $end
$var wire 1 )A Bitline2 $end
$var wire 1 *A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 +A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 +A q $end
$var reg 1 +A state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 ,A Bitline1 $end
$var wire 1 -A Bitline2 $end
$var wire 1 .A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 /A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 /A q $end
$var reg 1 /A state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 0A Bitline1 $end
$var wire 1 1A Bitline2 $end
$var wire 1 2A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 3A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 3A q $end
$var reg 1 3A state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 4A Bitline1 $end
$var wire 1 5A Bitline2 $end
$var wire 1 6A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 7A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 7A q $end
$var reg 1 7A state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 8A Bitline1 $end
$var wire 1 9A Bitline2 $end
$var wire 1 :A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ;A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 ;A q $end
$var reg 1 ;A state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 <A Bitline1 $end
$var wire 1 =A Bitline2 $end
$var wire 1 >A D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ?A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >A d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 ?A q $end
$var reg 1 ?A state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 @A Bitline1 $end
$var wire 1 AA Bitline2 $end
$var wire 1 BA D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 CA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 BA d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 CA q $end
$var reg 1 CA state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 DA Bitline1 $end
$var wire 1 EA Bitline2 $end
$var wire 1 FA D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 GA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 FA d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 GA q $end
$var reg 1 GA state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 HA Bitline1 $end
$var wire 1 IA Bitline2 $end
$var wire 1 JA D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 KA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 JA d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 KA q $end
$var reg 1 KA state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 LA Bitline1 $end
$var wire 1 MA Bitline2 $end
$var wire 1 NA D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 OA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 NA d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 OA q $end
$var reg 1 OA state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 PA Bitline1 $end
$var wire 1 QA Bitline2 $end
$var wire 1 RA D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 SA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 RA d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 SA q $end
$var reg 1 SA state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 TA Bitline1 $end
$var wire 1 UA Bitline2 $end
$var wire 1 VA D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 WA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 VA d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 WA q $end
$var reg 1 WA state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 XA Bitline1 $end
$var wire 1 YA Bitline2 $end
$var wire 1 ZA D $end
$var wire 1 w@ ReadEnable1 $end
$var wire 1 x@ ReadEnable2 $end
$var wire 1 y@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 [A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ZA d $end
$var wire 1 X8 rst $end
$var wire 1 y@ wen $end
$var wire 1 [A q $end
$var reg 1 [A state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[12] $end
$var wire 16 \A Bitline1 [15:0] $end
$var wire 16 ]A Bitline2 [15:0] $end
$var wire 16 ^A D [15:0] $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 bA Bitline1 $end
$var wire 1 cA Bitline2 $end
$var wire 1 dA D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 eA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 dA d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 eA q $end
$var reg 1 eA state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 fA Bitline1 $end
$var wire 1 gA Bitline2 $end
$var wire 1 hA D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 iA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 hA d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 iA q $end
$var reg 1 iA state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 jA Bitline1 $end
$var wire 1 kA Bitline2 $end
$var wire 1 lA D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 mA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 lA d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 mA q $end
$var reg 1 mA state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 nA Bitline1 $end
$var wire 1 oA Bitline2 $end
$var wire 1 pA D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 qA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 pA d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 qA q $end
$var reg 1 qA state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 rA Bitline1 $end
$var wire 1 sA Bitline2 $end
$var wire 1 tA D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 uA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 tA d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 uA q $end
$var reg 1 uA state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 vA Bitline1 $end
$var wire 1 wA Bitline2 $end
$var wire 1 xA D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 yA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 xA d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 yA q $end
$var reg 1 yA state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 zA Bitline1 $end
$var wire 1 {A Bitline2 $end
$var wire 1 |A D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 }A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |A d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 }A q $end
$var reg 1 }A state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 ~A Bitline1 $end
$var wire 1 !B Bitline2 $end
$var wire 1 "B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 #B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 #B q $end
$var reg 1 #B state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 $B Bitline1 $end
$var wire 1 %B Bitline2 $end
$var wire 1 &B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 'B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 'B q $end
$var reg 1 'B state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 (B Bitline1 $end
$var wire 1 )B Bitline2 $end
$var wire 1 *B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 +B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 +B q $end
$var reg 1 +B state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ,B Bitline1 $end
$var wire 1 -B Bitline2 $end
$var wire 1 .B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 /B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 /B q $end
$var reg 1 /B state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 0B Bitline1 $end
$var wire 1 1B Bitline2 $end
$var wire 1 2B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 3B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 3B q $end
$var reg 1 3B state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 4B Bitline1 $end
$var wire 1 5B Bitline2 $end
$var wire 1 6B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 7B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 7B q $end
$var reg 1 7B state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 8B Bitline1 $end
$var wire 1 9B Bitline2 $end
$var wire 1 :B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ;B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 ;B q $end
$var reg 1 ;B state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 <B Bitline1 $end
$var wire 1 =B Bitline2 $end
$var wire 1 >B D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ?B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >B d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 ?B q $end
$var reg 1 ?B state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 @B Bitline1 $end
$var wire 1 AB Bitline2 $end
$var wire 1 BB D $end
$var wire 1 _A ReadEnable1 $end
$var wire 1 `A ReadEnable2 $end
$var wire 1 aA WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 CB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 BB d $end
$var wire 1 X8 rst $end
$var wire 1 aA wen $end
$var wire 1 CB q $end
$var reg 1 CB state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[13] $end
$var wire 16 DB Bitline1 [15:0] $end
$var wire 16 EB Bitline2 [15:0] $end
$var wire 16 FB D [15:0] $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 JB Bitline1 $end
$var wire 1 KB Bitline2 $end
$var wire 1 LB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 MB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 LB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 MB q $end
$var reg 1 MB state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 NB Bitline1 $end
$var wire 1 OB Bitline2 $end
$var wire 1 PB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 QB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 PB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 QB q $end
$var reg 1 QB state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 RB Bitline1 $end
$var wire 1 SB Bitline2 $end
$var wire 1 TB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 UB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 TB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 UB q $end
$var reg 1 UB state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 VB Bitline1 $end
$var wire 1 WB Bitline2 $end
$var wire 1 XB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 YB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 XB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 YB q $end
$var reg 1 YB state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 ZB Bitline1 $end
$var wire 1 [B Bitline2 $end
$var wire 1 \B D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ]B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \B d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 ]B q $end
$var reg 1 ]B state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 ^B Bitline1 $end
$var wire 1 _B Bitline2 $end
$var wire 1 `B D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 aB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `B d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 aB q $end
$var reg 1 aB state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 bB Bitline1 $end
$var wire 1 cB Bitline2 $end
$var wire 1 dB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 eB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 dB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 eB q $end
$var reg 1 eB state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 fB Bitline1 $end
$var wire 1 gB Bitline2 $end
$var wire 1 hB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 iB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 hB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 iB q $end
$var reg 1 iB state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 jB Bitline1 $end
$var wire 1 kB Bitline2 $end
$var wire 1 lB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 mB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 lB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 mB q $end
$var reg 1 mB state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 nB Bitline1 $end
$var wire 1 oB Bitline2 $end
$var wire 1 pB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 qB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 pB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 qB q $end
$var reg 1 qB state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 rB Bitline1 $end
$var wire 1 sB Bitline2 $end
$var wire 1 tB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 uB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 tB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 uB q $end
$var reg 1 uB state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 vB Bitline1 $end
$var wire 1 wB Bitline2 $end
$var wire 1 xB D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 yB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 xB d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 yB q $end
$var reg 1 yB state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 zB Bitline1 $end
$var wire 1 {B Bitline2 $end
$var wire 1 |B D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 }B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |B d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 }B q $end
$var reg 1 }B state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 ~B Bitline1 $end
$var wire 1 !C Bitline2 $end
$var wire 1 "C D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 #C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "C d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 #C q $end
$var reg 1 #C state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 $C Bitline1 $end
$var wire 1 %C Bitline2 $end
$var wire 1 &C D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 'C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &C d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 'C q $end
$var reg 1 'C state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 (C Bitline1 $end
$var wire 1 )C Bitline2 $end
$var wire 1 *C D $end
$var wire 1 GB ReadEnable1 $end
$var wire 1 HB ReadEnable2 $end
$var wire 1 IB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 +C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *C d $end
$var wire 1 X8 rst $end
$var wire 1 IB wen $end
$var wire 1 +C q $end
$var reg 1 +C state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[14] $end
$var wire 16 ,C Bitline1 [15:0] $end
$var wire 16 -C Bitline2 [15:0] $end
$var wire 16 .C D [15:0] $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 2C Bitline1 $end
$var wire 1 3C Bitline2 $end
$var wire 1 4C D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 5C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4C d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 5C q $end
$var reg 1 5C state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 6C Bitline1 $end
$var wire 1 7C Bitline2 $end
$var wire 1 8C D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 9C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8C d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 9C q $end
$var reg 1 9C state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 :C Bitline1 $end
$var wire 1 ;C Bitline2 $end
$var wire 1 <C D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 =C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <C d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 =C q $end
$var reg 1 =C state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 >C Bitline1 $end
$var wire 1 ?C Bitline2 $end
$var wire 1 @C D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 AC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @C d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 AC q $end
$var reg 1 AC state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 BC Bitline1 $end
$var wire 1 CC Bitline2 $end
$var wire 1 DC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 EC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 DC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 EC q $end
$var reg 1 EC state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 FC Bitline1 $end
$var wire 1 GC Bitline2 $end
$var wire 1 HC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 IC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 HC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 IC q $end
$var reg 1 IC state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 JC Bitline1 $end
$var wire 1 KC Bitline2 $end
$var wire 1 LC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 MC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 LC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 MC q $end
$var reg 1 MC state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 NC Bitline1 $end
$var wire 1 OC Bitline2 $end
$var wire 1 PC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 QC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 PC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 QC q $end
$var reg 1 QC state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 RC Bitline1 $end
$var wire 1 SC Bitline2 $end
$var wire 1 TC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 UC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 TC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 UC q $end
$var reg 1 UC state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 VC Bitline1 $end
$var wire 1 WC Bitline2 $end
$var wire 1 XC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 YC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 XC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 YC q $end
$var reg 1 YC state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ZC Bitline1 $end
$var wire 1 [C Bitline2 $end
$var wire 1 \C D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ]C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \C d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 ]C q $end
$var reg 1 ]C state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 ^C Bitline1 $end
$var wire 1 _C Bitline2 $end
$var wire 1 `C D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 aC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `C d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 aC q $end
$var reg 1 aC state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 bC Bitline1 $end
$var wire 1 cC Bitline2 $end
$var wire 1 dC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 eC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 dC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 eC q $end
$var reg 1 eC state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 fC Bitline1 $end
$var wire 1 gC Bitline2 $end
$var wire 1 hC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 iC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 hC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 iC q $end
$var reg 1 iC state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 jC Bitline1 $end
$var wire 1 kC Bitline2 $end
$var wire 1 lC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 mC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 lC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 mC q $end
$var reg 1 mC state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 nC Bitline1 $end
$var wire 1 oC Bitline2 $end
$var wire 1 pC D $end
$var wire 1 /C ReadEnable1 $end
$var wire 1 0C ReadEnable2 $end
$var wire 1 1C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 qC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 pC d $end
$var wire 1 X8 rst $end
$var wire 1 1C wen $end
$var wire 1 qC q $end
$var reg 1 qC state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[15] $end
$var wire 16 rC Bitline1 [15:0] $end
$var wire 16 sC Bitline2 [15:0] $end
$var wire 16 tC D [15:0] $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteReg $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$scope module bitArray[0] $end
$var wire 1 xC Bitline1 $end
$var wire 1 yC Bitline2 $end
$var wire 1 zC D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 {C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 zC d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 {C q $end
$var reg 1 {C state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 |C Bitline1 $end
$var wire 1 }C Bitline2 $end
$var wire 1 ~C D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 !D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~C d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 !D q $end
$var reg 1 !D state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 "D Bitline1 $end
$var wire 1 #D Bitline2 $end
$var wire 1 $D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 %D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 %D q $end
$var reg 1 %D state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 &D Bitline1 $end
$var wire 1 'D Bitline2 $end
$var wire 1 (D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 )D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 )D q $end
$var reg 1 )D state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 *D Bitline1 $end
$var wire 1 +D Bitline2 $end
$var wire 1 ,D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 -D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 -D q $end
$var reg 1 -D state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 .D Bitline1 $end
$var wire 1 /D Bitline2 $end
$var wire 1 0D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 1D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 1D q $end
$var reg 1 1D state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 2D Bitline1 $end
$var wire 1 3D Bitline2 $end
$var wire 1 4D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 5D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 5D q $end
$var reg 1 5D state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 6D Bitline1 $end
$var wire 1 7D Bitline2 $end
$var wire 1 8D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 9D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 9D q $end
$var reg 1 9D state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 :D Bitline1 $end
$var wire 1 ;D Bitline2 $end
$var wire 1 <D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 =D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 =D q $end
$var reg 1 =D state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 >D Bitline1 $end
$var wire 1 ?D Bitline2 $end
$var wire 1 @D D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 AD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @D d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 AD q $end
$var reg 1 AD state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 BD Bitline1 $end
$var wire 1 CD Bitline2 $end
$var wire 1 DD D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ED dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 DD d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 ED q $end
$var reg 1 ED state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 FD Bitline1 $end
$var wire 1 GD Bitline2 $end
$var wire 1 HD D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 ID dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 HD d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 ID q $end
$var reg 1 ID state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 JD Bitline1 $end
$var wire 1 KD Bitline2 $end
$var wire 1 LD D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 MD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 LD d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 MD q $end
$var reg 1 MD state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 ND Bitline1 $end
$var wire 1 OD Bitline2 $end
$var wire 1 PD D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 QD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 PD d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 QD q $end
$var reg 1 QD state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 RD Bitline1 $end
$var wire 1 SD Bitline2 $end
$var wire 1 TD D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 UD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 TD d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 UD q $end
$var reg 1 UD state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 VD Bitline1 $end
$var wire 1 WD Bitline2 $end
$var wire 1 XD D $end
$var wire 1 uC ReadEnable1 $end
$var wire 1 vC ReadEnable2 $end
$var wire 1 wC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 X8 rst $end
$var wire 1 YD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 XD d $end
$var wire 1 X8 rst $end
$var wire 1 wC wen $end
$var wire 1 YD q $end
$var reg 1 YD state $end
$upscope $end
$upscope $end
$upscope $end
$scope module writeDecoder2 $end
$var wire 4 ZD RegId [3:0] $end
$var wire 1 u WriteReg $end
$var wire 16 [D Wordline [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 v6
b10000 '4
$end
#0
$dumpvars
b0 [D
b0 ZD
0YD
0XD
xWD
xVD
0UD
0TD
xSD
xRD
0QD
0PD
xOD
xND
0MD
0LD
xKD
xJD
0ID
0HD
xGD
xFD
0ED
0DD
xCD
xBD
0AD
0@D
x?D
x>D
0=D
0<D
x;D
x:D
09D
08D
x7D
x6D
05D
04D
x3D
x2D
01D
00D
x/D
x.D
0-D
0,D
x+D
x*D
0)D
0(D
x'D
x&D
0%D
0$D
x#D
x"D
0!D
0~C
x}C
x|C
0{C
0zC
xyC
xxC
0wC
xvC
xuC
b0 tC
bx sC
bx rC
0qC
0pC
xoC
xnC
0mC
0lC
xkC
xjC
0iC
0hC
xgC
xfC
0eC
0dC
xcC
xbC
0aC
0`C
x_C
x^C
0]C
0\C
x[C
xZC
0YC
0XC
xWC
xVC
0UC
0TC
xSC
xRC
0QC
0PC
xOC
xNC
0MC
0LC
xKC
xJC
0IC
0HC
xGC
xFC
0EC
0DC
xCC
xBC
0AC
0@C
x?C
x>C
0=C
0<C
x;C
x:C
09C
08C
x7C
x6C
05C
04C
x3C
x2C
01C
x0C
x/C
b0 .C
bx -C
bx ,C
0+C
0*C
x)C
x(C
0'C
0&C
x%C
x$C
0#C
0"C
x!C
x~B
0}B
0|B
x{B
xzB
0yB
0xB
xwB
xvB
0uB
0tB
xsB
xrB
0qB
0pB
xoB
xnB
0mB
0lB
xkB
xjB
0iB
0hB
xgB
xfB
0eB
0dB
xcB
xbB
0aB
0`B
x_B
x^B
0]B
0\B
x[B
xZB
0YB
0XB
xWB
xVB
0UB
0TB
xSB
xRB
0QB
0PB
xOB
xNB
0MB
0LB
xKB
xJB
0IB
xHB
xGB
b0 FB
bx EB
bx DB
0CB
0BB
xAB
x@B
0?B
0>B
x=B
x<B
0;B
0:B
x9B
x8B
07B
06B
x5B
x4B
03B
02B
x1B
x0B
0/B
0.B
x-B
x,B
0+B
0*B
x)B
x(B
0'B
0&B
x%B
x$B
0#B
0"B
x!B
x~A
0}A
0|A
x{A
xzA
0yA
0xA
xwA
xvA
0uA
0tA
xsA
xrA
0qA
0pA
xoA
xnA
0mA
0lA
xkA
xjA
0iA
0hA
xgA
xfA
0eA
0dA
xcA
xbA
0aA
x`A
x_A
b0 ^A
bx ]A
bx \A
0[A
0ZA
xYA
xXA
0WA
0VA
xUA
xTA
0SA
0RA
xQA
xPA
0OA
0NA
xMA
xLA
0KA
0JA
xIA
xHA
0GA
0FA
xEA
xDA
0CA
0BA
xAA
x@A
0?A
0>A
x=A
x<A
0;A
0:A
x9A
x8A
07A
06A
x5A
x4A
03A
02A
x1A
x0A
0/A
0.A
x-A
x,A
0+A
0*A
x)A
x(A
0'A
0&A
x%A
x$A
0#A
0"A
x!A
x~@
0}@
0|@
x{@
xz@
0y@
xx@
xw@
b0 v@
bx u@
bx t@
0s@
0r@
xq@
xp@
0o@
0n@
xm@
xl@
0k@
0j@
xi@
xh@
0g@
0f@
xe@
xd@
0c@
0b@
xa@
x`@
0_@
0^@
x]@
x\@
0[@
0Z@
xY@
xX@
0W@
0V@
xU@
xT@
0S@
0R@
xQ@
xP@
0O@
0N@
xM@
xL@
0K@
0J@
xI@
xH@
0G@
0F@
xE@
xD@
0C@
0B@
xA@
x@@
0?@
0>@
x=@
x<@
0;@
0:@
x9@
x8@
07@
06@
x5@
x4@
03@
x2@
x1@
b0 0@
bx /@
bx .@
0-@
0,@
x+@
x*@
0)@
0(@
x'@
x&@
0%@
0$@
x#@
x"@
0!@
0~?
x}?
x|?
0{?
0z?
xy?
xx?
0w?
0v?
xu?
xt?
0s?
0r?
xq?
xp?
0o?
0n?
xm?
xl?
0k?
0j?
xi?
xh?
0g?
0f?
xe?
xd?
0c?
0b?
xa?
x`?
0_?
0^?
x]?
x\?
0[?
0Z?
xY?
xX?
0W?
0V?
xU?
xT?
0S?
0R?
xQ?
xP?
0O?
0N?
xM?
xL?
0K?
xJ?
xI?
b0 H?
bx G?
bx F?
0E?
0D?
xC?
xB?
0A?
0@?
x??
x>?
0=?
0<?
x;?
x:?
09?
08?
x7?
x6?
05?
04?
x3?
x2?
01?
00?
x/?
x.?
0-?
0,?
x+?
x*?
0)?
0(?
x'?
x&?
0%?
0$?
x#?
x"?
0!?
0~>
x}>
x|>
0{>
0z>
xy>
xx>
0w>
0v>
xu>
xt>
0s>
0r>
xq>
xp>
0o>
0n>
xm>
xl>
0k>
0j>
xi>
xh>
0g>
0f>
xe>
xd>
0c>
xb>
xa>
b0 `>
bx _>
bx ^>
0]>
0\>
x[>
xZ>
0Y>
0X>
xW>
xV>
0U>
0T>
xS>
xR>
0Q>
0P>
xO>
xN>
0M>
0L>
xK>
xJ>
0I>
0H>
xG>
xF>
0E>
0D>
xC>
xB>
0A>
0@>
x?>
x>>
0=>
0<>
x;>
x:>
09>
08>
x7>
x6>
05>
04>
x3>
x2>
01>
00>
x/>
x.>
0->
0,>
x+>
x*>
0)>
0(>
x'>
x&>
0%>
0$>
x#>
x">
0!>
0~=
x}=
x|=
0{=
xz=
xy=
b0 x=
bx w=
bx v=
0u=
0t=
xs=
xr=
0q=
0p=
xo=
xn=
0m=
0l=
xk=
xj=
0i=
0h=
xg=
xf=
0e=
0d=
xc=
xb=
0a=
0`=
x_=
x^=
0]=
0\=
x[=
xZ=
0Y=
0X=
xW=
xV=
0U=
0T=
xS=
xR=
0Q=
0P=
xO=
xN=
0M=
0L=
xK=
xJ=
0I=
0H=
xG=
xF=
0E=
0D=
xC=
xB=
0A=
0@=
x?=
x>=
0==
0<=
x;=
x:=
09=
08=
x7=
x6=
05=
x4=
x3=
b0 2=
bx 1=
bx 0=
0/=
0.=
x-=
x,=
0+=
0*=
x)=
x(=
0'=
0&=
x%=
x$=
0#=
0"=
x!=
x~<
0}<
0|<
x{<
xz<
0y<
0x<
xw<
xv<
0u<
0t<
xs<
xr<
0q<
0p<
xo<
xn<
0m<
0l<
xk<
xj<
0i<
0h<
xg<
xf<
0e<
0d<
xc<
xb<
0a<
0`<
x_<
x^<
0]<
0\<
x[<
xZ<
0Y<
0X<
xW<
xV<
0U<
0T<
xS<
xR<
0Q<
0P<
xO<
xN<
0M<
xL<
xK<
b0 J<
bx I<
bx H<
0G<
0F<
xE<
xD<
0C<
0B<
xA<
x@<
0?<
0><
x=<
x<<
0;<
0:<
x9<
x8<
07<
06<
x5<
x4<
03<
02<
x1<
x0<
0/<
0.<
x-<
x,<
0+<
0*<
x)<
x(<
0'<
0&<
x%<
x$<
0#<
0"<
x!<
x~;
0};
0|;
x{;
xz;
0y;
0x;
xw;
xv;
0u;
0t;
xs;
xr;
0q;
0p;
xo;
xn;
0m;
0l;
xk;
xj;
0i;
0h;
xg;
xf;
0e;
xd;
xc;
b0 b;
bx a;
bx `;
0_;
0^;
x];
x\;
0[;
0Z;
xY;
xX;
0W;
0V;
xU;
xT;
0S;
0R;
xQ;
xP;
0O;
0N;
xM;
xL;
0K;
0J;
xI;
xH;
0G;
0F;
xE;
xD;
0C;
0B;
xA;
x@;
0?;
0>;
x=;
x<;
0;;
0:;
x9;
x8;
07;
06;
x5;
x4;
03;
02;
x1;
x0;
0/;
0.;
x-;
x,;
0+;
0*;
x);
x(;
0';
0&;
x%;
x$;
0#;
0";
x!;
x~:
0}:
x|:
x{:
b0 z:
bx y:
bx x:
0w:
0v:
xu:
xt:
0s:
0r:
xq:
xp:
0o:
0n:
xm:
xl:
0k:
0j:
xi:
xh:
0g:
0f:
xe:
xd:
0c:
0b:
xa:
x`:
0_:
0^:
x]:
x\:
0[:
0Z:
xY:
xX:
0W:
0V:
xU:
xT:
0S:
0R:
xQ:
xP:
0O:
0N:
xM:
xL:
0K:
0J:
xI:
xH:
0G:
0F:
xE:
xD:
0C:
0B:
xA:
x@:
0?:
0>:
x=:
x<:
0;:
0::
x9:
x8:
07:
x6:
x5:
b0 4:
bx 3:
bx 2:
01:
00:
x/:
x.:
0-:
0,:
x+:
x*:
0):
0(:
x':
x&:
0%:
0$:
x#:
x":
0!:
0~9
x}9
x|9
0{9
0z9
xy9
xx9
0w9
0v9
xu9
xt9
0s9
0r9
xq9
xp9
0o9
0n9
xm9
xl9
0k9
0j9
xi9
xh9
0g9
0f9
xe9
xd9
0c9
0b9
xa9
x`9
0_9
0^9
x]9
x\9
0[9
0Z9
xY9
xX9
0W9
0V9
xU9
xT9
0S9
0R9
xQ9
xP9
0O9
xN9
xM9
b0 L9
bx K9
bx J9
0I9
0H9
xG9
xF9
0E9
0D9
xC9
xB9
0A9
0@9
x?9
x>9
0=9
0<9
x;9
x:9
099
089
x79
x69
059
049
x39
x29
019
009
x/9
x.9
0-9
0,9
x+9
x*9
0)9
0(9
x'9
x&9
0%9
0$9
x#9
x"9
0!9
0~8
x}8
x|8
0{8
0z8
xy8
xx8
0w8
0v8
xu8
xt8
0s8
0r8
xq8
xp8
0o8
0n8
xm8
xl8
0k8
0j8
xi8
xh8
0g8
xf8
xe8
b0 d8
bx c8
bx b8
bx a8
bx `8
bx _8
bx ^8
bx ]8
bx \8
bx [8
bx Z8
b0 Y8
1X8
bx W8
bx V8
bx U8
bx T8
b0 S8
b0 R8
0Q8
xP8
zO8
0N8
0M8
xL8
zK8
0J8
0I8
xH8
zG8
0F8
0E8
xD8
zC8
0B8
0A8
x@8
z?8
0>8
0=8
x<8
z;8
0:8
098
x88
z78
068
058
x48
z38
028
018
x08
z/8
0.8
0-8
x,8
z+8
0*8
0)8
x(8
z'8
0&8
0%8
x$8
z#8
0"8
0!8
x~7
z}7
0|7
0{7
xz7
zy7
0x7
0w7
xv7
zu7
0t7
0s7
xr7
zq7
0p7
1o7
xn7
0m7
1l7
bx k7
bz j7
b0 i7
xh7
zg7
zf7
xe7
xd7
zc7
zb7
xa7
x`7
z_7
z^7
x]7
x\7
z[7
zZ7
xY7
xX7
zW7
zV7
xU7
xT7
zS7
zR7
xQ7
xP7
zO7
zN7
xM7
xL7
zK7
zJ7
xI7
xH7
zG7
zF7
xE7
xD7
zC7
zB7
xA7
x@7
z?7
z>7
x=7
x<7
z;7
z:7
x97
x87
z77
z67
x57
x47
z37
z27
x17
x07
z/7
z.7
x-7
x,7
z+7
z*7
x)7
1(7
0'7
0&7
0%7
1$7
bz #7
bz "7
bx !7
b0 ~6
bz }6
b0 |6
bx {6
xz6
bz y6
bz x6
1w6
b0 u6
b1010000101010001 t6
0s6
1r6
1q6
bx p6
bx o6
bx n6
b0 m6
b0 l6
b0 k6
b0 j6
b0 i6
b0 h6
0g6
xf6
0e6
xd6
xc6
1b6
xa6
0`6
x_6
0^6
x]6
x\6
x[6
1Z6
xY6
0X6
xW6
0V6
xU6
xT6
xS6
1R6
xQ6
0P6
0O6
0N6
bx M6
bx L6
bx K6
xJ6
xI6
0H6
zG6
xF6
xE6
0D6
zC6
xB6
xA6
0@6
z?6
x>6
x=6
0<6
z;6
x:6
x96
086
z76
x66
x56
046
z36
x26
x16
006
z/6
x.6
x-6
0,6
z+6
x*6
x)6
0(6
z'6
x&6
x%6
0$6
z#6
x"6
x!6
0~5
z}5
x|5
x{5
0z5
zy5
xx5
xw5
0v5
zu5
xt5
xs5
0r5
zq5
xp5
xo5
0n5
zm5
xl5
xk5
0j5
zi5
xh5
b0 g5
0f5
1e5
bz d5
bx c5
xb5
0a5
z`5
x_5
x^5
0]5
z\5
x[5
xZ5
0Y5
zX5
xW5
xV5
0U5
zT5
xS5
xR5
0Q5
zP5
xO5
xN5
0M5
zL5
xK5
xJ5
0I5
zH5
xG5
xF5
0E5
zD5
xC5
xB5
0A5
z@5
x?5
x>5
0=5
z<5
x;5
x:5
095
z85
x75
x65
055
z45
x35
x25
015
z05
x/5
x.5
0-5
z,5
x+5
x*5
1)5
z(5
x'5
x&5
0%5
z$5
x#5
0"5
1!5
b10 ~4
bz }4
bx |4
x{4
1z4
zy4
xx4
xw4
0v4
zu4
xt4
xs4
1r4
zq4
xp4
xo4
0n4
zm4
xl4
xk4
0j4
zi4
xh4
xg4
0f4
ze4
xd4
xc4
0b4
za4
x`4
x_4
1^4
z]4
x\4
x[4
0Z4
zY4
xX4
xW4
1V4
zU4
xT4
xS4
0R4
zQ4
xP4
xO4
1N4
zM4
xL4
xK4
0J4
zI4
xH4
xG4
0F4
zE4
xD4
xC4
0B4
zA4
x@4
x?4
1>4
z=4
x<4
b1010000101010001 ;4
0:4
194
bz 84
bx 74
x64
054
x44
034
x24
014
b1010000101010001 04
b0 /4
z.4
1-4
bx ,4
bx +4
b10 *4
bx )4
1(4
b0 &4
1%4
0$4
b0 #4
b0 "4
bx !4
x~3
x}3
bx |3
b0 {3
0z3
0y3
0x3
0w3
0v3
0u3
0t3
0s3
0r3
0q3
0p3
0o3
b0 n3
b0 m3
b0 l3
0k3
0j3
0i3
0h3
0g3
0f3
0e3
0d3
0c3
0b3
0a3
0`3
b0 _3
b0 ^3
0]3
b0 \3
b0 [3
b0 Z3
b0 Y3
0X3
0W3
0V3
0U3
0T3
0S3
0R3
0Q3
0P3
0O3
0N3
0M3
b0 L3
b0 K3
b10 J3
0I3
0H3
1G3
0F3
0E3
0D3
0C3
0B3
0A3
0@3
0?3
0>3
b10 =3
b0 <3
0;3
b10 :3
b10 93
b0 83
b0 73
063
053
b10 43
033
b10 23
b1111 13
103
1/3
1.3
1-3
0,3
0+3
0*3
0)3
0(3
0'3
0&3
0%3
b1111 $3
b0 #3
b1110 "3
1!3
1~2
1}2
0|2
0{2
0z2
0y2
0x2
0w2
0v2
0u2
0t2
b1110 s2
b0 r2
0q2
b11111110 p2
b11111110 o2
b0 n2
b1010 m2
1l2
0k2
1j2
0i2
0h2
0g2
0f2
0e2
0d2
0c2
0b2
0a2
b1010 `2
b0 _2
b100 ^2
0]2
0\2
0[2
0Z2
0Y2
0X2
1W2
0V2
0U2
0T2
1S2
0R2
b10 Q2
b10 P2
0O2
b10100100 N2
b10100010 M2
b10 L2
b10 K2
0J2
0I2
b1111111010100100 H2
0G2
b1111111010100010 F2
bx E2
b0 D2
0C2
0B2
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
z92
082
072
062
z52
042
032
022
z12
002
0/2
0.2
z-2
0,2
0+2
0*2
z)2
0(2
0'2
0&2
z%2
0$2
0#2
0"2
z!2
0~1
0}1
0|1
z{1
0z1
0y1
0x1
zw1
0v1
0u1
0t1
zs1
0r1
0q1
0p1
zo1
0n1
0m1
0l1
zk1
0j1
0i1
0h1
zg1
0f1
0e1
0d1
zc1
0b1
0a1
0`1
z_1
0^1
0]1
0\1
z[1
0Z1
0Y1
1X1
b0 W1
bz V1
b0 U1
0T1
0S1
zR1
0Q1
0P1
0O1
zN1
0M1
0L1
0K1
zJ1
0I1
0H1
0G1
zF1
0E1
0D1
0C1
zB1
0A1
0@1
0?1
z>1
0=1
0<1
0;1
z:1
091
081
071
z61
051
041
031
z21
011
001
0/1
z.1
0-1
0,1
0+1
z*1
0)1
0(1
0'1
z&1
0%1
0$1
0#1
z"1
0!1
0~0
0}0
z|0
0{0
0z0
0y0
zx0
0w0
0v0
0u0
zt0
0s0
0r0
1q0
b0 p0
bz o0
b0 n0
0m0
0l0
zk0
0j0
0i0
0h0
zg0
0f0
0e0
0d0
zc0
0b0
0a0
0`0
z_0
0^0
0]0
0\0
z[0
0Z0
0Y0
0X0
zW0
0V0
0U0
0T0
zS0
0R0
0Q0
0P0
zO0
0N0
0M0
0L0
zK0
0J0
0I0
0H0
zG0
0F0
0E0
0D0
zC0
0B0
0A0
0@0
z?0
0>0
0=0
0<0
z;0
0:0
090
080
z70
060
050
040
z30
020
010
000
z/0
0.0
0-0
1,0
b0 +0
bz *0
b0 )0
0(0
0'0
0&0
z%0
0$0
0#0
0"0
z!0
0~/
0}/
0|/
z{/
0z/
0y/
0x/
zw/
0v/
0u/
0t/
zs/
0r/
0q/
0p/
zo/
0n/
0m/
0l/
zk/
0j/
0i/
0h/
zg/
0f/
0e/
0d/
zc/
0b/
0a/
0`/
z_/
0^/
0]/
0\/
z[/
0Z/
0Y/
0X/
zW/
0V/
0U/
0T/
zS/
0R/
0Q/
0P/
zO/
0N/
0M/
0L/
zK/
0J/
0I/
0H/
zG/
0F/
0E/
1D/
b0 C/
bz B/
b0 A/
0@/
0?/
0>/
0=/
0</
0;/
0:/
09/
08/
07/
06/
05/
z4/
03/
02/
01/
z0/
0//
0./
0-/
z,/
0+/
0*/
0)/
z(/
0'/
0&/
0%/
z$/
0#/
0"/
0!/
z~.
0}.
0|.
0{.
zz.
0y.
0x.
0w.
zv.
0u.
0t.
0s.
zr.
0q.
0p.
0o.
zn.
0m.
0l.
0k.
zj.
0i.
0h.
0g.
zf.
0e.
0d.
0c.
zb.
0a.
0`.
0_.
z^.
0].
0\.
0[.
zZ.
0Y.
0X.
0W.
zV.
0U.
0T.
1S.
b0 R.
bz Q.
b0 P.
b0 O.
b0 N.
1M.
1L.
b0 K.
b0 J.
b0 I.
b0 H.
b0 G.
b0 F.
b0 E.
b0 D.
b0 C.
b0 B.
b0 A.
b0 @.
0?.
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
z5.
04.
03.
02.
z1.
00.
0/.
0..
z-.
0,.
0+.
0*.
z).
0(.
0'.
0&.
z%.
0$.
0#.
0".
z!.
0~-
0}-
0|-
z{-
0z-
0y-
0x-
zw-
0v-
0u-
0t-
zs-
0r-
0q-
0p-
zo-
0n-
0m-
0l-
zk-
0j-
0i-
0h-
zg-
0f-
0e-
0d-
zc-
0b-
0a-
0`-
z_-
0^-
0]-
0\-
z[-
0Z-
0Y-
0X-
zW-
0V-
0U-
1T-
b0 S-
bz R-
b0 Q-
0P-
zO-
zN-
0M-
0L-
zK-
zJ-
0I-
0H-
zG-
zF-
0E-
0D-
zC-
zB-
0A-
0@-
z?-
z>-
0=-
0<-
z;-
z:-
09-
08-
z7-
z6-
05-
04-
z3-
z2-
01-
00-
z/-
z.-
0--
0,-
z+-
z*-
0)-
0(-
z'-
z&-
0%-
0$-
z#-
z"-
0!-
0~,
z},
z|,
0{,
0z,
zy,
zx,
0w,
0v,
zu,
zt,
0s,
0r,
zq,
zp,
0o,
0n,
1m,
bz l,
bz k,
b0 j,
0i,
0h,
zg,
0f,
0e,
0d,
zc,
0b,
0a,
0`,
z_,
0^,
0],
0\,
z[,
0Z,
0Y,
0X,
zW,
0V,
0U,
0T,
zS,
0R,
0Q,
0P,
zO,
0N,
0M,
0L,
zK,
0J,
0I,
0H,
zG,
0F,
0E,
0D,
zC,
0B,
0A,
0@,
z?,
0>,
0=,
0<,
z;,
0:,
09,
08,
z7,
06,
05,
04,
z3,
02,
01,
00,
z/,
0.,
0-,
0,,
z+,
0*,
b0 ),
0(,
1',
bz &,
b0 %,
0$,
0#,
z",
0!,
0~+
0}+
z|+
0{+
0z+
0y+
zx+
0w+
0v+
0u+
zt+
0s+
0r+
0q+
zp+
0o+
0n+
0m+
zl+
0k+
0j+
0i+
zh+
0g+
0f+
0e+
zd+
0c+
0b+
0a+
z`+
0_+
0^+
0]+
z\+
0[+
0Z+
0Y+
zX+
0W+
0V+
0U+
zT+
0S+
0R+
0Q+
zP+
0O+
0N+
0M+
zL+
0K+
0J+
0I+
zH+
0G+
0F+
0E+
zD+
0C+
0B+
1A+
b0 @+
bz ?+
b0 >+
0=+
0<+
z;+
0:+
09+
08+
z7+
06+
05+
04+
z3+
02+
01+
00+
z/+
0.+
0-+
0,+
z++
0*+
0)+
0(+
z'+
0&+
0%+
0$+
z#+
0"+
0!+
0~*
z}*
0|*
0{*
0z*
zy*
0x*
0w*
0v*
zu*
0t*
0s*
0r*
zq*
0p*
0o*
0n*
zm*
0l*
0k*
0j*
zi*
0h*
0g*
0f*
ze*
0d*
0c*
0b*
za*
0`*
0_*
0^*
z]*
0\*
0[*
1Z*
b0 Y*
bz X*
b0 W*
b0 V*
b0 U*
b0 T*
1S*
1R*
b0 Q*
b0 P*
b0 O*
bz N*
b0 M*
b0 L*
b0 K*
b0 J*
b0 I*
0H*
xG*
0F*
xE*
0D*
xC*
0B*
xA*
0@*
x?*
z>*
0=*
0<*
x;*
z:*
09*
08*
x7*
z6*
05*
04*
x3*
z2*
01*
00*
x/*
z.*
0-*
0,*
x+*
z**
0)*
0(*
x'*
z&*
0%*
0$*
x#*
z"*
0!*
0~)
x})
z|)
0{)
0z)
xy)
zx)
0w)
0v)
xu)
zt)
0s)
0r)
xq)
zp)
0o)
0n)
xm)
zl)
0k)
0j)
xi)
zh)
0g)
0f)
xe)
zd)
0c)
0b)
xa)
z`)
0_)
0^)
1])
bx \)
bz [)
b0 Z)
0Y)
xX)
zW)
0V)
0U)
xT)
zS)
0R)
0Q)
xP)
zO)
0N)
0M)
xL)
zK)
0J)
0I)
xH)
zG)
0F)
0E)
xD)
zC)
0B)
0A)
x@)
z?)
0>)
0=)
x<)
z;)
0:)
09)
x8)
z7)
06)
05)
x4)
z3)
02)
01)
x0)
z/)
0.)
0-)
x,)
z+)
0*)
0))
x()
z')
0&)
0%)
x$)
z#)
0")
0!)
x~(
z}(
0|(
0{(
xz(
zy(
0x(
0w(
1v(
bx u(
bz t(
b0 s(
0r(
xq(
zp(
0o(
0n(
xm(
zl(
0k(
0j(
xi(
zh(
0g(
0f(
xe(
zd(
0c(
0b(
xa(
z`(
0_(
0^(
x](
z\(
0[(
0Z(
xY(
zX(
0W(
0V(
xU(
zT(
0S(
0R(
xQ(
zP(
0O(
0N(
xM(
zL(
0K(
0J(
xI(
zH(
0G(
0F(
xE(
zD(
0C(
0B(
xA(
z@(
0?(
0>(
x=(
z<(
0;(
0:(
x9(
z8(
07(
06(
x5(
z4(
03(
02(
11(
bx 0(
bz /(
b0 .(
0-(
x,(
z+(
0*(
0)(
x((
z'(
0&(
0%(
x$(
z#(
0"(
0!(
x~'
z}'
0|'
0{'
xz'
zy'
0x'
0w'
xv'
zu'
0t'
0s'
xr'
zq'
0p'
0o'
xn'
zm'
0l'
0k'
xj'
zi'
0h'
0g'
xf'
ze'
0d'
0c'
xb'
za'
0`'
0_'
x^'
z]'
0\'
0['
xZ'
zY'
0X'
0W'
xV'
zU'
0T'
0S'
xR'
zQ'
0P'
0O'
xN'
zM'
0L'
0K'
1J'
bx I'
bz H'
b0 G'
0F'
0E'
0D'
0C'
xB'
zA'
0@'
0?'
x>'
z='
0<'
0;'
x:'
z9'
08'
07'
x6'
z5'
04'
03'
x2'
z1'
00'
0/'
x.'
z-'
0,'
0+'
x*'
z)'
0('
0''
x&'
z%'
0$'
0#'
x"'
z!'
0~&
0}&
x|&
z{&
0z&
0y&
xx&
zw&
0v&
0u&
xt&
zs&
0r&
0q&
xp&
zo&
0n&
0m&
xl&
zk&
0j&
0i&
xh&
zg&
0f&
0e&
xd&
zc&
0b&
bx a&
0`&
1_&
bz ^&
b0 ]&
0\&
x[&
zZ&
0Y&
0X&
xW&
zV&
0U&
0T&
xS&
zR&
0Q&
0P&
xO&
zN&
0M&
0L&
xK&
zJ&
0I&
0H&
xG&
zF&
0E&
0D&
xC&
zB&
0A&
0@&
x?&
z>&
0=&
0<&
x;&
z:&
09&
08&
x7&
z6&
05&
04&
x3&
z2&
01&
00&
x/&
z.&
0-&
0,&
x+&
z*&
0)&
0(&
x'&
z&&
0%&
0$&
x#&
z"&
0!&
0~%
x}%
z|%
0{%
bx z%
0y%
1x%
bz w%
b0 v%
0u%
xt%
0s%
xr%
0q%
xp%
0o%
xn%
0m%
xl%
0k%
xj%
0i%
xh%
0g%
xf%
0e%
0d%
0c%
0b%
0a%
0`%
b0 _%
b0 ^%
bx ]%
bx \%
b0 [%
xZ%
1Y%
bx X%
b0 W%
bx V%
b0 U%
bx T%
b0 S%
bx R%
b0 Q%
bx P%
b0 O%
b0 N%
bx M%
bx L%
b0 K%
b0 J%
b0 I%
b0 H%
b0 G%
b0 F%
b0 E%
b0 D%
b0 C%
b0 B%
b0 A%
0@%
b0 ?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
b0 2%
b0 1%
b0 0%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
b0 #%
b0 "%
b0 !%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
b0 r$
b0 q$
b0 p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
b0 c$
b0 b$
0a$
0`$
0_$
0^$
b0 ]$
b0 \$
b0 [$
0Z$
b1111111111111111 Y$
b0 X$
b0 W$
b0 V$
b0 U$
b0 T$
b0 S$
b0 R$
b0 Q$
b0 P$
b0 O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
b0 B$
b0 A$
b0 @$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
b0 3$
b0 2$
01$
b0 0$
0/$
b0 .$
b0 -$
b0 ,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
b0 }#
b0 |#
b0 {#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
b0 n#
b0 m#
0l#
b0 k#
0j#
b0 i#
b0 h#
b0 g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
b0 Z#
b0 Y#
b0 X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
b0 K#
b0 J#
0I#
b0 H#
0G#
b0 F#
b0 E#
0D#
0C#
0B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
0<#
0;#
0:#
09#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
b0 &#
b0 %#
b0 $#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
b0 t"
b0 s"
b0 r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
b0 d"
b0 c"
b0 b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
b0 T"
b0 S"
0R"
0Q"
0P"
0O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
1@"
0?"
bx >"
0="
b0 <"
0;"
b1 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
b0 !"
b0 ~
b0 }
x|
x{
bx z
bx y
bx x
0w
0v
0u
0t
0s
b0 r
0q
0p
b0 o
b0 n
bx m
b0 l
0k
0j
0i
0h
0g
0f
b0 e
b0 d
0c
0b
b0 a
b0 `
b1111111010100010 _
bx ^
x]
x\
x[
b1010000101010001 Z
b0 Y
b1111111010100100 X
b10 W
b0 V
b0 U
b0 T
bx S
bx R
bx Q
xP
b0 O
zN
b0 M
bz L
xK
xJ
zI
b0 H
b0 G
bz F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
x=
bx <
bx ;
bx :
z9
x8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b10 1
b100 0
b0 /
b0 .
0-
1,
0+
b0 *
b0 )
b0 (
0'
0&
0%
b0 $
b0 #
b0 "
b0 !
$end
#50
0r7
0v7
0z7
0~7
0$8
0(8
0,8
008
048
088
0<8
0@8
0D8
0H8
0L8
0P8
0)7
0-7
017
057
097
0=7
0A7
0E7
0I7
0M7
0Q7
0U7
0Y7
0]7
0a7
0e7
b0 {6
b0 !7
b0 k7
024
044
0K
064
0T6
0W6
0U6
0\6
0_6
0]6
0c6
0f6
b0 M6
0d6
0,7
007
047
087
0<7
0@7
0D7
0H7
0L7
0P7
0T7
0X7
0\7
0`7
0d7
0h7
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#100
0h8
0l8
0p8
0t8
0x8
0|8
0"9
0&9
0*9
0.9
029
069
0:9
0>9
0B9
0F9
0P9
0T9
0X9
0\9
0`9
0d9
0h9
0l9
0p9
0t9
0x9
0|9
0":
0&:
0*:
0.:
08:
0<:
0@:
0D:
0H:
0L:
0P:
0T:
0X:
0\:
0`:
0d:
0h:
0l:
0p:
0t:
0~:
0$;
0(;
0,;
00;
04;
08;
0<;
0@;
0D;
0H;
0L;
0P;
0T;
0X;
0\;
0f;
0j;
0n;
0r;
0v;
0z;
0~;
0$<
0(<
0,<
00<
04<
08<
0<<
0@<
0D<
0N<
0R<
0V<
0Z<
0^<
0b<
0f<
0j<
0n<
0r<
0v<
0z<
0~<
0$=
0(=
0,=
06=
0:=
0>=
0B=
0F=
0J=
0N=
0R=
0V=
0Z=
0^=
0b=
0f=
0j=
0n=
0r=
0|=
0">
0&>
0*>
0.>
02>
06>
0:>
0>>
0B>
0F>
0J>
0N>
0R>
0V>
0Z>
0d>
0h>
0l>
0p>
0t>
0x>
0|>
0"?
0&?
0*?
0.?
02?
06?
0:?
0>?
0B?
0L?
0P?
0T?
0X?
0\?
0`?
0d?
0h?
0l?
0p?
0t?
0x?
0|?
0"@
0&@
0*@
04@
08@
0<@
0@@
0D@
0H@
0L@
0P@
0T@
0X@
0\@
0`@
0d@
0h@
0l@
0p@
0z@
0~@
0$A
0(A
0,A
00A
04A
08A
0<A
0@A
0DA
0HA
0LA
0PA
0TA
0XA
0bA
0fA
0jA
0nA
0rA
0vA
0zA
0~A
0$B
0(B
0,B
00B
04B
08B
0<B
0@B
0JB
0NB
0RB
0VB
0ZB
0^B
0bB
0fB
0jB
0nB
0rB
0vB
0zB
0~B
0$C
0(C
02C
06C
0:C
0>C
0BC
0FC
0JC
0NC
0RC
0VC
0ZC
0^C
0bC
0fC
0jC
0nC
0xC
0|C
0"D
0&D
0*D
0.D
02D
06D
0:D
0>D
0BD
0FD
0JD
0ND
0RD
0VD
b0 V8
b0 b8
b0 J9
b0 2:
b0 x:
b0 `;
b0 H<
b0 0=
b0 v=
b0 ^>
b0 F?
b0 .@
b0 t@
b0 \A
b0 DB
b0 ,C
b0 rC
0i8
0m8
0q8
0u8
0y8
0}8
0#9
0'9
0+9
0/9
039
079
0;9
0?9
0C9
0G9
0Q9
0U9
0Y9
0]9
0a9
0e9
0i9
0m9
0q9
0u9
0y9
0}9
0#:
0':
0+:
0/:
09:
0=:
0A:
0E:
0I:
0M:
0Q:
0U:
0Y:
0]:
0a:
0e:
0i:
0m:
0q:
0u:
0!;
0%;
0);
0-;
01;
05;
09;
0=;
0A;
0E;
0I;
0M;
0Q;
0U;
0Y;
0];
0g;
0k;
0o;
0s;
0w;
0{;
0!<
0%<
0)<
0-<
01<
05<
09<
0=<
0A<
0E<
0O<
0S<
0W<
0[<
0_<
0c<
0g<
0k<
0o<
0s<
0w<
0{<
0!=
0%=
0)=
0-=
07=
0;=
0?=
0C=
0G=
0K=
0O=
0S=
0W=
0[=
0_=
0c=
0g=
0k=
0o=
0s=
0}=
0#>
0'>
0+>
0/>
03>
07>
0;>
0?>
0C>
0G>
0K>
0O>
0S>
0W>
0[>
0e>
0i>
0m>
0q>
0u>
0y>
0}>
0#?
0'?
0+?
0/?
03?
07?
0;?
0??
0C?
0M?
0Q?
0U?
0Y?
0]?
0a?
0e?
0i?
0m?
0q?
0u?
0y?
0}?
0#@
0'@
0+@
05@
09@
0=@
0A@
0E@
0I@
0M@
0Q@
0U@
0Y@
0]@
0a@
0e@
0i@
0m@
0q@
0{@
0!A
0%A
0)A
0-A
01A
05A
09A
0=A
0AA
0EA
0IA
0MA
0QA
0UA
0YA
0cA
0gA
0kA
0oA
0sA
0wA
0{A
0!B
0%B
0)B
0-B
01B
05B
09B
0=B
0AB
0KB
0OB
0SB
0WB
0[B
0_B
0cB
0gB
0kB
0oB
0sB
0wB
0{B
0!C
0%C
0)C
03C
07C
0;C
0?C
0CC
0GC
0KC
0OC
0SC
0WC
0[C
0_C
0cC
0gC
0kC
0oC
0yC
0}C
0#D
0'D
0+D
0/D
03D
07D
0;D
0?D
0CD
0GD
0KD
0OD
0SD
0WD
b0 W8
b0 c8
b0 K9
b0 3:
b0 y:
b0 a;
b0 I<
b0 1=
b0 w=
b0 _>
b0 G?
b0 /@
b0 u@
b0 ]A
b0 EB
b0 -C
b0 sC
0_A
0a>
0c;
1e8
0`A
0b>
0d;
1f8
1."
0/C
01@
03=
05:
00C
02@
04=
06:
0uC
0GB
0w@
0I?
0y=
0K<
0{:
0M9
0vC
0HB
0x@
0J?
0z=
0L<
0|:
0N9
1/"
0Q6
0Y6
1a6
1[
0[&
0W&
0S&
0O&
0K&
0G&
0C&
0?&
0;&
07&
03&
0/&
0+&
0'&
0#&
0}%
b1 ]8
b1 _8
0A*
0C*
0E*
0G*
0B'
0>'
0:'
06'
02'
0.'
0*'
0&'
0"'
0|&
0x&
0t&
0p&
0l&
0h&
0d&
b1 \8
b1 a8
0N'
0R'
0V'
0Z'
0^'
0b'
0f'
0j'
0n'
0r'
0v'
0z'
0~'
0$(
0((
0,(
b1 m
b1 >"
b1 K6
04"
0f%
0h%
0j%
0l%
b0 y
b0 ]%
b0 z%
b0 [8
b0 S
b0 X%
0n%
0p%
0r%
0t%
b0 x
b0 \%
b0 a&
b0 Z8
b0 z
b0 P%
b0 I'
1S6
1[6
1Z%
0|
03"
1\
b0 !4
b0 R
b0 L%
b0 n6
b0 T8
b0 ^8
b0 Q
b0 M%
b0 U8
b0 `8
1J6
08
0=
0P
0}3
0{
02"
00"
01"
0-"
0z(
0~(
0$)
0()
0,)
00)
04)
08)
0<)
0@)
0D)
0H)
0L)
0P)
0T)
0X)
0a)
0e)
0i)
0m)
0q)
0u)
0y)
0})
0#*
0'*
0+*
0/*
03*
07*
0;*
0?*
b0 L6
b0 ^
b0 E2
b0 o6
0~3
b0 |3
05(
09(
0=(
0A(
0E(
0I(
0M(
0Q(
0U(
0Y(
0](
0a(
0e(
0i(
0m(
0q(
0#5
0'5
0+5
0/5
035
075
0;5
0?5
0C5
0G5
0K5
0O5
0S5
0W5
0[5
0_5
b0 ;
b0 T%
b0 u(
b0 +4
b0 |4
0h5
0l5
0p5
0t5
0x5
0|5
0"6
0&6
0*6
0.6
026
066
0:6
0>6
0B6
0F6
b0 <
b0 V%
b0 \)
b0 ,4
b0 c5
0<4
0@4
0D4
0H4
0L4
0P4
0T4
0X4
0\4
0`4
0d4
0h4
0l4
0p4
0t4
0x4
b0 :
b0 R%
b0 0(
b0 )4
b0 74
0&7
b1 .
0b5
0^5
0Z5
0V5
0R5
0N5
0J5
0F5
0B5
0>5
0:5
065
025
0.5
0*5
0&5
0I6
0E6
0A6
0=6
096
056
016
0-6
0)6
0%6
0!6
0{5
0w5
0s5
0o5
0k5
0{4
0w4
0s4
0o4
0k4
0g4
0c4
0_4
0[4
0W4
0S4
0O4
0K4
0G4
0C4
0?4
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#150
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#200
0&7
b10 .
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#201
x-4
0Y%
0X8
0L.
0R*
0%4
0R6
0Z6
0b6
0(7
0o7
1-
#250
xr7
xv7
xz7
x~7
x$8
x(8
x,8
x08
x48
x88
x<8
x@8
xD8
xH8
xL8
xP8
x)7
x-7
x17
x57
x97
x=7
xA7
xE7
xI7
xM7
xQ7
xU7
xY7
x]7
xa7
xe7
bx {6
bx !7
bx k7
1c6
1f6
x,7
x07
x47
x87
x<7
x@7
xD7
xH7
xL7
xP7
xT7
xX7
x\7
x`7
xd7
xh7
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#300
x53
xr3
xq3
xp3
xo3
x]3
xc3
xb3
xa3
x`3
xq2
xw2
xI2
x(3
x63
xP3
xJ2
xd2
xv2
x'3
xO3
xc2
xO2
xU2
xT2
xu2
x&3
xN3
xb2
xt2
x%3
xM3
xa2
xS2
xx2
xy2
xz2
x{2
x)3
x*3
x+3
x,3
xZ2
xX2
xY2
xe2
xf2
xg2
xh2
bx ^2
bx N2
bx m2
bx "3
bx X
bx H2
bx p2
bx 13
x;3
xA3
x@3
x[2
x\2
x]2
xW2
xi2
xj2
xk2
xl2
x|2
x}2
x~2
x!3
x-3
x.3
x/3
x03
bx r2
bx #3
bx P2
bx _2
x[&
xW&
xS&
xO&
xK&
xG&
xC&
x?&
x;&
x7&
x3&
x/&
x+&
x'&
x#&
x}%
xB'
x>'
x:'
x6'
x2'
x.'
x*'
x&'
x"'
x|&
xx&
xt&
xp&
xl&
xh&
xd&
xE5
xI5
xM5
xQ5
xU5
xY5
x]5
xa5
bx n2
x%5
x)5
x-5
x15
x?3
x55
x95
x=5
xA5
bx L2
bx y
bx ]%
bx z%
bx [8
bx x
bx \%
bx a&
bx Z8
bx0 Q2
bx `2
bx s2
bx $3
bx l3
bx \3
bx {3
bx J3
bx W
bx K2
bx 43
bx *4
bx ~4
bx :3
bx Y3
xK<
xc;
xh8
xl8
xp8
xt8
xx8
x|8
x"9
x&9
x*9
x.9
x29
x69
x:9
x>9
xB9
xF9
xP9
xT9
xX9
x\9
x`9
xd9
xh9
xl9
xp9
xt9
xx9
x|9
x":
x&:
x*:
x.:
x8:
x<:
x@:
xD:
xH:
xL:
xP:
xT:
xX:
x\:
x`:
xd:
xh:
xl:
xp:
xt:
x~:
x$;
x(;
x,;
x0;
x4;
x8;
x<;
x@;
xD;
xH;
xL;
xP;
xT;
xX;
x\;
xf;
xj;
xn;
xr;
xv;
xz;
x~;
x$<
x(<
x,<
x0<
x4<
x8<
x<<
x@<
xD<
xN<
xR<
xV<
xZ<
x^<
xb<
xf<
xj<
xn<
xr<
xv<
xz<
x~<
x$=
x(=
x,=
x6=
x:=
x>=
xB=
xF=
xJ=
xN=
xR=
xV=
xZ=
x^=
xb=
xf=
xj=
xn=
xr=
x|=
x">
x&>
x*>
x.>
x2>
x6>
x:>
x>>
xB>
xF>
xJ>
xN>
xR>
xV>
xZ>
xd>
xh>
xl>
xp>
xt>
xx>
x|>
x"?
x&?
x*?
x.?
x2?
x6?
x:?
x>?
xB?
xL?
xP?
xT?
xX?
x\?
x`?
xd?
xh?
xl?
xp?
xt?
xx?
x|?
x"@
x&@
x*@
x4@
x8@
x<@
x@@
xD@
xH@
xL@
xP@
xT@
xX@
x\@
x`@
xd@
xh@
xl@
xp@
xz@
x~@
x$A
x(A
x,A
x0A
x4A
x8A
x<A
x@A
xDA
xHA
xLA
xPA
xTA
xXA
xbA
xfA
xjA
xnA
xrA
xvA
xzA
x~A
x$B
x(B
x,B
x0B
x4B
x8B
x<B
x@B
xJB
xNB
xRB
xVB
xZB
x^B
xbB
xfB
xjB
xnB
xrB
xvB
xzB
x~B
x$C
x(C
x2C
x6C
x:C
x>C
xBC
xFC
xJC
xNC
xRC
xVC
xZC
x^C
xbC
xfC
xjC
xnC
xxC
x|C
x"D
x&D
x*D
x.D
x2D
x6D
x:D
x>D
xBD
xFD
xJD
xND
xRD
xVD
bx V8
bx b8
bx J9
bx 2:
bx x:
bx `;
bx H<
bx 0=
bx v=
bx ^>
bx F?
bx .@
bx t@
bx \A
bx DB
bx ,C
bx rC
xi8
xm8
xq8
xu8
xy8
x}8
x#9
x'9
x+9
x/9
x39
x79
x;9
x?9
xC9
xG9
xQ9
xU9
xY9
x]9
xa9
xe9
xi9
xm9
xq9
xu9
xy9
x}9
x#:
x':
x+:
x/:
x9:
x=:
xA:
xE:
xI:
xM:
xQ:
xU:
xY:
x]:
xa:
xe:
xi:
xm:
xq:
xu:
x!;
x%;
x);
x-;
x1;
x5;
x9;
x=;
xA;
xE;
xI;
xM;
xQ;
xU;
xY;
x];
xg;
xk;
xo;
xs;
xw;
x{;
x!<
x%<
x)<
x-<
x1<
x5<
x9<
x=<
xA<
xE<
xO<
xS<
xW<
x[<
x_<
xc<
xg<
xk<
xo<
xs<
xw<
x{<
x!=
x%=
x)=
x-=
x7=
x;=
x?=
xC=
xG=
xK=
xO=
xS=
xW=
x[=
x_=
xc=
xg=
xk=
xo=
xs=
x}=
x#>
x'>
x+>
x/>
x3>
x7>
x;>
x?>
xC>
xG>
xK>
xO>
xS>
xW>
x[>
xe>
xi>
xm>
xq>
xu>
xy>
x}>
x#?
x'?
x+?
x/?
x3?
x7?
x;?
x??
xC?
xM?
xQ?
xU?
xY?
x]?
xa?
xe?
xi?
xm?
xq?
xu?
xy?
x}?
x#@
x'@
x+@
x5@
x9@
x=@
xA@
xE@
xI@
xM@
xQ@
xU@
xY@
x]@
xa@
xe@
xi@
xm@
xq@
x{@
x!A
x%A
x)A
x-A
x1A
x5A
x9A
x=A
xAA
xEA
xIA
xMA
xQA
xUA
xYA
xcA
xgA
xkA
xoA
xsA
xwA
x{A
x!B
x%B
x)B
x-B
x1B
x5B
x9B
x=B
xAB
xKB
xOB
xSB
xWB
x[B
x_B
xcB
xgB
xkB
xoB
xsB
xwB
x{B
x!C
x%C
x)C
x3C
x7C
x;C
x?C
xCC
xGC
xKC
xOC
xSC
xWC
x[C
x_C
xcC
xgC
xkC
xoC
xyC
x}C
x#D
x'D
x+D
x/D
x3D
x7D
x;D
x?D
xCD
xGD
xKD
xOD
xSD
xWD
bx W8
bx c8
bx K9
bx 3:
bx y:
bx a;
bx I<
bx 1=
bx w=
bx _>
bx G?
bx /@
bx u@
bx ]A
bx EB
bx -C
bx sC
x."
bx0 M2
bx o2
xh3
xi3
xj3
xk3
xw3
xx3
xy3
xz3
xF3
xG3
xH3
xI3
xC3
xU3
xV3
xW3
xX3
xz4
xv4
xr4
xn4
xj4
xf4
xb4
x^4
xZ4
xV4
xR4
xN4
xJ4
xF4
xB4
x>4
x14
bx0 _
bx0 F2
xK
xM9
xe8
xN9
xf8
xN'
xR'
x^'
xf'
x/"
x[
bx Z
bx 04
bx ;4
bx t6
bx ^3
bx m3
bx <3
bx K3
b0xx00xx ]8
b0xx00xx _8
b0xx \8
b0xx a8
b0x0x00xx z
b0x0x00xx P%
b0x0x00xx I'
x4"
xH6
xD6
x@6
x<6
x86
x46
x06
x,6
x(6
x$6
x~5
xz5
xv5
xr5
xn5
xj5
bx Z3
bx 83
xf%
xj%
xn%
xA*
xS6
x[6
xZ%
x3"
x\
b0x0 !4
bx V
bx 73
bx /4
bx g5
bx u6
bx ~6
b0x0x R
b0x0x L%
b0x0x n6
b0x0x T8
b0x0x ^8
b0x Q
b0x M%
b0x U8
b0x `8
b0x S
b0x X%
xJ6
x8
x=
xP
x2"
x0"
1g8
x~(
b0x0 L6
bx0x0 o6
bx0x0 |3
x5(
xE(
xM(
xU(
xi(
xq(
zo,
zs,
zw,
z{,
z!-
z%-
z)-
z--
z1-
z5-
z9-
z=-
zA-
zE-
zI-
zM-
bz A
bz O*
bz j,
b1 Y8
b1 [D
xp7
xt7
xx7
x|7
x"8
x&8
x*8
x.8
x28
x68
x:8
x>8
xB8
xF8
xJ8
xN8
bx |6
bx i7
x'5
b0x0 ;
b0x0 T%
b0x0 u(
b0x0 +4
b0x0 |4
x<4
xL4
xT4
x\4
xp4
xx4
bx0x0000x0x0x000x :
bx0x0000x0x0x000x R%
bx0x0000x0x0x000x 0(
bx0x0000x0x0x000x )4
bx0x0000x0x0x000x 74
0&7
b11 .
b1 /
zP-
zL-
zH-
zD-
z@-
z<-
z8-
z4-
z0-
z,-
z(-
z$-
z~,
zz,
zv,
zr,
1u
z+
zs
zf
z(0
1'
1h
z""
zF'
1'"
1c%
1&"
1d%
xQ8
xM8
xI8
xE8
xA8
x=8
x98
x58
x18
x-8
x)8
x%8
x!8
x{7
xw7
xs7
x*5
x{4
xs4
x_4
xW4
xO4
x?4
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#350
b0x n
b0x D2
xN6
x24
x44
b0x M6
xd6
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#400
x1$
x7$
xB#
xF$
x6$
xE$
x5$
xD$
bx @#
x<#
x4$
xC$
x9#
x;#
xQ6
x8$
x9$
x:$
x;$
xI#
xO#
xG$
xH$
xI$
xJ$
xD#
x^#
x:#
xN#
x]#
xR"
xX"
xQ"
xh"
xP"
xx"
xO"
x*#
x>$
x?$
xl#
xr#
xL$
xN$
xC#
x#$
xa$
xg$
x`$
xv$
x_$
x'%
x^$
x6%
xY6
bx 2$
xM#
bx A$
x\#
xW"
xg"
xw"
x)#
xu$
x"$
xq#
xf$
x&%
x="
x5%
bx @$
bx C"
bx A#
bx >#
bx 0$
bx O$
bx X#
xL#
bx ?#
bx H#
bx -$
bx g#
x[#
xV"
xf"
xv"
x(#
xe$
bx 7"
bx A"
bx K%
xp#
x!$
bx L"
xt$
x%%
x4%
x<$
x=$
xK$
xM$
xT#
xU#
xV#
xW#
xP#
xQ#
xR#
xS#
xc#
xd#
xe#
xf#
x_#
x`#
xa#
xb#
xU"
xe"
xu"
x'#
bx B"
bx Q$
bx S$
xd$
xs$
bx G%
bx C%
xo#
x~#
bx 0%
x$%
bx ?%
x3%
xuC
x/C
xGB
x_A
xw@
x1@
xI?
xa>
xvC
x0C
xHB
x`A
xx@
x2@
xJ?
xb>
xz=
x4=
xL<
xd;
bx D"
bx N"
x@"
bx E"
bx ]$
xa6
xZ"
x["
x\"
x]"
xj"
xk"
xl"
xm"
xz"
x{"
x|"
x}"
x,#
x-#
x.#
x/#
bx M"
bx T$
xh$
xi$
xw$
xy$
x?"
bx H%
bx D%
xs#
xt#
x$$
x&$
xy#
xz#
xu#
xv#
x)$
x+$
x%$
x'$
bx I"
bx $#
bx H"
bx 4#
xn$
xo$
xj$
xk$
x|$
x~$
xx$
xz$
x,%
x-%
x.%
x/%
x(%
x)%
x*%
x+%
x;%
x<%
x=%
x>%
x7%
x8%
x9%
x:%
xy=
x3=
x{:
x5:
x|:
x6:
bx 3$
bx B$
xW.
x[.
x_.
xc.
xg.
xk.
xo.
xs.
xw.
x{.
x!/
x%/
x)/
x-/
x1/
x5/
bx m
bx >"
bx K6
bx J#
bx Y#
bx K#
bx Z#
bx U$
bx I%
bx E%
x`"
xa"
xo"
xq"
x~"
x!#
x"#
x##
x0#
x1#
x2#
x3#
bx ]8
bx _8
bx \8
bx a8
bx {#
bx =#
bx k#
bx .$
bx ,$
bx p$
bx [$
bx !%
bx l
bx <"
bx @.
bx R.
bx :"
bx 5#
bx E#
bx 6#
bx F#
bx S"
bx c"
bx s"
bx %#
bx V$
bx b$
bx q$
bx "%
bx 1%
bx J%
bx F%
bx m#
bx |#
bx #%
bx 2%
xV'
xZ'
xb'
xj'
xn'
xr'
xv'
xz'
x~'
x$(
x((
x,(
xw#
xx#
x($
x*$
bx K"
bx b"
bx J"
bx r"
xl$
xm$
x{$
x}$
bx a
bx 5"
bx F"
bx P$
bx W$
bx A%
bx 7#
bx h#
bx t"
bx &#
xP/
xT/
x\/
xd/
xh/
xl/
xp/
xt/
xx/
x|/
x"0
x&0
xh%
xl%
xp%
xr%
xt%
bx z
bx P%
bx I'
xC*
xE*
xG*
x|
bx !4
x^"
x_"
xn"
xp"
bx R
bx L%
bx n6
bx T8
bx ^8
bx Q
bx M%
bx U8
bx `8
bx S
bx X%
x}3
x{
x1"
x-"
bx n#
bx }#
bx c$
bx r$
bx U
bx T
bx L6
bx ^
bx E2
bx o6
x~3
bx |3
x9(
x=(
xA(
xI(
xQ(
xY(
x](
xa(
xe(
xm(
xa)
xe)
xi)
xm)
xq)
xu)
xy)
x})
x#*
x'*
x+*
x/*
x3*
x7*
x;*
x?*
xz(
x$)
x()
x,)
x0)
x4)
x8)
x<)
x@)
xD)
xH)
xL)
xP)
xT)
xX)
x;"
bx 8"
bx 8#
bx i#
bx B%
bx R$
bx T"
bx d"
bx Y$
bx \$
xH/
xL/
xX/
x`/
xc
xb
b0x0 9"
x00
x@0
xH0
xP0
xd0
xl0
xy0
x@4
xD4
xH4
xP4
xX4
x`4
xd4
xh4
xl4
xt4
bx :
bx R%
bx 0(
bx )4
bx 74
xh5
xl5
xp5
xt5
xx5
x|5
x"6
x&6
x*6
x.6
x26
x66
x:6
x>6
xB6
xF6
bx <
bx V%
bx \)
bx ,4
bx c5
x#5
x+5
x/5
x35
x75
x;5
x?5
xC5
xG5
xK5
xO5
xS5
xW5
x[5
x_5
bx ;
bx T%
bx u(
bx +4
bx |4
bx `
bx 6"
bx G"
bx X$
bx C.
bx C/
x<2
x9/
x3(
xC(
xK(
xS(
xg(
xo(
bx0x0000x0x0x000x 3
bx0x0000x0x0x000x S%
bx0x0000x0x0x000x .(
bx0x0000x0x0x000x E.
bx0x0000x0x0x000x +0
x{%
x!&
x%&
x)&
x-&
x1&
x5&
x9&
x=&
xA&
xE&
xI&
xM&
xQ&
xU&
xY&
bx 6
bx N%
bx v%
xb&
xf&
xj&
xn&
xr&
xv&
xz&
x~&
x$'
x('
x,'
x0'
x4'
x8'
x<'
x@'
bx 7
bx O%
bx ]&
xL'
xP'
x\'
xd'
b0x0x00xx 2
b0x0x00xx Q%
b0x0x00xx G'
x|(
xw0
b0x0 4
b0x0 U%
b0x0 s(
b0x0 G.
b0x0 H.
b0x0 n0
b0x0 p0
0&7
xC4
xG4
xK4
xS4
x[4
xc4
xg4
xk4
xo4
xw4
xk5
xo5
xs5
xw5
x{5
x!6
x%6
x)6
x-6
x16
x56
x96
x=6
xA6
xE6
xI6
x&5
x.5
x25
x65
x:5
x>5
xB5
xF5
xJ5
xN5
xR5
xV5
xZ5
x^5
xb5
x,"
x("
xb%
x&"
xd%
x*"
x`%
x'"
xc%
x+"
b0x !"
b0x [%
b0x K.
b0x m6
xB*
xg%
b0x0x ~
b0x0x _%
b0x0x h6
xk%
b0x }
b0x ^%
b0x B.
b0x i6
xo%
x6(
xF(
xN(
xV(
xj(
xr(
x~%
x$&
x(&
x,&
x0&
x4&
x8&
x<&
x@&
xD&
xH&
xL&
xP&
xT&
xX&
x\&
xe&
xi&
xm&
xq&
xu&
xy&
x}&
x#'
x''
x+'
x/'
x3'
x7'
x;'
x?'
xC'
xO'
xS'
x_'
xg'
x!)
b10 /
b100 .
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#450
x64
xT6
xW6
x\6
x_6
xc6
xf6
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#500
xh,
xd,
x`,
x\,
xX,
xT,
xP,
xL,
xH,
xD,
x@,
x<,
x8,
x4,
x0,
x,,
xj8
xn8
xr8
xv8
xz8
x~8
x$9
x(9
x,9
x09
x49
x89
x<9
x@9
xD9
xH9
xR9
xV9
xZ9
x^9
xb9
xf9
xj9
xn9
xr9
xv9
xz9
x~9
x$:
x(:
x,:
x0:
x::
x>:
xB:
xF:
xJ:
xN:
xR:
xV:
xZ:
x^:
xb:
xf:
xj:
xn:
xr:
xv:
x";
x&;
x*;
x.;
x2;
x6;
x:;
x>;
xB;
xF;
xJ;
xN;
xR;
xV;
xZ;
x^;
xh;
xl;
xp;
xt;
xx;
x|;
x"<
x&<
x*<
x.<
x2<
x6<
x:<
x><
xB<
xF<
xP<
xT<
xX<
x\<
x`<
xd<
xh<
xl<
xp<
xt<
xx<
x|<
x"=
x&=
x*=
x.=
x8=
x<=
x@=
xD=
xH=
xL=
xP=
xT=
xX=
x\=
x`=
xd=
xh=
xl=
xp=
xt=
x~=
x$>
x(>
x,>
x0>
x4>
x8>
x<>
x@>
xD>
xH>
xL>
xP>
xT>
xX>
x\>
xf>
xj>
xn>
xr>
xv>
xz>
x~>
x$?
x(?
x,?
x0?
x4?
x8?
x<?
x@?
xD?
xN?
xR?
xV?
xZ?
x^?
xb?
xf?
xj?
xn?
xr?
xv?
xz?
x~?
x$@
x(@
x,@
x6@
x:@
x>@
xB@
xF@
xJ@
xN@
xR@
xV@
xZ@
x^@
xb@
xf@
xj@
xn@
xr@
x|@
x"A
x&A
x*A
x.A
x2A
x6A
x:A
x>A
xBA
xFA
xJA
xNA
xRA
xVA
xZA
xdA
xhA
xlA
xpA
xtA
xxA
x|A
x"B
x&B
x*B
x.B
x2B
x6B
x:B
x>B
xBB
xLB
xPB
xTB
xXB
x\B
x`B
xdB
xhB
xlB
xpB
xtB
xxB
x|B
x"C
x&C
x*C
x4C
x8C
x<C
x@C
xDC
xHC
xLC
xPC
xTC
xXC
x\C
x`C
xdC
xhC
xlC
xpC
xzC
x~C
x$D
x(D
x,D
x0D
x4D
x8D
x<D
x@D
xDD
xHD
xLD
xPD
xTD
xXD
bx $
bx o
bx V*
bx ),
bx &4
xZ$
x@%
bx (
bx O
bx R8
bx d8
bx L9
bx 4:
bx z:
bx b;
bx J<
bx 2=
bx x=
bx `>
bx H?
bx 0@
bx v@
bx ^A
bx FB
bx .C
bx tC
xg8
x^*
xb*
xf*
xj*
xn*
xr*
xv*
xz*
x~*
x$+
x(+
x,+
x0+
x4+
x8+
x<+
bx #
bx Y
bx #4
xE+
xU+
x]+
xe+
xy+
x#,
xu0
x}0
x#1
x'1
x+1
x/1
x31
x71
x;1
x?1
xC1
xG1
xK1
xO1
xS1
x\1
x`1
xd1
xh1
xl1
xp1
xt1
xx1
x|1
x"2
x&2
x*2
x.2
x22
x62
x:2
bx 9"
x40
x80
x<0
xD0
xL0
xT0
xX0
x\0
x`0
xh0
b0x Y8
b0x [D
xU.
xY.
x].
xa.
xe.
xi.
xm.
xq.
xu.
xy.
x}.
x#/
x'/
x+/
x//
x3/
bx "
bx H
bx "4
bx C
bx I*
bx Y*
bx A.
bx P.
xF/
xJ/
xN/
xR/
xV/
xZ/
x^/
xb/
xf/
xj/
xn/
xr/
xv/
xz/
x~/
x$0
bx D
bx D.
bx A/
x.0
x>0
xF0
xN0
xb0
xj0
bx0x0000x0x0x000x !
bx0x0000x0x0x000x E
bx0x0000x0x0x000x K*
bx0x0000x0x0x000x @+
bx0x0000x0x0x000x F.
bx0x0000x0x0x000x )0
x8.
x$4
xx(
x")
x&)
x*)
x.)
x2)
x6)
x:)
x>)
xB)
xF)
xJ)
xN)
xR)
xV)
xs0
x{0
x!1
x%1
x)1
x-1
x11
x51
x91
x=1
xA1
xE1
xI1
xM1
xQ1
bx 4
bx U%
bx s(
bx G.
bx H.
bx n0
bx p0
x_)
xc)
xg)
xk)
xo)
xs)
xw)
x{)
x!*
x%*
x)*
x-*
x1*
x5*
x9*
x=*
bx 5
bx W%
bx Z)
bx I.
bx W1
xT'
xX'
x`'
xh'
xl'
xp'
xt'
xx'
x|'
x"(
x&(
x*(
bx 2
bx Q%
bx G'
x7(
x;(
x?(
xG(
xO(
xW(
x[(
x_(
xc(
xk(
bx 3
bx S%
bx .(
bx E.
bx +0
x?/
x=/
x;/
xB2
x@2
x>2
0&7
b101 .
xt
xu
xv
xz0
x6/
x2/
x./
x*/
x&/
x"/
x|.
xx.
xt.
xp.
xl.
xh.
xd.
x`.
x\.
xX.
x'0
x#0
x}/
xy/
xu/
xq/
xm/
xi/
xe/
xa/
x]/
xY/
xU/
xQ/
xM/
xI/
xm0
xe0
xQ0
xI0
xA0
x10
b0x d
b0x O.
b0x l6
x:/
b0x )
b0x e
b0x U*
b0x N.
b0x k6
x=2
xg
x8/
xi
x7/
x&
xj
x%
xk
x'
xh
xY)
xU)
xQ)
xM)
xI)
xE)
xA)
x=)
x9)
x5)
x1)
x-)
x))
x%)
x{(
x@*
x<*
x8*
x4*
x0*
x,*
x(*
x$*
x~)
xz)
xv)
xr)
xn)
xj)
xf)
xb)
x-(
x)(
x%(
x!(
x{'
xw'
xs'
xo'
xk'
xc'
x['
xW'
xn(
xf(
xb(
x^(
xZ(
xR(
xJ(
xB(
x>(
x:(
xu%
xs%
bx }
bx ^%
bx B.
bx i6
xq%
xm%
bx ~
bx _%
bx h6
xi%
xH*
xF*
bx !"
bx [%
bx K.
bx m6
xD*
x%"
xe%
x#"
xE'
x$"
xD'
x)"
xa%
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#550
xP6
bx n
bx D2
xO6
xU6
bx M6
x]6
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#600
xO9
b0xx Y8
b0xx [D
xI+
xM+
xQ+
xY+
xa+
xi+
xm+
xq+
xu+
x}+
xX-
x\-
x`-
xd-
xh-
xl-
xp-
xt-
xx-
x|-
x".
x&.
x*.
x..
x2.
x6.
xw
xq
xp
x:.
x<.
x>.
x20
x60
x:0
xB0
xJ0
xR0
xV0
xZ0
x^0
xf0
bx !
bx E
bx K*
bx @+
bx F.
bx )0
xZ1
x^1
xb1
xf1
xj1
xn1
xr1
xv1
xz1
x~1
x$2
x(2
x,2
x02
x42
x82
bx G
bx P*
bx S-
bx J.
bx U1
xC+
xS+
x[+
xc+
xw+
x!,
bx0x0000x0x0x000x ?
bx0x0000x0x0x000x L*
bx0x0000x0x0x000x >+
x*,
x.,
x2,
x6,
x:,
x>,
xB,
xF,
xJ,
xN,
xR,
xV,
xZ,
x^,
xb,
xf,
bx @
bx M*
bx %,
x\*
x`*
xd*
xh*
xl*
xp*
xt*
xx*
x|*
x"+
x&+
x*+
x.+
x2+
x6+
x:+
bx >
bx J*
bx W*
0&7
xk8
xo8
xs8
xw8
x{8
x!9
x%9
x)9
x-9
x19
x59
x99
x=9
xA9
xE9
xI9
x?2
xA2
bx )
bx e
bx U*
bx N.
bx k6
xC2
x</
x>/
bx d
bx O.
bx l6
x@/
x50
x90
x=0
xE0
xM0
xU0
xY0
x]0
xa0
xi0
x]1
xa1
xe1
xi1
xm1
xq1
xu1
xy1
x}1
x#2
x'2
x+2
x/2
x32
x72
x;2
xv0
x~0
x$1
x(1
x,1
x01
x41
x81
x<1
x@1
xD1
xH1
xL1
xP1
xT1
b0x r
b0x T*
b0x j6
b0x S8
b0x ZD
x9.
xF+
xV+
x^+
xf+
xz+
x$,
x-,
x1,
x5,
x9,
x=,
xA,
xE,
xI,
xM,
xQ,
xU,
xY,
x],
xa,
xe,
xi,
x_*
xc*
xg*
xk*
xo*
xs*
xw*
x{*
x!+
x%+
x)+
x-+
x1+
x5+
x9+
x=+
b110 .
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#650
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#700
xwC
x1C
xIB
xaA
xy@
x3@
xK?
xc>
x{=
x5=
xM<
xe;
x}:
x7:
bx Y8
bx [D
xV-
xZ-
x^-
xb-
xf-
xj-
xn-
xr-
xv-
xz-
x~-
x$.
x(.
x,.
x0.
x4.
bx *
bx M
bx B
bx Q*
bx Q-
xG+
xK+
xO+
xW+
x_+
xg+
xk+
xo+
xs+
x{+
bx ?
bx L*
bx >+
0&7
b111 .
x7.
x3.
x/.
x+.
x'.
x#.
x}-
xy-
xu-
xq-
xm-
xi-
xe-
xa-
x]-
xY-
x~+
xv+
xr+
xn+
xj+
xb+
xZ+
xR+
xN+
xJ+
x?.
x=.
bx r
bx T*
bx j6
bx S8
bx ZD
x;.
x1:
x-:
x):
x%:
x!:
x{9
xw9
xs9
xo9
xk9
xg9
xc9
x_9
x[9
xW9
xS9
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#750
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#800
0&7
x;:
x?:
xC:
xG:
xK:
xO:
xS:
xW:
x[:
x_:
xc:
xg:
xk:
xo:
xs:
xw:
x#;
x';
x+;
x/;
x3;
x7;
x;;
x?;
xC;
xG;
xK;
xO;
xS;
xW;
x[;
x_;
xi;
xm;
xq;
xu;
xy;
x};
x#<
x'<
x+<
x/<
x3<
x7<
x;<
x?<
xC<
xG<
xQ<
xU<
xY<
x]<
xa<
xe<
xi<
xm<
xq<
xu<
xy<
x}<
x#=
x'=
x+=
x/=
x9=
x==
xA=
xE=
xI=
xM=
xQ=
xU=
xY=
x]=
xa=
xe=
xi=
xm=
xq=
xu=
x!>
x%>
x)>
x->
x1>
x5>
x9>
x=>
xA>
xE>
xI>
xM>
xQ>
xU>
xY>
x]>
xg>
xk>
xo>
xs>
xw>
x{>
x!?
x%?
x)?
x-?
x1?
x5?
x9?
x=?
xA?
xE?
xO?
xS?
xW?
x[?
x_?
xc?
xg?
xk?
xo?
xs?
xw?
x{?
x!@
x%@
x)@
x-@
x7@
x;@
x?@
xC@
xG@
xK@
xO@
xS@
xW@
x[@
x_@
xc@
xg@
xk@
xo@
xs@
x}@
x#A
x'A
x+A
x/A
x3A
x7A
x;A
x?A
xCA
xGA
xKA
xOA
xSA
xWA
x[A
xeA
xiA
xmA
xqA
xuA
xyA
x}A
x#B
x'B
x+B
x/B
x3B
x7B
x;B
x?B
xCB
xMB
xQB
xUB
xYB
x]B
xaB
xeB
xiB
xmB
xqB
xuB
xyB
x}B
x#C
x'C
x+C
x5C
x9C
x=C
xAC
xEC
xIC
xMC
xQC
xUC
xYC
x]C
xaC
xeC
xiC
xmC
xqC
x{C
x!D
x%D
x)D
x-D
x1D
x5D
x9D
x=D
xAD
xED
xID
xMD
xQD
xUD
xYD
b1000 .
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#850
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#900
0&7
b1001 .
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#950
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#1000
0&7
b1010 .
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
#1050
x&7
134
154
1V6
1X6
1^6
1`6
1e6
1g6
1'7
0n7
0,
#1100
0&7
b1011 .
034
054
0V6
0X6
0^6
0`6
0e6
0g6
0'7
xn7
1,
