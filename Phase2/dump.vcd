$date
	Mon Apr  8 08:44:19 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_ptb $end
$var wire 16 ! Inst [15:0] $end
$var wire 16 " MemAddress [15:0] $end
$var wire 16 # MemDataIn [15:0] $end
$var wire 16 $ MemDataOut [15:0] $end
$var wire 1 % MemRead $end
$var wire 1 & MemWrite $end
$var wire 1 ' RegWrite $end
$var wire 16 ( WriteData [15:0] $end
$var wire 4 ) WriteRegister [3:0] $end
$var wire 16 * PC [15:0] $end
$var wire 1 + Halt $end
$var reg 1 , clk $end
$var reg 1 - rst_n $end
$var integer 32 . cycle_count [31:0] $end
$var integer 32 / inst_count [31:0] $end
$var integer 32 0 sim_log_file [31:0] $end
$var integer 32 1 trace_file [31:0] $end
$scope module DUT $end
$var wire 16 2 D_X_imm [15:0] $end
$var wire 16 3 D_X_instruction [15:0] $end
$var wire 16 4 D_X_newPC [15:0] $end
$var wire 16 5 D_X_oldPC [15:0] $end
$var wire 16 6 D_X_reg1 [15:0] $end
$var wire 16 7 D_X_reg2 [15:0] $end
$var wire 1 8 D_stall $end
$var wire 16 9 F_D_instruction [15:0] $end
$var wire 16 : F_D_newPC [15:0] $end
$var wire 16 ; F_D_oldPC [15:0] $end
$var wire 1 < F_stall $end
$var wire 16 = M_W_ALUOut [15:0] $end
$var wire 16 > M_W_instruction [15:0] $end
$var wire 16 ? M_W_mem [15:0] $end
$var wire 16 @ M_W_newPC [15:0] $end
$var wire 16 A M_W_oldPC [15:0] $end
$var wire 16 B X_M_ALUOut [15:0] $end
$var wire 16 C X_M_aluB [15:0] $end
$var wire 16 D X_M_instruction [15:0] $end
$var wire 16 E X_M_newPC [15:0] $end
$var wire 16 F X_M_oldPC [15:0] $end
$var wire 16 G addr [15:0] $end
$var wire 1 , clk $end
$var wire 1 H flush $end
$var wire 1 + hlt $end
$var wire 16 I pc [15:0] $end
$var wire 1 - rst_n $end
$var wire 16 J writeback_data [15:0] $end
$var wire 1 K stall $end
$var wire 4 L reg_source2 [3:0] $end
$var wire 4 M reg_source1 [3:0] $end
$var wire 4 N reg_dest [3:0] $end
$var wire 16 O reg2Forward [15:0] $end
$var wire 16 P reg1Forward [15:0] $end
$var wire 16 Q programCount [15:0] $end
$var wire 16 R pcInc [15:0] $end
$var wire 16 S pcBranch [15:0] $end
$var wire 16 T nextPC [15:0] $end
$var wire 16 U memData_In [15:0] $end
$var wire 16 V instruction [15:0] $end
$var wire 1 W halt $end
$var wire 1 X flagZ $end
$var wire 1 Y flagNV $end
$var wire 1 Z do_branch $end
$var wire 3 [ cond [2:0] $end
$var wire 16 \ branchAdd [15:0] $end
$var wire 16 ] aluB [15:0] $end
$var wire 16 ^ aluA [15:0] $end
$var wire 1 _ X_X_B_en $end
$var wire 1 ` X_X_A_en $end
$var wire 4 a X_M_reg_source2 [3:0] $end
$var wire 4 b X_M_reg_dest [3:0] $end
$var wire 1 c X_M_halt $end
$var wire 1 d X_M_SavePC $end
$var wire 1 e X_M_RegWrite $end
$var wire 1 f X_M_MemtoReg $end
$var wire 1 g X_M_MemWrite $end
$var wire 1 h X_M_MemRead $end
$var wire 16 i X_ALUOut [15:0] $end
$var wire 3 j NVZflag [2:0] $end
$var wire 3 k NVZ_out [2:0] $end
$var wire 16 l M_mem [15:0] $end
$var wire 1 m M_X_B_en $end
$var wire 1 n M_X_A_en $end
$var wire 4 o M_W_reg_dest [3:0] $end
$var wire 1 p M_W_halt $end
$var wire 1 q M_W_SavePC $end
$var wire 1 r M_W_RegWrite $end
$var wire 1 s M_W_MemtoReg $end
$var wire 1 t M_M_B_en $end
$var wire 1 u F_D_halt $end
$var wire 16 v D_reg2 [15:0] $end
$var wire 16 w D_reg1 [15:0] $end
$var wire 16 x D_imm [15:0] $end
$var wire 1 y D_branch_src $end
$var wire 1 z D_branch_inst $end
$var wire 4 { D_X_reg_source2 [3:0] $end
$var wire 4 | D_X_reg_source1 [3:0] $end
$var wire 4 } D_X_reg_dest [3:0] $end
$var wire 1 ~ D_X_halt $end
$var wire 1 !" D_X_branch_src $end
$var wire 1 "" D_X_branch_inst $end
$var wire 1 #" D_X_SavePC $end
$var wire 1 $" D_X_RegWrite $end
$var wire 1 %" D_X_RegDst $end
$var wire 1 &" D_X_MemtoReg $end
$var wire 1 '" D_X_MemWrite $end
$var wire 1 (" D_X_MemRead $end
$var wire 1 )" D_X_LoadPartial $end
$var wire 1 *" D_X_ALUsrc $end
$var wire 1 +" D_SavePC $end
$var wire 1 ," D_RegWrite $end
$var wire 1 -" D_RegDst $end
$var wire 1 ." D_MemtoReg $end
$var wire 1 /" D_MemWrite $end
$var wire 1 0" D_MemRead $end
$var wire 1 1" D_LoadPartial $end
$var wire 1 2" D_ALUsrc $end
$scope module ALU0 $end
$var wire 16 3" A [15:0] $end
$var wire 16 4" B [15:0] $end
$var wire 16 5" SRA_result [15:0] $end
$var wire 16 6" XOR_result [15:0] $end
$var wire 3 7" opcode [2:0] $end
$var wire 3 8" tempNVZ [2:0] $end
$var wire 1 9" temp $end
$var wire 16 :" result [15:0] $end
$var wire 1 ;" posOvfl $end
$var wire 3 <" nvz_flags [2:0] $end
$var wire 1 =" negOvfl $end
$var wire 1 >" ifZero $end
$var wire 1 X flagZ $end
$var wire 1 Y flagNV $end
$var wire 16 ?" SLL_result [15:0] $end
$var wire 16 @" ROR_result [15:0] $end
$var wire 16 A" RED_result [15:0] $end
$var wire 16 B" PADDSB_result [15:0] $end
$var wire 16 C" ADDSUB_result [15:0] $end
$scope module iPA_0 $end
$var wire 16 D" A [15:0] $end
$var wire 16 E" B [15:0] $end
$var wire 4 F" tempHalfByte3 [3:0] $end
$var wire 4 G" tempHalfByte2 [3:0] $end
$var wire 4 H" tempHalfByte1 [3:0] $end
$var wire 4 I" tempHalfByte0 [3:0] $end
$var wire 4 J" posOvfl [3:0] $end
$var wire 4 K" negOvfl [3:0] $end
$var wire 16 L" Sum [15:0] $end
$var wire 1 M" Cout3 $end
$var wire 1 N" Cout2 $end
$var wire 1 O" Cout1 $end
$var wire 1 P" Cout0 $end
$scope module CLA4_0 $end
$var wire 4 Q" A [3:0] $end
$var wire 4 R" B [3:0] $end
$var wire 1 S" C0 $end
$var wire 1 T" C1 $end
$var wire 1 U" C2 $end
$var wire 1 V" C3 $end
$var wire 1 W" Cin $end
$var wire 1 P" Cout $end
$var wire 1 X" G0 $end
$var wire 1 Y" G1 $end
$var wire 1 Z" G2 $end
$var wire 1 [" G3 $end
$var wire 1 \" P0 $end
$var wire 1 ]" P1 $end
$var wire 1 ^" P2 $end
$var wire 1 _" P3 $end
$var wire 4 `" Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 a" A [3:0] $end
$var wire 4 b" B [3:0] $end
$var wire 1 c" C0 $end
$var wire 1 d" C1 $end
$var wire 1 e" C2 $end
$var wire 1 f" C3 $end
$var wire 1 g" Cin $end
$var wire 1 O" Cout $end
$var wire 1 h" G0 $end
$var wire 1 i" G1 $end
$var wire 1 j" G2 $end
$var wire 1 k" G3 $end
$var wire 1 l" P0 $end
$var wire 1 m" P1 $end
$var wire 1 n" P2 $end
$var wire 1 o" P3 $end
$var wire 4 p" Sum [3:0] $end
$upscope $end
$scope module CLA4_2 $end
$var wire 4 q" A [3:0] $end
$var wire 4 r" B [3:0] $end
$var wire 1 s" C0 $end
$var wire 1 t" C1 $end
$var wire 1 u" C2 $end
$var wire 1 v" C3 $end
$var wire 1 w" Cin $end
$var wire 1 N" Cout $end
$var wire 1 x" G0 $end
$var wire 1 y" G1 $end
$var wire 1 z" G2 $end
$var wire 1 {" G3 $end
$var wire 1 |" P0 $end
$var wire 1 }" P1 $end
$var wire 1 ~" P2 $end
$var wire 1 !# P3 $end
$var wire 4 "# Sum [3:0] $end
$upscope $end
$scope module CLA4_3 $end
$var wire 4 ## A [3:0] $end
$var wire 4 $# B [3:0] $end
$var wire 1 %# C0 $end
$var wire 1 &# C1 $end
$var wire 1 '# C2 $end
$var wire 1 (# C3 $end
$var wire 1 )# Cin $end
$var wire 1 M" Cout $end
$var wire 1 *# G0 $end
$var wire 1 +# G1 $end
$var wire 1 ,# G2 $end
$var wire 1 -# G3 $end
$var wire 1 .# P0 $end
$var wire 1 /# P1 $end
$var wire 1 0# P2 $end
$var wire 1 1# P3 $end
$var wire 4 2# Sum [3:0] $end
$upscope $end
$upscope $end
$scope module iRED_0 $end
$var wire 8 3# A [7:0] $end
$var wire 8 4# B [7:0] $end
$var wire 8 5# C [7:0] $end
$var wire 8 6# D [7:0] $end
$var wire 1 7# bit8C $end
$var wire 1 8# bit8Layer1 $end
$var wire 1 9# bit8Layer2 $end
$var wire 1 :# ms $end
$var wire 8 ;# sumCD [7:0] $end
$var wire 8 <# sumABCD [7:0] $end
$var wire 8 =# sumAB [7:0] $end
$var wire 7 ># header [6:0] $end
$var wire 16 ?# Sum_ABCD [15:0] $end
$var wire 1 @# Cout2 $end
$var wire 1 A# Cout1 $end
$var wire 1 B# Cout0 $end
$scope module CLA8_0 $end
$var wire 8 C# A [7:0] $end
$var wire 8 D# B [7:0] $end
$var wire 1 E# Cin $end
$var wire 8 F# Sum [7:0] $end
$var wire 1 B# Cout $end
$var wire 1 G# C0 $end
$scope module CLA4_0 $end
$var wire 4 H# A [3:0] $end
$var wire 4 I# B [3:0] $end
$var wire 1 J# C0 $end
$var wire 1 K# C1 $end
$var wire 1 L# C2 $end
$var wire 1 M# C3 $end
$var wire 1 E# Cin $end
$var wire 1 G# Cout $end
$var wire 1 N# G0 $end
$var wire 1 O# G1 $end
$var wire 1 P# G2 $end
$var wire 1 Q# G3 $end
$var wire 1 R# P0 $end
$var wire 1 S# P1 $end
$var wire 1 T# P2 $end
$var wire 1 U# P3 $end
$var wire 4 V# Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 W# A [3:0] $end
$var wire 4 X# B [3:0] $end
$var wire 1 Y# C0 $end
$var wire 1 Z# C1 $end
$var wire 1 [# C2 $end
$var wire 1 \# C3 $end
$var wire 1 G# Cin $end
$var wire 1 B# Cout $end
$var wire 1 ]# G0 $end
$var wire 1 ^# G1 $end
$var wire 1 _# G2 $end
$var wire 1 `# G3 $end
$var wire 1 a# P0 $end
$var wire 1 b# P1 $end
$var wire 1 c# P2 $end
$var wire 1 d# P3 $end
$var wire 4 e# Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_1 $end
$var wire 8 f# A [7:0] $end
$var wire 8 g# B [7:0] $end
$var wire 1 h# Cin $end
$var wire 8 i# Sum [7:0] $end
$var wire 1 A# Cout $end
$var wire 1 j# C0 $end
$scope module CLA4_0 $end
$var wire 4 k# A [3:0] $end
$var wire 4 l# B [3:0] $end
$var wire 1 m# C0 $end
$var wire 1 n# C1 $end
$var wire 1 o# C2 $end
$var wire 1 p# C3 $end
$var wire 1 h# Cin $end
$var wire 1 j# Cout $end
$var wire 1 q# G0 $end
$var wire 1 r# G1 $end
$var wire 1 s# G2 $end
$var wire 1 t# G3 $end
$var wire 1 u# P0 $end
$var wire 1 v# P1 $end
$var wire 1 w# P2 $end
$var wire 1 x# P3 $end
$var wire 4 y# Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 z# A [3:0] $end
$var wire 4 {# B [3:0] $end
$var wire 1 |# C0 $end
$var wire 1 }# C1 $end
$var wire 1 ~# C2 $end
$var wire 1 !$ C3 $end
$var wire 1 j# Cin $end
$var wire 1 A# Cout $end
$var wire 1 "$ G0 $end
$var wire 1 #$ G1 $end
$var wire 1 $$ G2 $end
$var wire 1 %$ G3 $end
$var wire 1 &$ P0 $end
$var wire 1 '$ P1 $end
$var wire 1 ($ P2 $end
$var wire 1 )$ P3 $end
$var wire 4 *$ Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_2 $end
$var wire 8 +$ A [7:0] $end
$var wire 8 ,$ B [7:0] $end
$var wire 1 -$ Cin $end
$var wire 8 .$ Sum [7:0] $end
$var wire 1 @# Cout $end
$var wire 1 /$ C0 $end
$scope module CLA4_0 $end
$var wire 4 0$ A [3:0] $end
$var wire 4 1$ B [3:0] $end
$var wire 1 2$ C0 $end
$var wire 1 3$ C1 $end
$var wire 1 4$ C2 $end
$var wire 1 5$ C3 $end
$var wire 1 -$ Cin $end
$var wire 1 /$ Cout $end
$var wire 1 6$ G0 $end
$var wire 1 7$ G1 $end
$var wire 1 8$ G2 $end
$var wire 1 9$ G3 $end
$var wire 1 :$ P0 $end
$var wire 1 ;$ P1 $end
$var wire 1 <$ P2 $end
$var wire 1 =$ P3 $end
$var wire 4 >$ Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 ?$ A [3:0] $end
$var wire 4 @$ B [3:0] $end
$var wire 1 A$ C0 $end
$var wire 1 B$ C1 $end
$var wire 1 C$ C2 $end
$var wire 1 D$ C3 $end
$var wire 1 /$ Cin $end
$var wire 1 @# Cout $end
$var wire 1 E$ G0 $end
$var wire 1 F$ G1 $end
$var wire 1 G$ G2 $end
$var wire 1 H$ G3 $end
$var wire 1 I$ P0 $end
$var wire 1 J$ P1 $end
$var wire 1 K$ P2 $end
$var wire 1 L$ P3 $end
$var wire 4 M$ Sum [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module iROR_0 $end
$var wire 16 N$ Shift_In [15:0] $end
$var wire 16 O$ Shift_Out [15:0] $end
$var wire 4 P$ Shift_Val [3:0] $end
$var wire 16 Q$ rorbit3 [15:0] $end
$var wire 16 R$ rorbit2 [15:0] $end
$var wire 16 S$ rorbit1 [15:0] $end
$var wire 16 T$ rorbit0 [15:0] $end
$upscope $end
$scope module iSAS16_0 $end
$var wire 16 U$ A [15:0] $end
$var wire 16 V$ B [15:0] $end
$var wire 1 =" negOvfl $end
$var wire 16 W$ notB [15:0] $end
$var wire 1 ;" posOvfl $end
$var wire 1 X$ sub $end
$var wire 16 Y$ tempSum [15:0] $end
$var wire 16 Z$ inputB [15:0] $end
$var wire 1 >" ifZero $end
$var wire 16 [$ Sum [15:0] $end
$var wire 1 \$ Cout3 $end
$var wire 1 ]$ Cout2 $end
$var wire 1 ^$ Cout1 $end
$var wire 1 _$ Cout0 $end
$scope module CLA4_0 $end
$var wire 4 `$ A [3:0] $end
$var wire 4 a$ B [3:0] $end
$var wire 1 b$ C0 $end
$var wire 1 c$ C1 $end
$var wire 1 d$ C2 $end
$var wire 1 e$ C3 $end
$var wire 1 X$ Cin $end
$var wire 1 _$ Cout $end
$var wire 1 f$ G0 $end
$var wire 1 g$ G1 $end
$var wire 1 h$ G2 $end
$var wire 1 i$ G3 $end
$var wire 1 j$ P0 $end
$var wire 1 k$ P1 $end
$var wire 1 l$ P2 $end
$var wire 1 m$ P3 $end
$var wire 4 n$ Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 o$ A [3:0] $end
$var wire 4 p$ B [3:0] $end
$var wire 1 q$ C0 $end
$var wire 1 r$ C1 $end
$var wire 1 s$ C2 $end
$var wire 1 t$ C3 $end
$var wire 1 _$ Cin $end
$var wire 1 ^$ Cout $end
$var wire 1 u$ G0 $end
$var wire 1 v$ G1 $end
$var wire 1 w$ G2 $end
$var wire 1 x$ G3 $end
$var wire 1 y$ P0 $end
$var wire 1 z$ P1 $end
$var wire 1 {$ P2 $end
$var wire 1 |$ P3 $end
$var wire 4 }$ Sum [3:0] $end
$upscope $end
$scope module CLA4_2 $end
$var wire 4 ~$ A [3:0] $end
$var wire 4 !% B [3:0] $end
$var wire 1 "% C0 $end
$var wire 1 #% C1 $end
$var wire 1 $% C2 $end
$var wire 1 %% C3 $end
$var wire 1 ^$ Cin $end
$var wire 1 ]$ Cout $end
$var wire 1 &% G0 $end
$var wire 1 '% G1 $end
$var wire 1 (% G2 $end
$var wire 1 )% G3 $end
$var wire 1 *% P0 $end
$var wire 1 +% P1 $end
$var wire 1 ,% P2 $end
$var wire 1 -% P3 $end
$var wire 4 .% Sum [3:0] $end
$upscope $end
$scope module CLA4_3 $end
$var wire 4 /% A [3:0] $end
$var wire 4 0% B [3:0] $end
$var wire 1 1% C0 $end
$var wire 1 2% C1 $end
$var wire 1 3% C2 $end
$var wire 1 4% C3 $end
$var wire 1 ]$ Cin $end
$var wire 1 \$ Cout $end
$var wire 1 5% G0 $end
$var wire 1 6% G1 $end
$var wire 1 7% G2 $end
$var wire 1 8% G3 $end
$var wire 1 9% P0 $end
$var wire 1 :% P1 $end
$var wire 1 ;% P2 $end
$var wire 1 <% P3 $end
$var wire 4 =% Sum [3:0] $end
$upscope $end
$upscope $end
$scope module ishift_0 $end
$var wire 1 >% Mode $end
$var wire 16 ?% Shift_In [15:0] $end
$var wire 4 @% Shift_Val [3:0] $end
$var wire 16 A% rbit3 [15:0] $end
$var wire 16 B% rbit2 [15:0] $end
$var wire 16 C% rbit1 [15:0] $end
$var wire 16 D% rbit0 [15:0] $end
$var wire 16 E% lbit3 [15:0] $end
$var wire 16 F% lbit2 [15:0] $end
$var wire 16 G% lbit1 [15:0] $end
$var wire 16 H% lbit0 [15:0] $end
$var wire 16 I% Shift_Out [15:0] $end
$upscope $end
$upscope $end
$scope module D_X_flops0 $end
$var wire 4 J% Source1_in [3:0] $end
$var wire 4 K% Source2_in [3:0] $end
$var wire 16 L% a_out [15:0] $end
$var wire 16 M% b_out [15:0] $end
$var wire 1 , clk $end
$var wire 16 N% imm_in [15:0] $end
$var wire 16 O% imm_out [15:0] $end
$var wire 16 P% instruction_in [15:0] $end
$var wire 16 Q% instruction_out [15:0] $end
$var wire 16 R% newPC_in [15:0] $end
$var wire 16 S% newPC_out [15:0] $end
$var wire 16 T% oldPC_in [15:0] $end
$var wire 16 U% oldPC_out [15:0] $end
$var wire 4 V% reg_dest_in [3:0] $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 4 Y% reg_dest_out [3:0] $end
$var wire 1 ~ halt_out $end
$var wire 1 u halt_in $end
$var wire 1 !" branch_src_out $end
$var wire 1 y branch_src_in $end
$var wire 1 "" branch_inst_out $end
$var wire 1 z branch_inst_in $end
$var wire 16 Z% b_in [15:0] $end
$var wire 16 [% a_in [15:0] $end
$var wire 4 \% Source2_out [3:0] $end
$var wire 4 ]% Source1_out [3:0] $end
$var wire 1 #" SavePC_out $end
$var wire 1 +" SavePC_in $end
$var wire 1 $" RegWrite_out $end
$var wire 1 ," RegWrite_in $end
$var wire 1 %" RegDst_out $end
$var wire 1 -" RegDst_in $end
$var wire 1 &" MemtoReg_out $end
$var wire 1 ." MemtoReg_in $end
$var wire 1 '" MemWrite_out $end
$var wire 1 /" MemWrite_in $end
$var wire 1 (" MemRead_out $end
$var wire 1 0" MemRead_in $end
$var wire 1 )" LoadPartial_out $end
$var wire 1 1" LoadPartial_in $end
$var wire 1 *" ALUsrc_out $end
$var wire 1 2" ALUsrc_in $end
$scope module ALUsrc_dff $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 *" q $end
$var wire 1 2" d $end
$var reg 1 *" state $end
$upscope $end
$scope module LoadPartial_dff $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 )" q $end
$var wire 1 1" d $end
$var reg 1 )" state $end
$upscope $end
$scope module MemRead_dff $end
$var wire 1 , clk $end
$var wire 1 (" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 0" d $end
$var reg 1 ^% state $end
$upscope $end
$scope module MemWrite_dff $end
$var wire 1 , clk $end
$var wire 1 '" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 /" d $end
$var reg 1 _% state $end
$upscope $end
$scope module MemtoReg_dff $end
$var wire 1 , clk $end
$var wire 1 &" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 ." d $end
$var reg 1 `% state $end
$upscope $end
$scope module RegDst_dff $end
$var wire 1 , clk $end
$var wire 1 %" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 -" d $end
$var reg 1 a% state $end
$upscope $end
$scope module RegWrite_dff $end
$var wire 1 , clk $end
$var wire 1 $" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 ," d $end
$var reg 1 b% state $end
$upscope $end
$scope module SavePC_dff $end
$var wire 1 , clk $end
$var wire 1 #" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 +" d $end
$var reg 1 c% state $end
$upscope $end
$scope module Source1_dff[0] $end
$var wire 1 , clk $end
$var wire 1 d% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 e% q $end
$var reg 1 e% state $end
$upscope $end
$scope module Source1_dff[1] $end
$var wire 1 , clk $end
$var wire 1 f% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 g% q $end
$var reg 1 g% state $end
$upscope $end
$scope module Source1_dff[2] $end
$var wire 1 , clk $end
$var wire 1 h% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 i% q $end
$var reg 1 i% state $end
$upscope $end
$scope module Source1_dff[3] $end
$var wire 1 , clk $end
$var wire 1 j% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 k% q $end
$var reg 1 k% state $end
$upscope $end
$scope module Source2_dff[0] $end
$var wire 1 , clk $end
$var wire 1 l% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 m% q $end
$var reg 1 m% state $end
$upscope $end
$scope module Source2_dff[1] $end
$var wire 1 , clk $end
$var wire 1 n% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 o% q $end
$var reg 1 o% state $end
$upscope $end
$scope module Source2_dff[2] $end
$var wire 1 , clk $end
$var wire 1 p% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 q% q $end
$var reg 1 q% state $end
$upscope $end
$scope module Source2_dff[3] $end
$var wire 1 , clk $end
$var wire 1 r% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 s% q $end
$var reg 1 s% state $end
$upscope $end
$scope module a_reg $end
$var wire 16 t% Bitline1 [15:0] $end
$var wire 16 u% Bitline2 [15:0] $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteReg $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 16 x% D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 y% Bitline1 $end
$var wire 1 z% Bitline2 $end
$var wire 1 {% D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 |% dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 {% d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 |% q $end
$var reg 1 |% state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 }% Bitline1 $end
$var wire 1 ~% Bitline2 $end
$var wire 1 !& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 "& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 !& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 "& q $end
$var reg 1 "& state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 #& Bitline1 $end
$var wire 1 $& Bitline2 $end
$var wire 1 %& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 && dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 %& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 && q $end
$var reg 1 && state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 '& Bitline1 $end
$var wire 1 (& Bitline2 $end
$var wire 1 )& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 *& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 )& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 *& q $end
$var reg 1 *& state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 +& Bitline1 $end
$var wire 1 ,& Bitline2 $end
$var wire 1 -& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 .& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 -& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 .& q $end
$var reg 1 .& state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 /& Bitline1 $end
$var wire 1 0& Bitline2 $end
$var wire 1 1& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 2& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 1& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 2& q $end
$var reg 1 2& state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 3& Bitline1 $end
$var wire 1 4& Bitline2 $end
$var wire 1 5& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 6& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 5& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 6& q $end
$var reg 1 6& state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 7& Bitline1 $end
$var wire 1 8& Bitline2 $end
$var wire 1 9& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 :& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 9& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 :& q $end
$var reg 1 :& state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 ;& Bitline1 $end
$var wire 1 <& Bitline2 $end
$var wire 1 =& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 >& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 =& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 >& q $end
$var reg 1 >& state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 ?& Bitline1 $end
$var wire 1 @& Bitline2 $end
$var wire 1 A& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 B& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 A& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 B& q $end
$var reg 1 B& state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 C& Bitline1 $end
$var wire 1 D& Bitline2 $end
$var wire 1 E& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 F& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 E& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 F& q $end
$var reg 1 F& state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 G& Bitline1 $end
$var wire 1 H& Bitline2 $end
$var wire 1 I& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 J& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 I& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 J& q $end
$var reg 1 J& state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 K& Bitline1 $end
$var wire 1 L& Bitline2 $end
$var wire 1 M& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 N& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 M& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 N& q $end
$var reg 1 N& state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 O& Bitline1 $end
$var wire 1 P& Bitline2 $end
$var wire 1 Q& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 R& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Q& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 R& q $end
$var reg 1 R& state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 S& Bitline1 $end
$var wire 1 T& Bitline2 $end
$var wire 1 U& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 V& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 U& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 V& q $end
$var reg 1 V& state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 W& Bitline1 $end
$var wire 1 X& Bitline2 $end
$var wire 1 Y& D $end
$var wire 1 v% ReadEnable1 $end
$var wire 1 w% ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 Z& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Y& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 Z& q $end
$var reg 1 Z& state $end
$upscope $end
$upscope $end
$upscope $end
$scope module b_reg $end
$var wire 16 [& Bitline1 [15:0] $end
$var wire 16 \& Bitline2 [15:0] $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteReg $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 16 _& D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 `& Bitline1 $end
$var wire 1 a& Bitline2 $end
$var wire 1 b& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 c& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 c& q $end
$var reg 1 c& state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 d& Bitline1 $end
$var wire 1 e& Bitline2 $end
$var wire 1 f& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 g& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 g& q $end
$var reg 1 g& state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 h& Bitline1 $end
$var wire 1 i& Bitline2 $end
$var wire 1 j& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 k& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 k& q $end
$var reg 1 k& state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 l& Bitline1 $end
$var wire 1 m& Bitline2 $end
$var wire 1 n& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 o& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 o& q $end
$var reg 1 o& state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 p& Bitline1 $end
$var wire 1 q& Bitline2 $end
$var wire 1 r& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 s& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 s& q $end
$var reg 1 s& state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 t& Bitline1 $end
$var wire 1 u& Bitline2 $end
$var wire 1 v& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 w& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 w& q $end
$var reg 1 w& state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 x& Bitline1 $end
$var wire 1 y& Bitline2 $end
$var wire 1 z& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 {& dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 {& q $end
$var reg 1 {& state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 |& Bitline1 $end
$var wire 1 }& Bitline2 $end
$var wire 1 ~& D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 !' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~& d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 !' q $end
$var reg 1 !' state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 "' Bitline1 $end
$var wire 1 #' Bitline2 $end
$var wire 1 $' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 %' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 %' q $end
$var reg 1 %' state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 &' Bitline1 $end
$var wire 1 '' Bitline2 $end
$var wire 1 (' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 )' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 )' q $end
$var reg 1 )' state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 *' Bitline1 $end
$var wire 1 +' Bitline2 $end
$var wire 1 ,' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 -' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 -' q $end
$var reg 1 -' state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 .' Bitline1 $end
$var wire 1 /' Bitline2 $end
$var wire 1 0' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 1' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 1' q $end
$var reg 1 1' state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 2' Bitline1 $end
$var wire 1 3' Bitline2 $end
$var wire 1 4' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 5' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 5' q $end
$var reg 1 5' state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 6' Bitline1 $end
$var wire 1 7' Bitline2 $end
$var wire 1 8' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 9' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 9' q $end
$var reg 1 9' state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 :' Bitline1 $end
$var wire 1 ;' Bitline2 $end
$var wire 1 <' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 =' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 =' q $end
$var reg 1 =' state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 >' Bitline1 $end
$var wire 1 ?' Bitline2 $end
$var wire 1 @' D $end
$var wire 1 ]& ReadEnable1 $end
$var wire 1 ^& ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 A' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 A' q $end
$var reg 1 A' state $end
$upscope $end
$upscope $end
$upscope $end
$scope module branch_inst_dff $end
$var wire 1 , clk $end
$var wire 1 "" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 z d $end
$var reg 1 B' state $end
$upscope $end
$scope module branch_src_dff $end
$var wire 1 , clk $end
$var wire 1 !" q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 y d $end
$var reg 1 C' state $end
$upscope $end
$scope module halt_dff $end
$var wire 1 , clk $end
$var wire 1 ~ q $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 u d $end
$var reg 1 D' state $end
$upscope $end
$scope module imm_reg $end
$var wire 16 E' Bitline1 [15:0] $end
$var wire 16 F' Bitline2 [15:0] $end
$var wire 16 G' D [15:0] $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteReg $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$scope module bitArray[0] $end
$var wire 1 J' Bitline1 $end
$var wire 1 K' Bitline2 $end
$var wire 1 L' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 M' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 M' q $end
$var reg 1 M' state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 N' Bitline1 $end
$var wire 1 O' Bitline2 $end
$var wire 1 P' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 Q' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 Q' q $end
$var reg 1 Q' state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 R' Bitline1 $end
$var wire 1 S' Bitline2 $end
$var wire 1 T' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 U' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 U' q $end
$var reg 1 U' state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 V' Bitline1 $end
$var wire 1 W' Bitline2 $end
$var wire 1 X' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 Y' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 Y' q $end
$var reg 1 Y' state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 Z' Bitline1 $end
$var wire 1 [' Bitline2 $end
$var wire 1 \' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 ]' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 ]' q $end
$var reg 1 ]' state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 ^' Bitline1 $end
$var wire 1 _' Bitline2 $end
$var wire 1 `' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 a' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 a' q $end
$var reg 1 a' state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 b' Bitline1 $end
$var wire 1 c' Bitline2 $end
$var wire 1 d' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 e' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 e' q $end
$var reg 1 e' state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 f' Bitline1 $end
$var wire 1 g' Bitline2 $end
$var wire 1 h' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 i' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 i' q $end
$var reg 1 i' state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 j' Bitline1 $end
$var wire 1 k' Bitline2 $end
$var wire 1 l' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 m' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 m' q $end
$var reg 1 m' state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 n' Bitline1 $end
$var wire 1 o' Bitline2 $end
$var wire 1 p' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 q' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 q' q $end
$var reg 1 q' state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 r' Bitline1 $end
$var wire 1 s' Bitline2 $end
$var wire 1 t' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 u' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 u' q $end
$var reg 1 u' state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 v' Bitline1 $end
$var wire 1 w' Bitline2 $end
$var wire 1 x' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 y' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 y' q $end
$var reg 1 y' state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 z' Bitline1 $end
$var wire 1 {' Bitline2 $end
$var wire 1 |' D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 }' dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |' d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 }' q $end
$var reg 1 }' state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 ~' Bitline1 $end
$var wire 1 !( Bitline2 $end
$var wire 1 "( D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 #( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 #( q $end
$var reg 1 #( state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 $( Bitline1 $end
$var wire 1 %( Bitline2 $end
$var wire 1 &( D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 '( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 '( q $end
$var reg 1 '( state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 (( Bitline1 $end
$var wire 1 )( Bitline2 $end
$var wire 1 *( D $end
$var wire 1 H' ReadEnable1 $end
$var wire 1 I' ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 +( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 +( q $end
$var reg 1 +( state $end
$upscope $end
$upscope $end
$upscope $end
$scope module instruction_reg $end
$var wire 16 ,( Bitline1 [15:0] $end
$var wire 16 -( Bitline2 [15:0] $end
$var wire 16 .( D [15:0] $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteReg $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$scope module bitArray[0] $end
$var wire 1 1( Bitline1 $end
$var wire 1 2( Bitline2 $end
$var wire 1 3( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 4( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 3( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 4( q $end
$var reg 1 4( state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 5( Bitline1 $end
$var wire 1 6( Bitline2 $end
$var wire 1 7( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 8( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 7( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 8( q $end
$var reg 1 8( state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 9( Bitline1 $end
$var wire 1 :( Bitline2 $end
$var wire 1 ;( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 <( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ;( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 <( q $end
$var reg 1 <( state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 =( Bitline1 $end
$var wire 1 >( Bitline2 $end
$var wire 1 ?( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 @( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ?( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 @( q $end
$var reg 1 @( state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 A( Bitline1 $end
$var wire 1 B( Bitline2 $end
$var wire 1 C( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 D( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 C( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 D( q $end
$var reg 1 D( state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 E( Bitline1 $end
$var wire 1 F( Bitline2 $end
$var wire 1 G( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 H( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 G( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 H( q $end
$var reg 1 H( state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 I( Bitline1 $end
$var wire 1 J( Bitline2 $end
$var wire 1 K( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 L( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 K( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 L( q $end
$var reg 1 L( state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 M( Bitline1 $end
$var wire 1 N( Bitline2 $end
$var wire 1 O( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 P( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 O( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 P( q $end
$var reg 1 P( state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 Q( Bitline1 $end
$var wire 1 R( Bitline2 $end
$var wire 1 S( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 T( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 S( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 T( q $end
$var reg 1 T( state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 U( Bitline1 $end
$var wire 1 V( Bitline2 $end
$var wire 1 W( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 X( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 W( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 X( q $end
$var reg 1 X( state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 Y( Bitline1 $end
$var wire 1 Z( Bitline2 $end
$var wire 1 [( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 \( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 [( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 \( q $end
$var reg 1 \( state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 ]( Bitline1 $end
$var wire 1 ^( Bitline2 $end
$var wire 1 _( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 `( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 _( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 `( q $end
$var reg 1 `( state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 a( Bitline1 $end
$var wire 1 b( Bitline2 $end
$var wire 1 c( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 d( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 c( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 d( q $end
$var reg 1 d( state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 e( Bitline1 $end
$var wire 1 f( Bitline2 $end
$var wire 1 g( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 h( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 g( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 h( q $end
$var reg 1 h( state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 i( Bitline1 $end
$var wire 1 j( Bitline2 $end
$var wire 1 k( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 l( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 k( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 l( q $end
$var reg 1 l( state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 m( Bitline1 $end
$var wire 1 n( Bitline2 $end
$var wire 1 o( D $end
$var wire 1 /( ReadEnable1 $end
$var wire 1 0( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 p( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 o( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 p( q $end
$var reg 1 p( state $end
$upscope $end
$upscope $end
$upscope $end
$scope module newPC_reg $end
$var wire 16 q( Bitline1 [15:0] $end
$var wire 16 r( Bitline2 [15:0] $end
$var wire 16 s( D [15:0] $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteReg $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$scope module bitArray[0] $end
$var wire 1 v( Bitline1 $end
$var wire 1 w( Bitline2 $end
$var wire 1 x( D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 y( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 y( q $end
$var reg 1 y( state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 z( Bitline1 $end
$var wire 1 {( Bitline2 $end
$var wire 1 |( D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 }( dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |( d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 }( q $end
$var reg 1 }( state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 ~( Bitline1 $end
$var wire 1 !) Bitline2 $end
$var wire 1 ") D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 #) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ") d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 #) q $end
$var reg 1 #) state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 $) Bitline1 $end
$var wire 1 %) Bitline2 $end
$var wire 1 &) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 ') dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 ') q $end
$var reg 1 ') state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 () Bitline1 $end
$var wire 1 )) Bitline2 $end
$var wire 1 *) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 +) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 +) q $end
$var reg 1 +) state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 ,) Bitline1 $end
$var wire 1 -) Bitline2 $end
$var wire 1 .) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 /) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 /) q $end
$var reg 1 /) state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 0) Bitline1 $end
$var wire 1 1) Bitline2 $end
$var wire 1 2) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 3) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 3) q $end
$var reg 1 3) state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 4) Bitline1 $end
$var wire 1 5) Bitline2 $end
$var wire 1 6) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 7) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 7) q $end
$var reg 1 7) state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 8) Bitline1 $end
$var wire 1 9) Bitline2 $end
$var wire 1 :) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 ;) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 ;) q $end
$var reg 1 ;) state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 <) Bitline1 $end
$var wire 1 =) Bitline2 $end
$var wire 1 >) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 ?) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 ?) q $end
$var reg 1 ?) state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 @) Bitline1 $end
$var wire 1 A) Bitline2 $end
$var wire 1 B) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 C) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 C) q $end
$var reg 1 C) state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 D) Bitline1 $end
$var wire 1 E) Bitline2 $end
$var wire 1 F) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 G) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 G) q $end
$var reg 1 G) state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 H) Bitline1 $end
$var wire 1 I) Bitline2 $end
$var wire 1 J) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 K) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 K) q $end
$var reg 1 K) state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 L) Bitline1 $end
$var wire 1 M) Bitline2 $end
$var wire 1 N) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 O) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 O) q $end
$var reg 1 O) state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 P) Bitline1 $end
$var wire 1 Q) Bitline2 $end
$var wire 1 R) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 S) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 S) q $end
$var reg 1 S) state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 T) Bitline1 $end
$var wire 1 U) Bitline2 $end
$var wire 1 V) D $end
$var wire 1 t( ReadEnable1 $end
$var wire 1 u( ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 W) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 W) q $end
$var reg 1 W) state $end
$upscope $end
$upscope $end
$upscope $end
$scope module oldPC_reg $end
$var wire 16 X) Bitline1 [15:0] $end
$var wire 16 Y) Bitline2 [15:0] $end
$var wire 16 Z) D [15:0] $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteReg $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$scope module bitArray[0] $end
$var wire 1 ]) Bitline1 $end
$var wire 1 ^) Bitline2 $end
$var wire 1 _) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 `) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 _) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 `) q $end
$var reg 1 `) state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 a) Bitline1 $end
$var wire 1 b) Bitline2 $end
$var wire 1 c) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 d) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 c) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 d) q $end
$var reg 1 d) state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 e) Bitline1 $end
$var wire 1 f) Bitline2 $end
$var wire 1 g) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 h) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 g) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 h) q $end
$var reg 1 h) state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 i) Bitline1 $end
$var wire 1 j) Bitline2 $end
$var wire 1 k) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 l) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 k) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 l) q $end
$var reg 1 l) state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 m) Bitline1 $end
$var wire 1 n) Bitline2 $end
$var wire 1 o) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 p) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 o) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 p) q $end
$var reg 1 p) state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 q) Bitline1 $end
$var wire 1 r) Bitline2 $end
$var wire 1 s) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 t) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 s) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 t) q $end
$var reg 1 t) state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 u) Bitline1 $end
$var wire 1 v) Bitline2 $end
$var wire 1 w) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 x) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 w) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 x) q $end
$var reg 1 x) state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 y) Bitline1 $end
$var wire 1 z) Bitline2 $end
$var wire 1 {) D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 |) dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 {) d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 |) q $end
$var reg 1 |) state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 }) Bitline1 $end
$var wire 1 ~) Bitline2 $end
$var wire 1 !* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 "* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 !* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 "* q $end
$var reg 1 "* state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 #* Bitline1 $end
$var wire 1 $* Bitline2 $end
$var wire 1 %* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 &* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 %* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 &* q $end
$var reg 1 &* state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 '* Bitline1 $end
$var wire 1 (* Bitline2 $end
$var wire 1 )* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 ** dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 )* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 ** q $end
$var reg 1 ** state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 +* Bitline1 $end
$var wire 1 ,* Bitline2 $end
$var wire 1 -* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 .* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 -* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 .* q $end
$var reg 1 .* state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 /* Bitline1 $end
$var wire 1 0* Bitline2 $end
$var wire 1 1* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 2* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 1* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 2* q $end
$var reg 1 2* state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 3* Bitline1 $end
$var wire 1 4* Bitline2 $end
$var wire 1 5* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 6* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 5* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 6* q $end
$var reg 1 6* state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 7* Bitline1 $end
$var wire 1 8* Bitline2 $end
$var wire 1 9* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 :* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 9* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 :* q $end
$var reg 1 :* state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 ;* Bitline1 $end
$var wire 1 <* Bitline2 $end
$var wire 1 =* D $end
$var wire 1 [) ReadEnable1 $end
$var wire 1 \) ReadEnable2 $end
$var wire 1 X% WriteEnable $end
$var wire 1 , clk $end
$var wire 1 W% rst $end
$var wire 1 >* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 =* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 >* q $end
$var reg 1 >* state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_dest_dff[0] $end
$var wire 1 , clk $end
$var wire 1 ?* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 @* q $end
$var reg 1 @* state $end
$upscope $end
$scope module reg_dest_dff[1] $end
$var wire 1 , clk $end
$var wire 1 A* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 B* q $end
$var reg 1 B* state $end
$upscope $end
$scope module reg_dest_dff[2] $end
$var wire 1 , clk $end
$var wire 1 C* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 D* q $end
$var reg 1 D* state $end
$upscope $end
$scope module reg_dest_dff[3] $end
$var wire 1 , clk $end
$var wire 1 E* d $end
$var wire 1 W% rst $end
$var wire 1 X% wen $end
$var wire 1 F* q $end
$var reg 1 F* state $end
$upscope $end
$upscope $end
$scope module M_W_flops0 $end
$var wire 16 G* ALUresult_in [15:0] $end
$var wire 16 H* ALUresult_out [15:0] $end
$var wire 1 , clk $end
$var wire 16 I* instruction_in [15:0] $end
$var wire 16 J* instruction_out [15:0] $end
$var wire 16 K* mem_out [15:0] $end
$var wire 16 L* newPC_in [15:0] $end
$var wire 16 M* newPC_out [15:0] $end
$var wire 16 N* oldPC_in [15:0] $end
$var wire 16 O* oldPC_out [15:0] $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 4 R* reg_dest_out [3:0] $end
$var wire 4 S* reg_dest_in [3:0] $end
$var wire 16 T* mem_in [15:0] $end
$var wire 1 p halt_out $end
$var wire 1 c halt_in $end
$var wire 1 q SavePC_out $end
$var wire 1 d SavePC_in $end
$var wire 1 r RegWrite_out $end
$var wire 1 e RegWrite_in $end
$var wire 1 s MemtoReg_out $end
$var wire 1 f MemtoReg_in $end
$scope module ALUresult_reg $end
$var wire 16 U* Bitline1 [15:0] $end
$var wire 16 V* Bitline2 [15:0] $end
$var wire 16 W* D [15:0] $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteReg $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$scope module bitArray[0] $end
$var wire 1 Z* Bitline1 $end
$var wire 1 [* Bitline2 $end
$var wire 1 \* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 ]* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ]* q $end
$var reg 1 ]* state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 ^* Bitline1 $end
$var wire 1 _* Bitline2 $end
$var wire 1 `* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 a* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 a* q $end
$var reg 1 a* state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 b* Bitline1 $end
$var wire 1 c* Bitline2 $end
$var wire 1 d* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 e* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 e* q $end
$var reg 1 e* state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 f* Bitline1 $end
$var wire 1 g* Bitline2 $end
$var wire 1 h* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 i* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 i* q $end
$var reg 1 i* state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 j* Bitline1 $end
$var wire 1 k* Bitline2 $end
$var wire 1 l* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 m* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 m* q $end
$var reg 1 m* state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 n* Bitline1 $end
$var wire 1 o* Bitline2 $end
$var wire 1 p* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 q* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 q* q $end
$var reg 1 q* state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 r* Bitline1 $end
$var wire 1 s* Bitline2 $end
$var wire 1 t* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 u* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 u* q $end
$var reg 1 u* state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 v* Bitline1 $end
$var wire 1 w* Bitline2 $end
$var wire 1 x* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 y* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 y* q $end
$var reg 1 y* state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 z* Bitline1 $end
$var wire 1 {* Bitline2 $end
$var wire 1 |* D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 }* dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |* d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 }* q $end
$var reg 1 }* state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 ~* Bitline1 $end
$var wire 1 !+ Bitline2 $end
$var wire 1 "+ D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 #+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 #+ q $end
$var reg 1 #+ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 $+ Bitline1 $end
$var wire 1 %+ Bitline2 $end
$var wire 1 &+ D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 '+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 '+ q $end
$var reg 1 '+ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 (+ Bitline1 $end
$var wire 1 )+ Bitline2 $end
$var wire 1 *+ D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 ++ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ++ q $end
$var reg 1 ++ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 ,+ Bitline1 $end
$var wire 1 -+ Bitline2 $end
$var wire 1 .+ D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 /+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 /+ q $end
$var reg 1 /+ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 0+ Bitline1 $end
$var wire 1 1+ Bitline2 $end
$var wire 1 2+ D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 3+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 3+ q $end
$var reg 1 3+ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 4+ Bitline1 $end
$var wire 1 5+ Bitline2 $end
$var wire 1 6+ D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 7+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 7+ q $end
$var reg 1 7+ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 8+ Bitline1 $end
$var wire 1 9+ Bitline2 $end
$var wire 1 :+ D $end
$var wire 1 X* ReadEnable1 $end
$var wire 1 Y* ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 ;+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ;+ q $end
$var reg 1 ;+ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module MemtoReg_dff $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 s q $end
$var wire 1 f d $end
$var reg 1 s state $end
$upscope $end
$scope module RegWrite_dff $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 r q $end
$var wire 1 e d $end
$var reg 1 r state $end
$upscope $end
$scope module SavePC_dff $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 q q $end
$var wire 1 d d $end
$var reg 1 q state $end
$upscope $end
$scope module halt_dff $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 p q $end
$var wire 1 c d $end
$var reg 1 p state $end
$upscope $end
$scope module instruction_reg $end
$var wire 16 <+ Bitline1 [15:0] $end
$var wire 16 =+ Bitline2 [15:0] $end
$var wire 16 >+ D [15:0] $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteReg $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$scope module bitArray[0] $end
$var wire 1 A+ Bitline1 $end
$var wire 1 B+ Bitline2 $end
$var wire 1 C+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 D+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 C+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 D+ q $end
$var reg 1 D+ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 E+ Bitline1 $end
$var wire 1 F+ Bitline2 $end
$var wire 1 G+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 H+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 G+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 H+ q $end
$var reg 1 H+ state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 I+ Bitline1 $end
$var wire 1 J+ Bitline2 $end
$var wire 1 K+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 L+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 K+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 L+ q $end
$var reg 1 L+ state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 M+ Bitline1 $end
$var wire 1 N+ Bitline2 $end
$var wire 1 O+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 P+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 O+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 P+ q $end
$var reg 1 P+ state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 Q+ Bitline1 $end
$var wire 1 R+ Bitline2 $end
$var wire 1 S+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 T+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 S+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 T+ q $end
$var reg 1 T+ state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 U+ Bitline1 $end
$var wire 1 V+ Bitline2 $end
$var wire 1 W+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 X+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 W+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 X+ q $end
$var reg 1 X+ state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 Y+ Bitline1 $end
$var wire 1 Z+ Bitline2 $end
$var wire 1 [+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 \+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 [+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 \+ q $end
$var reg 1 \+ state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 ]+ Bitline1 $end
$var wire 1 ^+ Bitline2 $end
$var wire 1 _+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 `+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 _+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 `+ q $end
$var reg 1 `+ state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 a+ Bitline1 $end
$var wire 1 b+ Bitline2 $end
$var wire 1 c+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 d+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 c+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 d+ q $end
$var reg 1 d+ state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 e+ Bitline1 $end
$var wire 1 f+ Bitline2 $end
$var wire 1 g+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 h+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 g+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 h+ q $end
$var reg 1 h+ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 i+ Bitline1 $end
$var wire 1 j+ Bitline2 $end
$var wire 1 k+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 l+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 k+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 l+ q $end
$var reg 1 l+ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 m+ Bitline1 $end
$var wire 1 n+ Bitline2 $end
$var wire 1 o+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 p+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 o+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 p+ q $end
$var reg 1 p+ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 q+ Bitline1 $end
$var wire 1 r+ Bitline2 $end
$var wire 1 s+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 t+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 s+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 t+ q $end
$var reg 1 t+ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 u+ Bitline1 $end
$var wire 1 v+ Bitline2 $end
$var wire 1 w+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 x+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 w+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 x+ q $end
$var reg 1 x+ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 y+ Bitline1 $end
$var wire 1 z+ Bitline2 $end
$var wire 1 {+ D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 |+ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 {+ d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 |+ q $end
$var reg 1 |+ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 }+ Bitline1 $end
$var wire 1 ~+ Bitline2 $end
$var wire 1 !, D $end
$var wire 1 ?+ ReadEnable1 $end
$var wire 1 @+ ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 ", dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 !, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ", q $end
$var reg 1 ", state $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_reg $end
$var wire 16 #, Bitline1 [15:0] $end
$var wire 16 $, Bitline2 [15:0] $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteReg $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 16 ', D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 (, Bitline1 $end
$var wire 1 ), Bitline2 $end
$var wire 1 *, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 +, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 +, q $end
$var reg 1 +, state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 ,, Bitline1 $end
$var wire 1 -, Bitline2 $end
$var wire 1 ., D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 /, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ., d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 /, q $end
$var reg 1 /, state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 0, Bitline1 $end
$var wire 1 1, Bitline2 $end
$var wire 1 2, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 3, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 3, q $end
$var reg 1 3, state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 4, Bitline1 $end
$var wire 1 5, Bitline2 $end
$var wire 1 6, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 7, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 7, q $end
$var reg 1 7, state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 8, Bitline1 $end
$var wire 1 9, Bitline2 $end
$var wire 1 :, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 ;, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ;, q $end
$var reg 1 ;, state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 <, Bitline1 $end
$var wire 1 =, Bitline2 $end
$var wire 1 >, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 ?, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ?, q $end
$var reg 1 ?, state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 @, Bitline1 $end
$var wire 1 A, Bitline2 $end
$var wire 1 B, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 C, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 C, q $end
$var reg 1 C, state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 D, Bitline1 $end
$var wire 1 E, Bitline2 $end
$var wire 1 F, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 G, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 G, q $end
$var reg 1 G, state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 H, Bitline1 $end
$var wire 1 I, Bitline2 $end
$var wire 1 J, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 K, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 K, q $end
$var reg 1 K, state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 L, Bitline1 $end
$var wire 1 M, Bitline2 $end
$var wire 1 N, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 O, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 O, q $end
$var reg 1 O, state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 P, Bitline1 $end
$var wire 1 Q, Bitline2 $end
$var wire 1 R, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 S, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 S, q $end
$var reg 1 S, state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 T, Bitline1 $end
$var wire 1 U, Bitline2 $end
$var wire 1 V, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 W, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 W, q $end
$var reg 1 W, state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 X, Bitline1 $end
$var wire 1 Y, Bitline2 $end
$var wire 1 Z, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 [, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 [, q $end
$var reg 1 [, state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 \, Bitline1 $end
$var wire 1 ], Bitline2 $end
$var wire 1 ^, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 _, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 _, q $end
$var reg 1 _, state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 `, Bitline1 $end
$var wire 1 a, Bitline2 $end
$var wire 1 b, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 c, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 c, q $end
$var reg 1 c, state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 d, Bitline1 $end
$var wire 1 e, Bitline2 $end
$var wire 1 f, D $end
$var wire 1 %, ReadEnable1 $end
$var wire 1 &, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 g, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 g, q $end
$var reg 1 g, state $end
$upscope $end
$upscope $end
$upscope $end
$scope module newPC_reg $end
$var wire 16 h, Bitline1 [15:0] $end
$var wire 16 i, Bitline2 [15:0] $end
$var wire 16 j, D [15:0] $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteReg $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$scope module bitArray[0] $end
$var wire 1 m, Bitline1 $end
$var wire 1 n, Bitline2 $end
$var wire 1 o, D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 p, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 o, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 p, q $end
$var reg 1 p, state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 q, Bitline1 $end
$var wire 1 r, Bitline2 $end
$var wire 1 s, D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 t, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 s, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 t, q $end
$var reg 1 t, state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 u, Bitline1 $end
$var wire 1 v, Bitline2 $end
$var wire 1 w, D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 x, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 w, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 x, q $end
$var reg 1 x, state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 y, Bitline1 $end
$var wire 1 z, Bitline2 $end
$var wire 1 {, D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 |, dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 {, d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 |, q $end
$var reg 1 |, state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 }, Bitline1 $end
$var wire 1 ~, Bitline2 $end
$var wire 1 !- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 "- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 !- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 "- q $end
$var reg 1 "- state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 #- Bitline1 $end
$var wire 1 $- Bitline2 $end
$var wire 1 %- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 &- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 %- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 &- q $end
$var reg 1 &- state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 '- Bitline1 $end
$var wire 1 (- Bitline2 $end
$var wire 1 )- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 *- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 )- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 *- q $end
$var reg 1 *- state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 +- Bitline1 $end
$var wire 1 ,- Bitline2 $end
$var wire 1 -- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 .- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 -- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 .- q $end
$var reg 1 .- state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 /- Bitline1 $end
$var wire 1 0- Bitline2 $end
$var wire 1 1- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 2- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 1- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 2- q $end
$var reg 1 2- state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 3- Bitline1 $end
$var wire 1 4- Bitline2 $end
$var wire 1 5- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 6- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 5- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 6- q $end
$var reg 1 6- state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 7- Bitline1 $end
$var wire 1 8- Bitline2 $end
$var wire 1 9- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 :- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 9- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 :- q $end
$var reg 1 :- state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 ;- Bitline1 $end
$var wire 1 <- Bitline2 $end
$var wire 1 =- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 >- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 =- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 >- q $end
$var reg 1 >- state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 ?- Bitline1 $end
$var wire 1 @- Bitline2 $end
$var wire 1 A- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 B- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 A- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 B- q $end
$var reg 1 B- state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 C- Bitline1 $end
$var wire 1 D- Bitline2 $end
$var wire 1 E- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 F- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 E- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 F- q $end
$var reg 1 F- state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 G- Bitline1 $end
$var wire 1 H- Bitline2 $end
$var wire 1 I- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 J- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 I- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 J- q $end
$var reg 1 J- state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 K- Bitline1 $end
$var wire 1 L- Bitline2 $end
$var wire 1 M- D $end
$var wire 1 k, ReadEnable1 $end
$var wire 1 l, ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 N- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 M- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 N- q $end
$var reg 1 N- state $end
$upscope $end
$upscope $end
$upscope $end
$scope module oldPC_reg $end
$var wire 16 O- Bitline1 [15:0] $end
$var wire 16 P- Bitline2 [15:0] $end
$var wire 16 Q- D [15:0] $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteReg $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$scope module bitArray[0] $end
$var wire 1 T- Bitline1 $end
$var wire 1 U- Bitline2 $end
$var wire 1 V- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 W- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 W- q $end
$var reg 1 W- state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 X- Bitline1 $end
$var wire 1 Y- Bitline2 $end
$var wire 1 Z- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 [- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 [- q $end
$var reg 1 [- state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 \- Bitline1 $end
$var wire 1 ]- Bitline2 $end
$var wire 1 ^- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 _- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 _- q $end
$var reg 1 _- state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 `- Bitline1 $end
$var wire 1 a- Bitline2 $end
$var wire 1 b- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 c- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 c- q $end
$var reg 1 c- state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 d- Bitline1 $end
$var wire 1 e- Bitline2 $end
$var wire 1 f- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 g- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 g- q $end
$var reg 1 g- state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 h- Bitline1 $end
$var wire 1 i- Bitline2 $end
$var wire 1 j- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 k- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 k- q $end
$var reg 1 k- state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 l- Bitline1 $end
$var wire 1 m- Bitline2 $end
$var wire 1 n- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 o- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 o- q $end
$var reg 1 o- state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 p- Bitline1 $end
$var wire 1 q- Bitline2 $end
$var wire 1 r- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 s- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 s- q $end
$var reg 1 s- state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 t- Bitline1 $end
$var wire 1 u- Bitline2 $end
$var wire 1 v- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 w- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 w- q $end
$var reg 1 w- state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 x- Bitline1 $end
$var wire 1 y- Bitline2 $end
$var wire 1 z- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 {- dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 {- q $end
$var reg 1 {- state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 |- Bitline1 $end
$var wire 1 }- Bitline2 $end
$var wire 1 ~- D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 !. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~- d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 !. q $end
$var reg 1 !. state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 ". Bitline1 $end
$var wire 1 #. Bitline2 $end
$var wire 1 $. D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 %. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 %. q $end
$var reg 1 %. state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 &. Bitline1 $end
$var wire 1 '. Bitline2 $end
$var wire 1 (. D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 ). dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ). q $end
$var reg 1 ). state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 *. Bitline1 $end
$var wire 1 +. Bitline2 $end
$var wire 1 ,. D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 -. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 -. q $end
$var reg 1 -. state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 .. Bitline1 $end
$var wire 1 /. Bitline2 $end
$var wire 1 0. D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 1. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 1. q $end
$var reg 1 1. state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 2. Bitline1 $end
$var wire 1 3. Bitline2 $end
$var wire 1 4. D $end
$var wire 1 R- ReadEnable1 $end
$var wire 1 S- ReadEnable2 $end
$var wire 1 Q* WriteEnable $end
$var wire 1 , clk $end
$var wire 1 P* rst $end
$var wire 1 5. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 5. q $end
$var reg 1 5. state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_dest_dff[0] $end
$var wire 1 , clk $end
$var wire 1 6. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 7. q $end
$var reg 1 7. state $end
$upscope $end
$scope module reg_dest_dff[1] $end
$var wire 1 , clk $end
$var wire 1 8. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 9. q $end
$var reg 1 9. state $end
$upscope $end
$scope module reg_dest_dff[2] $end
$var wire 1 , clk $end
$var wire 1 :. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 ;. q $end
$var reg 1 ;. state $end
$upscope $end
$scope module reg_dest_dff[3] $end
$var wire 1 , clk $end
$var wire 1 <. d $end
$var wire 1 P* rst $end
$var wire 1 Q* wen $end
$var wire 1 =. q $end
$var reg 1 =. state $end
$upscope $end
$upscope $end
$scope module X_M_flops0 $end
$var wire 16 >. ALUresult_in [15:0] $end
$var wire 16 ?. ALUresult_out [15:0] $end
$var wire 1 (" MemRead_in $end
$var wire 1 '" MemWrite_in $end
$var wire 1 &" MemtoReg_in $end
$var wire 1 $" RegWrite_in $end
$var wire 1 #" SavePC_in $end
$var wire 4 @. Source2_in [3:0] $end
$var wire 16 A. b_in [15:0] $end
$var wire 16 B. b_out [15:0] $end
$var wire 1 , clk $end
$var wire 1 ~ halt_in $end
$var wire 16 C. instruction_in [15:0] $end
$var wire 16 D. instruction_out [15:0] $end
$var wire 16 E. newPC_in [15:0] $end
$var wire 16 F. newPC_out [15:0] $end
$var wire 16 G. oldPC_in [15:0] $end
$var wire 16 H. oldPC_out [15:0] $end
$var wire 4 I. reg_dest_in [3:0] $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 4 L. reg_dest_out [3:0] $end
$var wire 1 c halt_out $end
$var wire 4 M. Source2_out [3:0] $end
$var wire 1 d SavePC_out $end
$var wire 1 e RegWrite_out $end
$var wire 1 f MemtoReg_out $end
$var wire 1 g MemWrite_out $end
$var wire 1 h MemRead_out $end
$scope module ALUresult_reg $end
$var wire 16 N. Bitline1 [15:0] $end
$var wire 16 O. Bitline2 [15:0] $end
$var wire 16 P. D [15:0] $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteReg $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$scope module bitArray[0] $end
$var wire 1 S. Bitline1 $end
$var wire 1 T. Bitline2 $end
$var wire 1 U. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 V. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 U. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 V. q $end
$var reg 1 V. state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 W. Bitline1 $end
$var wire 1 X. Bitline2 $end
$var wire 1 Y. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 Z. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Y. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 Z. q $end
$var reg 1 Z. state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 [. Bitline1 $end
$var wire 1 \. Bitline2 $end
$var wire 1 ]. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 ^. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ]. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 ^. q $end
$var reg 1 ^. state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 _. Bitline1 $end
$var wire 1 `. Bitline2 $end
$var wire 1 a. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 b. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 a. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 b. q $end
$var reg 1 b. state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 c. Bitline1 $end
$var wire 1 d. Bitline2 $end
$var wire 1 e. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 f. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 e. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 f. q $end
$var reg 1 f. state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 g. Bitline1 $end
$var wire 1 h. Bitline2 $end
$var wire 1 i. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 j. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 i. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 j. q $end
$var reg 1 j. state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 k. Bitline1 $end
$var wire 1 l. Bitline2 $end
$var wire 1 m. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 n. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 m. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 n. q $end
$var reg 1 n. state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 o. Bitline1 $end
$var wire 1 p. Bitline2 $end
$var wire 1 q. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 r. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 q. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 r. q $end
$var reg 1 r. state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 s. Bitline1 $end
$var wire 1 t. Bitline2 $end
$var wire 1 u. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 v. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 u. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 v. q $end
$var reg 1 v. state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 w. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 y. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 z. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 y. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 z. q $end
$var reg 1 z. state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 {. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 }. D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 ~. dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 }. d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 ~. q $end
$var reg 1 ~. state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 !/ Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 #/ D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 $/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 #/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 $/ q $end
$var reg 1 $/ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 %/ Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 '/ D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 (/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 '/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 (/ q $end
$var reg 1 (/ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 )/ Bitline1 $end
$var wire 1 */ Bitline2 $end
$var wire 1 +/ D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 ,/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 +/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 ,/ q $end
$var reg 1 ,/ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 -/ Bitline1 $end
$var wire 1 ./ Bitline2 $end
$var wire 1 // D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 0/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 // d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 0/ q $end
$var reg 1 0/ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 1/ Bitline1 $end
$var wire 1 2/ Bitline2 $end
$var wire 1 3/ D $end
$var wire 1 Q. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 4/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 3/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 4/ q $end
$var reg 1 4/ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module MemRead_dff $end
$var wire 1 , clk $end
$var wire 1 (" d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 h q $end
$var reg 1 h state $end
$upscope $end
$scope module MemWrite_dff $end
$var wire 1 , clk $end
$var wire 1 '" d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 g q $end
$var reg 1 g state $end
$upscope $end
$scope module MemtoReg_dff $end
$var wire 1 , clk $end
$var wire 1 &" d $end
$var wire 1 f q $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var reg 1 5/ state $end
$upscope $end
$scope module RegWrite_dff $end
$var wire 1 , clk $end
$var wire 1 $" d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 e q $end
$var reg 1 e state $end
$upscope $end
$scope module SavePC_dff $end
$var wire 1 , clk $end
$var wire 1 #" d $end
$var wire 1 d q $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var reg 1 6/ state $end
$upscope $end
$scope module Source2_dff[0] $end
$var wire 1 , clk $end
$var wire 1 7/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 8/ q $end
$var reg 1 8/ state $end
$upscope $end
$scope module Source2_dff[1] $end
$var wire 1 , clk $end
$var wire 1 9/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 :/ q $end
$var reg 1 :/ state $end
$upscope $end
$scope module Source2_dff[2] $end
$var wire 1 , clk $end
$var wire 1 ;/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 </ q $end
$var reg 1 </ state $end
$upscope $end
$scope module Source2_dff[3] $end
$var wire 1 , clk $end
$var wire 1 =/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 >/ q $end
$var reg 1 >/ state $end
$upscope $end
$scope module b_reg $end
$var wire 16 ?/ Bitline1 [15:0] $end
$var wire 16 @/ Bitline2 [15:0] $end
$var wire 16 A/ D [15:0] $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteReg $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$scope module bitArray[0] $end
$var wire 1 D/ Bitline1 $end
$var wire 1 E/ Bitline2 $end
$var wire 1 F/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 G/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 G/ q $end
$var reg 1 G/ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 H/ Bitline1 $end
$var wire 1 I/ Bitline2 $end
$var wire 1 J/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 K/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 K/ q $end
$var reg 1 K/ state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 L/ Bitline1 $end
$var wire 1 M/ Bitline2 $end
$var wire 1 N/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 O/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 O/ q $end
$var reg 1 O/ state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 P/ Bitline1 $end
$var wire 1 Q/ Bitline2 $end
$var wire 1 R/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 S/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 S/ q $end
$var reg 1 S/ state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 T/ Bitline1 $end
$var wire 1 U/ Bitline2 $end
$var wire 1 V/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 W/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 W/ q $end
$var reg 1 W/ state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 X/ Bitline1 $end
$var wire 1 Y/ Bitline2 $end
$var wire 1 Z/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 [/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 [/ q $end
$var reg 1 [/ state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 \/ Bitline1 $end
$var wire 1 ]/ Bitline2 $end
$var wire 1 ^/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 _/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 _/ q $end
$var reg 1 _/ state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 `/ Bitline1 $end
$var wire 1 a/ Bitline2 $end
$var wire 1 b/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 c/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 c/ q $end
$var reg 1 c/ state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 d/ Bitline1 $end
$var wire 1 e/ Bitline2 $end
$var wire 1 f/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 g/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 g/ q $end
$var reg 1 g/ state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 h/ Bitline1 $end
$var wire 1 i/ Bitline2 $end
$var wire 1 j/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 k/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 k/ q $end
$var reg 1 k/ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 l/ Bitline1 $end
$var wire 1 m/ Bitline2 $end
$var wire 1 n/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 o/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 o/ q $end
$var reg 1 o/ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 p/ Bitline1 $end
$var wire 1 q/ Bitline2 $end
$var wire 1 r/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 s/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 s/ q $end
$var reg 1 s/ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 t/ Bitline1 $end
$var wire 1 u/ Bitline2 $end
$var wire 1 v/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 w/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 w/ q $end
$var reg 1 w/ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 x/ Bitline1 $end
$var wire 1 y/ Bitline2 $end
$var wire 1 z/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 {/ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 {/ q $end
$var reg 1 {/ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 |/ Bitline1 $end
$var wire 1 }/ Bitline2 $end
$var wire 1 ~/ D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 !0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~/ d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 !0 q $end
$var reg 1 !0 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 "0 Bitline1 $end
$var wire 1 #0 Bitline2 $end
$var wire 1 $0 D $end
$var wire 1 B/ ReadEnable1 $end
$var wire 1 C/ ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 %0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 %0 q $end
$var reg 1 %0 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module halt_dff $end
$var wire 1 , clk $end
$var wire 1 ~ d $end
$var wire 1 c q $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var reg 1 &0 state $end
$upscope $end
$scope module instruction_reg $end
$var wire 16 '0 Bitline1 [15:0] $end
$var wire 16 (0 Bitline2 [15:0] $end
$var wire 16 )0 D [15:0] $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteReg $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$scope module bitArray[0] $end
$var wire 1 ,0 Bitline1 $end
$var wire 1 -0 Bitline2 $end
$var wire 1 .0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 /0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 /0 q $end
$var reg 1 /0 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 00 Bitline1 $end
$var wire 1 10 Bitline2 $end
$var wire 1 20 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 30 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 20 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 30 q $end
$var reg 1 30 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 40 Bitline1 $end
$var wire 1 50 Bitline2 $end
$var wire 1 60 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 70 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 60 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 70 q $end
$var reg 1 70 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 80 Bitline1 $end
$var wire 1 90 Bitline2 $end
$var wire 1 :0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 ;0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 ;0 q $end
$var reg 1 ;0 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 <0 Bitline1 $end
$var wire 1 =0 Bitline2 $end
$var wire 1 >0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 ?0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 ?0 q $end
$var reg 1 ?0 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 @0 Bitline1 $end
$var wire 1 A0 Bitline2 $end
$var wire 1 B0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 C0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 C0 q $end
$var reg 1 C0 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 D0 Bitline1 $end
$var wire 1 E0 Bitline2 $end
$var wire 1 F0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 G0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 G0 q $end
$var reg 1 G0 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 H0 Bitline1 $end
$var wire 1 I0 Bitline2 $end
$var wire 1 J0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 K0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 K0 q $end
$var reg 1 K0 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 L0 Bitline1 $end
$var wire 1 M0 Bitline2 $end
$var wire 1 N0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 O0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 O0 q $end
$var reg 1 O0 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 P0 Bitline1 $end
$var wire 1 Q0 Bitline2 $end
$var wire 1 R0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 S0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 S0 q $end
$var reg 1 S0 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 T0 Bitline1 $end
$var wire 1 U0 Bitline2 $end
$var wire 1 V0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 W0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 W0 q $end
$var reg 1 W0 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 X0 Bitline1 $end
$var wire 1 Y0 Bitline2 $end
$var wire 1 Z0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 [0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 [0 q $end
$var reg 1 [0 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 \0 Bitline1 $end
$var wire 1 ]0 Bitline2 $end
$var wire 1 ^0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 _0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 _0 q $end
$var reg 1 _0 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 `0 Bitline1 $end
$var wire 1 a0 Bitline2 $end
$var wire 1 b0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 c0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 c0 q $end
$var reg 1 c0 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 d0 Bitline1 $end
$var wire 1 e0 Bitline2 $end
$var wire 1 f0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 g0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 g0 q $end
$var reg 1 g0 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 h0 Bitline1 $end
$var wire 1 i0 Bitline2 $end
$var wire 1 j0 D $end
$var wire 1 *0 ReadEnable1 $end
$var wire 1 +0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 k0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 k0 q $end
$var reg 1 k0 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module newPC_reg $end
$var wire 16 l0 Bitline1 [15:0] $end
$var wire 16 m0 Bitline2 [15:0] $end
$var wire 16 n0 D [15:0] $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteReg $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$scope module bitArray[0] $end
$var wire 1 q0 Bitline1 $end
$var wire 1 r0 Bitline2 $end
$var wire 1 s0 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 t0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 s0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 t0 q $end
$var reg 1 t0 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 u0 Bitline1 $end
$var wire 1 v0 Bitline2 $end
$var wire 1 w0 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 x0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 w0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 x0 q $end
$var reg 1 x0 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 y0 Bitline1 $end
$var wire 1 z0 Bitline2 $end
$var wire 1 {0 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 |0 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 {0 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 |0 q $end
$var reg 1 |0 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 }0 Bitline1 $end
$var wire 1 ~0 Bitline2 $end
$var wire 1 !1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 "1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 !1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 "1 q $end
$var reg 1 "1 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 #1 Bitline1 $end
$var wire 1 $1 Bitline2 $end
$var wire 1 %1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 &1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 %1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 &1 q $end
$var reg 1 &1 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 '1 Bitline1 $end
$var wire 1 (1 Bitline2 $end
$var wire 1 )1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 *1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 )1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 *1 q $end
$var reg 1 *1 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 +1 Bitline1 $end
$var wire 1 ,1 Bitline2 $end
$var wire 1 -1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 .1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 -1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 .1 q $end
$var reg 1 .1 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 /1 Bitline1 $end
$var wire 1 01 Bitline2 $end
$var wire 1 11 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 21 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 11 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 21 q $end
$var reg 1 21 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 31 Bitline1 $end
$var wire 1 41 Bitline2 $end
$var wire 1 51 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 61 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 51 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 61 q $end
$var reg 1 61 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 71 Bitline1 $end
$var wire 1 81 Bitline2 $end
$var wire 1 91 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 :1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 91 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 :1 q $end
$var reg 1 :1 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ;1 Bitline1 $end
$var wire 1 <1 Bitline2 $end
$var wire 1 =1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 >1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 =1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 >1 q $end
$var reg 1 >1 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 ?1 Bitline1 $end
$var wire 1 @1 Bitline2 $end
$var wire 1 A1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 B1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 A1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 B1 q $end
$var reg 1 B1 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 C1 Bitline1 $end
$var wire 1 D1 Bitline2 $end
$var wire 1 E1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 F1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 E1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 F1 q $end
$var reg 1 F1 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 G1 Bitline1 $end
$var wire 1 H1 Bitline2 $end
$var wire 1 I1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 J1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 I1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 J1 q $end
$var reg 1 J1 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 K1 Bitline1 $end
$var wire 1 L1 Bitline2 $end
$var wire 1 M1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 N1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 M1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 N1 q $end
$var reg 1 N1 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 O1 Bitline1 $end
$var wire 1 P1 Bitline2 $end
$var wire 1 Q1 D $end
$var wire 1 o0 ReadEnable1 $end
$var wire 1 p0 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 R1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Q1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 R1 q $end
$var reg 1 R1 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module oldPC_reg $end
$var wire 16 S1 Bitline1 [15:0] $end
$var wire 16 T1 Bitline2 [15:0] $end
$var wire 16 U1 D [15:0] $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteReg $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$scope module bitArray[0] $end
$var wire 1 X1 Bitline1 $end
$var wire 1 Y1 Bitline2 $end
$var wire 1 Z1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 [1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 [1 q $end
$var reg 1 [1 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 \1 Bitline1 $end
$var wire 1 ]1 Bitline2 $end
$var wire 1 ^1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 _1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 _1 q $end
$var reg 1 _1 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 `1 Bitline1 $end
$var wire 1 a1 Bitline2 $end
$var wire 1 b1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 c1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 c1 q $end
$var reg 1 c1 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 d1 Bitline1 $end
$var wire 1 e1 Bitline2 $end
$var wire 1 f1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 g1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 g1 q $end
$var reg 1 g1 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 h1 Bitline1 $end
$var wire 1 i1 Bitline2 $end
$var wire 1 j1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 k1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 k1 q $end
$var reg 1 k1 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 l1 Bitline1 $end
$var wire 1 m1 Bitline2 $end
$var wire 1 n1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 o1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 o1 q $end
$var reg 1 o1 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 p1 Bitline1 $end
$var wire 1 q1 Bitline2 $end
$var wire 1 r1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 s1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 s1 q $end
$var reg 1 s1 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 t1 Bitline1 $end
$var wire 1 u1 Bitline2 $end
$var wire 1 v1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 w1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 w1 q $end
$var reg 1 w1 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 x1 Bitline1 $end
$var wire 1 y1 Bitline2 $end
$var wire 1 z1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 {1 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 {1 q $end
$var reg 1 {1 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 |1 Bitline1 $end
$var wire 1 }1 Bitline2 $end
$var wire 1 ~1 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 !2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~1 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 !2 q $end
$var reg 1 !2 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 "2 Bitline1 $end
$var wire 1 #2 Bitline2 $end
$var wire 1 $2 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 %2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $2 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 %2 q $end
$var reg 1 %2 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 &2 Bitline1 $end
$var wire 1 '2 Bitline2 $end
$var wire 1 (2 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 )2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (2 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 )2 q $end
$var reg 1 )2 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 *2 Bitline1 $end
$var wire 1 +2 Bitline2 $end
$var wire 1 ,2 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 -2 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,2 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 -2 q $end
$var reg 1 -2 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 .2 Bitline1 $end
$var wire 1 /2 Bitline2 $end
$var wire 1 02 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 12 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 02 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 12 q $end
$var reg 1 12 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 22 Bitline1 $end
$var wire 1 32 Bitline2 $end
$var wire 1 42 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 52 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 42 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 52 q $end
$var reg 1 52 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 62 Bitline1 $end
$var wire 1 72 Bitline2 $end
$var wire 1 82 D $end
$var wire 1 V1 ReadEnable1 $end
$var wire 1 W1 ReadEnable2 $end
$var wire 1 K. WriteEnable $end
$var wire 1 , clk $end
$var wire 1 J. rst $end
$var wire 1 92 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 82 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 92 q $end
$var reg 1 92 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_dest_dff[0] $end
$var wire 1 , clk $end
$var wire 1 :2 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 ;2 q $end
$var reg 1 ;2 state $end
$upscope $end
$scope module reg_dest_dff[1] $end
$var wire 1 , clk $end
$var wire 1 <2 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 =2 q $end
$var reg 1 =2 state $end
$upscope $end
$scope module reg_dest_dff[2] $end
$var wire 1 , clk $end
$var wire 1 >2 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 ?2 q $end
$var reg 1 ?2 state $end
$upscope $end
$scope module reg_dest_dff[3] $end
$var wire 1 , clk $end
$var wire 1 @2 d $end
$var wire 1 J. rst $end
$var wire 1 K. wen $end
$var wire 1 A2 q $end
$var reg 1 A2 state $end
$upscope $end
$upscope $end
$scope module branch0 $end
$var wire 3 B2 NVZflag [2:0] $end
$var wire 3 C2 cond [2:0] $end
$var wire 1 Z do_branch $end
$var wire 1 z branch_inst $end
$upscope $end
$scope module cla_br $end
$var wire 16 D2 B [15:0] $end
$var wire 1 E2 Cin $end
$var wire 16 F2 Sum [15:0] $end
$var wire 1 G2 Cout $end
$var wire 1 H2 C0 $end
$var wire 16 I2 A [15:0] $end
$scope module CLA8_0 $end
$var wire 8 J2 A [7:0] $end
$var wire 8 K2 B [7:0] $end
$var wire 1 E2 Cin $end
$var wire 8 L2 Sum [7:0] $end
$var wire 1 H2 Cout $end
$var wire 1 M2 C0 $end
$scope module CLA4_0 $end
$var wire 4 N2 A [3:0] $end
$var wire 4 O2 B [3:0] $end
$var wire 1 P2 C0 $end
$var wire 1 Q2 C1 $end
$var wire 1 R2 C2 $end
$var wire 1 S2 C3 $end
$var wire 1 E2 Cin $end
$var wire 1 M2 Cout $end
$var wire 1 T2 G0 $end
$var wire 1 U2 G1 $end
$var wire 1 V2 G2 $end
$var wire 1 W2 G3 $end
$var wire 1 X2 P0 $end
$var wire 1 Y2 P1 $end
$var wire 1 Z2 P2 $end
$var wire 1 [2 P3 $end
$var wire 4 \2 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 ]2 A [3:0] $end
$var wire 4 ^2 B [3:0] $end
$var wire 1 _2 C0 $end
$var wire 1 `2 C1 $end
$var wire 1 a2 C2 $end
$var wire 1 b2 C3 $end
$var wire 1 M2 Cin $end
$var wire 1 H2 Cout $end
$var wire 1 c2 G0 $end
$var wire 1 d2 G1 $end
$var wire 1 e2 G2 $end
$var wire 1 f2 G3 $end
$var wire 1 g2 P0 $end
$var wire 1 h2 P1 $end
$var wire 1 i2 P2 $end
$var wire 1 j2 P3 $end
$var wire 4 k2 Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_1 $end
$var wire 8 l2 A [7:0] $end
$var wire 8 m2 B [7:0] $end
$var wire 1 H2 Cin $end
$var wire 8 n2 Sum [7:0] $end
$var wire 1 G2 Cout $end
$var wire 1 o2 C0 $end
$scope module CLA4_0 $end
$var wire 4 p2 A [3:0] $end
$var wire 4 q2 B [3:0] $end
$var wire 1 r2 C0 $end
$var wire 1 s2 C1 $end
$var wire 1 t2 C2 $end
$var wire 1 u2 C3 $end
$var wire 1 H2 Cin $end
$var wire 1 o2 Cout $end
$var wire 1 v2 G0 $end
$var wire 1 w2 G1 $end
$var wire 1 x2 G2 $end
$var wire 1 y2 G3 $end
$var wire 1 z2 P0 $end
$var wire 1 {2 P1 $end
$var wire 1 |2 P2 $end
$var wire 1 }2 P3 $end
$var wire 4 ~2 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 !3 A [3:0] $end
$var wire 4 "3 B [3:0] $end
$var wire 1 #3 C0 $end
$var wire 1 $3 C1 $end
$var wire 1 %3 C2 $end
$var wire 1 &3 C3 $end
$var wire 1 o2 Cin $end
$var wire 1 G2 Cout $end
$var wire 1 '3 G0 $end
$var wire 1 (3 G1 $end
$var wire 1 )3 G2 $end
$var wire 1 *3 G3 $end
$var wire 1 +3 P0 $end
$var wire 1 ,3 P1 $end
$var wire 1 -3 P2 $end
$var wire 1 .3 P3 $end
$var wire 4 /3 Sum [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cla_inc $end
$var wire 16 03 B [15:0] $end
$var wire 1 13 Cin $end
$var wire 16 23 Sum [15:0] $end
$var wire 1 33 Cout $end
$var wire 1 43 C0 $end
$var wire 16 53 A [15:0] $end
$scope module CLA8_0 $end
$var wire 8 63 A [7:0] $end
$var wire 8 73 B [7:0] $end
$var wire 1 13 Cin $end
$var wire 8 83 Sum [7:0] $end
$var wire 1 43 Cout $end
$var wire 1 93 C0 $end
$scope module CLA4_0 $end
$var wire 4 :3 A [3:0] $end
$var wire 4 ;3 B [3:0] $end
$var wire 1 <3 C0 $end
$var wire 1 =3 C1 $end
$var wire 1 >3 C2 $end
$var wire 1 ?3 C3 $end
$var wire 1 13 Cin $end
$var wire 1 93 Cout $end
$var wire 1 @3 G0 $end
$var wire 1 A3 G1 $end
$var wire 1 B3 G2 $end
$var wire 1 C3 G3 $end
$var wire 1 D3 P0 $end
$var wire 1 E3 P1 $end
$var wire 1 F3 P2 $end
$var wire 1 G3 P3 $end
$var wire 4 H3 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 I3 A [3:0] $end
$var wire 4 J3 B [3:0] $end
$var wire 1 K3 C0 $end
$var wire 1 L3 C1 $end
$var wire 1 M3 C2 $end
$var wire 1 N3 C3 $end
$var wire 1 93 Cin $end
$var wire 1 43 Cout $end
$var wire 1 O3 G0 $end
$var wire 1 P3 G1 $end
$var wire 1 Q3 G2 $end
$var wire 1 R3 G3 $end
$var wire 1 S3 P0 $end
$var wire 1 T3 P1 $end
$var wire 1 U3 P2 $end
$var wire 1 V3 P3 $end
$var wire 4 W3 Sum [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8_1 $end
$var wire 8 X3 A [7:0] $end
$var wire 8 Y3 B [7:0] $end
$var wire 1 43 Cin $end
$var wire 8 Z3 Sum [7:0] $end
$var wire 1 33 Cout $end
$var wire 1 [3 C0 $end
$scope module CLA4_0 $end
$var wire 4 \3 A [3:0] $end
$var wire 4 ]3 B [3:0] $end
$var wire 1 ^3 C0 $end
$var wire 1 _3 C1 $end
$var wire 1 `3 C2 $end
$var wire 1 a3 C3 $end
$var wire 1 43 Cin $end
$var wire 1 [3 Cout $end
$var wire 1 b3 G0 $end
$var wire 1 c3 G1 $end
$var wire 1 d3 G2 $end
$var wire 1 e3 G3 $end
$var wire 1 f3 P0 $end
$var wire 1 g3 P1 $end
$var wire 1 h3 P2 $end
$var wire 1 i3 P3 $end
$var wire 4 j3 Sum [3:0] $end
$upscope $end
$scope module CLA4_1 $end
$var wire 4 k3 A [3:0] $end
$var wire 4 l3 B [3:0] $end
$var wire 1 m3 C0 $end
$var wire 1 n3 C1 $end
$var wire 1 o3 C2 $end
$var wire 1 p3 C3 $end
$var wire 1 [3 Cin $end
$var wire 1 33 Cout $end
$var wire 1 q3 G0 $end
$var wire 1 r3 G1 $end
$var wire 1 s3 G2 $end
$var wire 1 t3 G3 $end
$var wire 1 u3 P0 $end
$var wire 1 v3 P1 $end
$var wire 1 w3 P2 $end
$var wire 1 x3 P3 $end
$var wire 4 y3 Sum [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module control0 $end
$var wire 1 ," RegWrite $end
$var wire 4 z3 opcode [3:0] $end
$var wire 1 X flagZ $end
$var wire 1 Y flagNV $end
$var wire 1 y branch_src $end
$var wire 1 z branch_inst $end
$var wire 1 +" SavePC $end
$var wire 1 -" RegDst $end
$var wire 1 {3 PCs $end
$var wire 1 ." MemtoReg $end
$var wire 1 /" MemWrite $end
$var wire 1 0" MemRead $end
$var wire 1 1" LoadPartial $end
$var wire 1 |3 Hlt $end
$var wire 1 2" ALUsrc $end
$var wire 3 }3 ALUOp [2:0] $end
$upscope $end
$scope module data_memory $end
$var wire 16 ~3 addr [15:0] $end
$var wire 1 , clk $end
$var wire 16 !4 data_in [15:0] $end
$var wire 1 "4 enable $end
$var wire 1 #4 rst $end
$var wire 1 g wr $end
$var wire 16 $4 data_out [15:0] $end
$var parameter 32 %4 ADDR_WIDTH $end
$var reg 1 &4 loaded $end
$upscope $end
$scope module fdFlop $end
$var wire 1 , clk $end
$var wire 16 '4 instruction_out [15:0] $end
$var wire 16 (4 newPC_in [15:0] $end
$var wire 16 )4 newPC_out [15:0] $end
$var wire 16 *4 oldPC_out [15:0] $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 u stopPC $end
$var wire 16 -4 oldPC_in [15:0] $end
$var wire 16 .4 instruction_in [15:0] $end
$var wire 1 /4 currentHalt $end
$scope module currentlyHalted $end
$var wire 1 /4 D $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 04 interQ $end
$var wire 1 u Q $end
$scope module flop0 $end
$var wire 1 14 clk $end
$var wire 1 /4 d $end
$var wire 1 04 q $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var reg 1 24 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 34 clk $end
$var wire 1 04 d $end
$var wire 1 u q $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var reg 1 44 state $end
$upscope $end
$upscope $end
$scope module reg_inst $end
$var wire 16 54 Bitline1 [15:0] $end
$var wire 16 64 Bitline2 [15:0] $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteReg $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 16 94 D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 :4 Bitline1 $end
$var wire 1 ;4 Bitline2 $end
$var wire 1 <4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 =4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 =4 q $end
$var reg 1 =4 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 >4 Bitline1 $end
$var wire 1 ?4 Bitline2 $end
$var wire 1 @4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 A4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 A4 q $end
$var reg 1 A4 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 B4 Bitline1 $end
$var wire 1 C4 Bitline2 $end
$var wire 1 D4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 E4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 E4 q $end
$var reg 1 E4 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 F4 Bitline1 $end
$var wire 1 G4 Bitline2 $end
$var wire 1 H4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 I4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 I4 q $end
$var reg 1 I4 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 J4 Bitline1 $end
$var wire 1 K4 Bitline2 $end
$var wire 1 L4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 M4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 M4 q $end
$var reg 1 M4 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 N4 Bitline1 $end
$var wire 1 O4 Bitline2 $end
$var wire 1 P4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 Q4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 Q4 q $end
$var reg 1 Q4 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 R4 Bitline1 $end
$var wire 1 S4 Bitline2 $end
$var wire 1 T4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 U4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 U4 q $end
$var reg 1 U4 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 V4 Bitline1 $end
$var wire 1 W4 Bitline2 $end
$var wire 1 X4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 Y4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 Y4 q $end
$var reg 1 Y4 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 Z4 Bitline1 $end
$var wire 1 [4 Bitline2 $end
$var wire 1 \4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 ]4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 ]4 q $end
$var reg 1 ]4 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 ^4 Bitline1 $end
$var wire 1 _4 Bitline2 $end
$var wire 1 `4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 a4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 a4 q $end
$var reg 1 a4 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 b4 Bitline1 $end
$var wire 1 c4 Bitline2 $end
$var wire 1 d4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 e4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 e4 q $end
$var reg 1 e4 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 f4 Bitline1 $end
$var wire 1 g4 Bitline2 $end
$var wire 1 h4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 i4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 i4 q $end
$var reg 1 i4 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 j4 Bitline1 $end
$var wire 1 k4 Bitline2 $end
$var wire 1 l4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 m4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 m4 q $end
$var reg 1 m4 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 n4 Bitline1 $end
$var wire 1 o4 Bitline2 $end
$var wire 1 p4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 q4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 q4 q $end
$var reg 1 q4 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 r4 Bitline1 $end
$var wire 1 s4 Bitline2 $end
$var wire 1 t4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 u4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 u4 q $end
$var reg 1 u4 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 v4 Bitline1 $end
$var wire 1 w4 Bitline2 $end
$var wire 1 x4 D $end
$var wire 1 74 ReadEnable1 $end
$var wire 1 84 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 y4 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x4 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 y4 q $end
$var reg 1 y4 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_newPC $end
$var wire 16 z4 Bitline1 [15:0] $end
$var wire 16 {4 Bitline2 [15:0] $end
$var wire 16 |4 D [15:0] $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteReg $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$scope module bitArray[0] $end
$var wire 1 !5 Bitline1 $end
$var wire 1 "5 Bitline2 $end
$var wire 1 #5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 $5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 #5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 $5 q $end
$var reg 1 $5 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 %5 Bitline1 $end
$var wire 1 &5 Bitline2 $end
$var wire 1 '5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 (5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 '5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 (5 q $end
$var reg 1 (5 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 )5 Bitline1 $end
$var wire 1 *5 Bitline2 $end
$var wire 1 +5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 ,5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 +5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 ,5 q $end
$var reg 1 ,5 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 -5 Bitline1 $end
$var wire 1 .5 Bitline2 $end
$var wire 1 /5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 05 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 /5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 05 q $end
$var reg 1 05 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 15 Bitline1 $end
$var wire 1 25 Bitline2 $end
$var wire 1 35 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 45 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 35 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 45 q $end
$var reg 1 45 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 55 Bitline1 $end
$var wire 1 65 Bitline2 $end
$var wire 1 75 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 85 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 75 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 85 q $end
$var reg 1 85 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 95 Bitline1 $end
$var wire 1 :5 Bitline2 $end
$var wire 1 ;5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 <5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ;5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 <5 q $end
$var reg 1 <5 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 =5 Bitline1 $end
$var wire 1 >5 Bitline2 $end
$var wire 1 ?5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 @5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ?5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 @5 q $end
$var reg 1 @5 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 A5 Bitline1 $end
$var wire 1 B5 Bitline2 $end
$var wire 1 C5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 D5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 C5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 D5 q $end
$var reg 1 D5 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 E5 Bitline1 $end
$var wire 1 F5 Bitline2 $end
$var wire 1 G5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 H5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 G5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 H5 q $end
$var reg 1 H5 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 I5 Bitline1 $end
$var wire 1 J5 Bitline2 $end
$var wire 1 K5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 L5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 K5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 L5 q $end
$var reg 1 L5 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 M5 Bitline1 $end
$var wire 1 N5 Bitline2 $end
$var wire 1 O5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 P5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 O5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 P5 q $end
$var reg 1 P5 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 Q5 Bitline1 $end
$var wire 1 R5 Bitline2 $end
$var wire 1 S5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 T5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 S5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 T5 q $end
$var reg 1 T5 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 U5 Bitline1 $end
$var wire 1 V5 Bitline2 $end
$var wire 1 W5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 X5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 W5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 X5 q $end
$var reg 1 X5 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 Y5 Bitline1 $end
$var wire 1 Z5 Bitline2 $end
$var wire 1 [5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 \5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 [5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 \5 q $end
$var reg 1 \5 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 ]5 Bitline1 $end
$var wire 1 ^5 Bitline2 $end
$var wire 1 _5 D $end
$var wire 1 }4 ReadEnable1 $end
$var wire 1 ~4 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 `5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 _5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 `5 q $end
$var reg 1 `5 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_oldPC $end
$var wire 16 a5 Bitline1 [15:0] $end
$var wire 16 b5 Bitline2 [15:0] $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteReg $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 16 e5 D [15:0] $end
$scope module bitArray[0] $end
$var wire 1 f5 Bitline1 $end
$var wire 1 g5 Bitline2 $end
$var wire 1 h5 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 i5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 i5 q $end
$var reg 1 i5 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 j5 Bitline1 $end
$var wire 1 k5 Bitline2 $end
$var wire 1 l5 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 m5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 m5 q $end
$var reg 1 m5 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 n5 Bitline1 $end
$var wire 1 o5 Bitline2 $end
$var wire 1 p5 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 q5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 q5 q $end
$var reg 1 q5 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 r5 Bitline1 $end
$var wire 1 s5 Bitline2 $end
$var wire 1 t5 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 u5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 u5 q $end
$var reg 1 u5 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 v5 Bitline1 $end
$var wire 1 w5 Bitline2 $end
$var wire 1 x5 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 y5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 y5 q $end
$var reg 1 y5 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 z5 Bitline1 $end
$var wire 1 {5 Bitline2 $end
$var wire 1 |5 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 }5 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |5 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 }5 q $end
$var reg 1 }5 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 ~5 Bitline1 $end
$var wire 1 !6 Bitline2 $end
$var wire 1 "6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 #6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 #6 q $end
$var reg 1 #6 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 $6 Bitline1 $end
$var wire 1 %6 Bitline2 $end
$var wire 1 &6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 '6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 '6 q $end
$var reg 1 '6 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 (6 Bitline1 $end
$var wire 1 )6 Bitline2 $end
$var wire 1 *6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 +6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 +6 q $end
$var reg 1 +6 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 ,6 Bitline1 $end
$var wire 1 -6 Bitline2 $end
$var wire 1 .6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 /6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 /6 q $end
$var reg 1 /6 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 06 Bitline1 $end
$var wire 1 16 Bitline2 $end
$var wire 1 26 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 36 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 26 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 36 q $end
$var reg 1 36 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 46 Bitline1 $end
$var wire 1 56 Bitline2 $end
$var wire 1 66 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 76 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 66 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 76 q $end
$var reg 1 76 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 86 Bitline1 $end
$var wire 1 96 Bitline2 $end
$var wire 1 :6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 ;6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 ;6 q $end
$var reg 1 ;6 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 <6 Bitline1 $end
$var wire 1 =6 Bitline2 $end
$var wire 1 >6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 ?6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 ?6 q $end
$var reg 1 ?6 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 @6 Bitline1 $end
$var wire 1 A6 Bitline2 $end
$var wire 1 B6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 C6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 C6 q $end
$var reg 1 C6 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 D6 Bitline1 $end
$var wire 1 E6 Bitline2 $end
$var wire 1 F6 D $end
$var wire 1 c5 ReadEnable1 $end
$var wire 1 d5 ReadEnable2 $end
$var wire 1 ,4 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 +4 rst $end
$var wire 1 G6 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F6 d $end
$var wire 1 +4 rst $end
$var wire 1 ,4 wen $end
$var wire 1 G6 q $end
$var reg 1 G6 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module flg_reg0 $end
$var wire 1 , clk $end
$var wire 1 H6 en $end
$var wire 3 I6 flags [2:0] $end
$var wire 3 J6 opcode [2:0] $end
$var wire 1 - rst_n $end
$var wire 3 K6 flagOuputs [2:0] $end
$var wire 1 L6 Z_flag $end
$var wire 1 M6 V_flag $end
$var wire 1 N6 N_flag $end
$scope module regn $end
$var wire 1 O6 D $end
$var wire 1 , clk $end
$var wire 1 P6 rst $end
$var wire 1 Q6 wen $end
$var wire 1 R6 interQ $end
$var wire 1 S6 Q $end
$scope module flop0 $end
$var wire 1 T6 clk $end
$var wire 1 O6 d $end
$var wire 1 R6 q $end
$var wire 1 P6 rst $end
$var wire 1 Q6 wen $end
$var reg 1 U6 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 V6 clk $end
$var wire 1 R6 d $end
$var wire 1 P6 rst $end
$var wire 1 Q6 wen $end
$var wire 1 S6 q $end
$var reg 1 S6 state $end
$upscope $end
$upscope $end
$scope module regv $end
$var wire 1 W6 D $end
$var wire 1 , clk $end
$var wire 1 X6 rst $end
$var wire 1 Y6 wen $end
$var wire 1 Z6 interQ $end
$var wire 1 [6 Q $end
$scope module flop0 $end
$var wire 1 \6 clk $end
$var wire 1 W6 d $end
$var wire 1 Z6 q $end
$var wire 1 X6 rst $end
$var wire 1 Y6 wen $end
$var reg 1 ]6 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 ^6 clk $end
$var wire 1 Z6 d $end
$var wire 1 X6 rst $end
$var wire 1 Y6 wen $end
$var wire 1 [6 q $end
$var reg 1 [6 state $end
$upscope $end
$upscope $end
$scope module regz $end
$var wire 1 _6 D $end
$var wire 1 , clk $end
$var wire 1 `6 rst $end
$var wire 1 H6 wen $end
$var wire 1 a6 interQ $end
$var wire 1 b6 Q $end
$scope module flop0 $end
$var wire 1 c6 clk $end
$var wire 1 _6 d $end
$var wire 1 a6 q $end
$var wire 1 `6 rst $end
$var wire 1 H6 wen $end
$var reg 1 d6 state $end
$upscope $end
$scope module flop1 $end
$var wire 1 e6 clk $end
$var wire 1 a6 d $end
$var wire 1 `6 rst $end
$var wire 1 H6 wen $end
$var wire 1 b6 q $end
$var reg 1 b6 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module frwd_unit $end
$var wire 4 f6 D_X_reg_source1 [3:0] $end
$var wire 4 g6 D_X_reg_source2 [3:0] $end
$var wire 1 ` EXtoEX_frwdA $end
$var wire 1 _ EXtoEX_frwdB $end
$var wire 1 n MEMtoEX_frwdA $end
$var wire 1 m MEMtoEX_frwdB $end
$var wire 1 t MEMtoMEM_frwdB $end
$var wire 1 r M_W_RegWrite $end
$var wire 4 h6 M_W_reg_dest [3:0] $end
$var wire 1 g X_M_MemWrite $end
$var wire 1 e X_M_RegWrite $end
$var wire 4 i6 X_M_reg_dest [3:0] $end
$var wire 4 j6 X_M_reg_source2 [3:0] $end
$upscope $end
$scope module hazard_detect0 $end
$var wire 4 k6 D_X_destination_reg [3:0] $end
$var wire 4 l6 D_source_reg [3:0] $end
$var wire 4 m6 opcode [3:0] $end
$var wire 1 K stall $end
$upscope $end
$scope module inst_memory $end
$var wire 1 , clk $end
$var wire 16 n6 data_in [15:0] $end
$var wire 1 o6 enable $end
$var wire 1 p6 rst $end
$var wire 1 q6 wr $end
$var wire 16 r6 data_out [15:0] $end
$var wire 16 s6 addr [15:0] $end
$var parameter 32 t6 ADDR_WIDTH $end
$var reg 1 u6 loaded $end
$upscope $end
$scope module pc0 $end
$var wire 16 v6 blank1 [15:0] $end
$var wire 16 w6 blank2 [15:0] $end
$var wire 1 , clk $end
$var wire 1 x6 en $end
$var wire 16 y6 internalPC1 [15:0] $end
$var wire 16 z6 internalPC2 [15:0] $end
$var wire 16 {6 next [15:0] $end
$var wire 1 - rst_n $end
$var wire 16 |6 PC [15:0] $end
$scope module reg0 $end
$var wire 16 }6 Bitline1 [15:0] $end
$var wire 16 ~6 Bitline2 [15:0] $end
$var wire 16 !7 D [15:0] $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteReg $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$scope module bitArray[0] $end
$var wire 1 '7 Bitline1 $end
$var wire 1 (7 Bitline2 $end
$var wire 1 )7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 *7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 )7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 *7 q $end
$var reg 1 *7 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 +7 Bitline1 $end
$var wire 1 ,7 Bitline2 $end
$var wire 1 -7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 .7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 -7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 .7 q $end
$var reg 1 .7 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 /7 Bitline1 $end
$var wire 1 07 Bitline2 $end
$var wire 1 17 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 27 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 17 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 27 q $end
$var reg 1 27 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 37 Bitline1 $end
$var wire 1 47 Bitline2 $end
$var wire 1 57 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 67 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 57 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 67 q $end
$var reg 1 67 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 77 Bitline1 $end
$var wire 1 87 Bitline2 $end
$var wire 1 97 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 :7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 97 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 :7 q $end
$var reg 1 :7 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 ;7 Bitline1 $end
$var wire 1 <7 Bitline2 $end
$var wire 1 =7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 >7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 =7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 >7 q $end
$var reg 1 >7 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 ?7 Bitline1 $end
$var wire 1 @7 Bitline2 $end
$var wire 1 A7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 B7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 A7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 B7 q $end
$var reg 1 B7 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 C7 Bitline1 $end
$var wire 1 D7 Bitline2 $end
$var wire 1 E7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 F7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 E7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 F7 q $end
$var reg 1 F7 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 G7 Bitline1 $end
$var wire 1 H7 Bitline2 $end
$var wire 1 I7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 J7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 I7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 J7 q $end
$var reg 1 J7 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 K7 Bitline1 $end
$var wire 1 L7 Bitline2 $end
$var wire 1 M7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 N7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 M7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 N7 q $end
$var reg 1 N7 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 O7 Bitline1 $end
$var wire 1 P7 Bitline2 $end
$var wire 1 Q7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 R7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 Q7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 R7 q $end
$var reg 1 R7 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 S7 Bitline1 $end
$var wire 1 T7 Bitline2 $end
$var wire 1 U7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 V7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 U7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 V7 q $end
$var reg 1 V7 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 W7 Bitline1 $end
$var wire 1 X7 Bitline2 $end
$var wire 1 Y7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 Z7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 Y7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 Z7 q $end
$var reg 1 Z7 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 [7 Bitline1 $end
$var wire 1 \7 Bitline2 $end
$var wire 1 ]7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 ^7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 ]7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 ^7 q $end
$var reg 1 ^7 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 _7 Bitline1 $end
$var wire 1 `7 Bitline2 $end
$var wire 1 a7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 b7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 a7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 b7 q $end
$var reg 1 b7 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 c7 Bitline1 $end
$var wire 1 d7 Bitline2 $end
$var wire 1 e7 D $end
$var wire 1 "7 ReadEnable1 $end
$var wire 1 #7 ReadEnable2 $end
$var wire 1 $7 WriteEnable $end
$var wire 1 %7 clk $end
$var wire 1 &7 rst $end
$var wire 1 f7 dffOut $end
$scope module floppy $end
$var wire 1 %7 clk $end
$var wire 1 e7 d $end
$var wire 1 &7 rst $end
$var wire 1 $7 wen $end
$var wire 1 f7 q $end
$var reg 1 f7 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg1 $end
$var wire 16 g7 Bitline1 [15:0] $end
$var wire 16 h7 Bitline2 [15:0] $end
$var wire 16 i7 D [15:0] $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteReg $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$scope module bitArray[0] $end
$var wire 1 n7 Bitline1 $end
$var wire 1 o7 Bitline2 $end
$var wire 1 p7 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 q7 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p7 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 q7 q $end
$var reg 1 q7 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 r7 Bitline1 $end
$var wire 1 s7 Bitline2 $end
$var wire 1 t7 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 u7 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t7 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 u7 q $end
$var reg 1 u7 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 v7 Bitline1 $end
$var wire 1 w7 Bitline2 $end
$var wire 1 x7 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 y7 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x7 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 y7 q $end
$var reg 1 y7 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 z7 Bitline1 $end
$var wire 1 {7 Bitline2 $end
$var wire 1 |7 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 }7 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |7 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 }7 q $end
$var reg 1 }7 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 ~7 Bitline1 $end
$var wire 1 !8 Bitline2 $end
$var wire 1 "8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 #8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 #8 q $end
$var reg 1 #8 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 $8 Bitline1 $end
$var wire 1 %8 Bitline2 $end
$var wire 1 &8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 '8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 '8 q $end
$var reg 1 '8 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 (8 Bitline1 $end
$var wire 1 )8 Bitline2 $end
$var wire 1 *8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 +8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 +8 q $end
$var reg 1 +8 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 ,8 Bitline1 $end
$var wire 1 -8 Bitline2 $end
$var wire 1 .8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 /8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 /8 q $end
$var reg 1 /8 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 08 Bitline1 $end
$var wire 1 18 Bitline2 $end
$var wire 1 28 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 38 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 28 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 38 q $end
$var reg 1 38 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 48 Bitline1 $end
$var wire 1 58 Bitline2 $end
$var wire 1 68 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 78 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 68 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 78 q $end
$var reg 1 78 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 88 Bitline1 $end
$var wire 1 98 Bitline2 $end
$var wire 1 :8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 ;8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 ;8 q $end
$var reg 1 ;8 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 <8 Bitline1 $end
$var wire 1 =8 Bitline2 $end
$var wire 1 >8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 ?8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 ?8 q $end
$var reg 1 ?8 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 @8 Bitline1 $end
$var wire 1 A8 Bitline2 $end
$var wire 1 B8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 C8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 C8 q $end
$var reg 1 C8 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 D8 Bitline1 $end
$var wire 1 E8 Bitline2 $end
$var wire 1 F8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 G8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 G8 q $end
$var reg 1 G8 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 H8 Bitline1 $end
$var wire 1 I8 Bitline2 $end
$var wire 1 J8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 K8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 K8 q $end
$var reg 1 K8 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 L8 Bitline1 $end
$var wire 1 M8 Bitline2 $end
$var wire 1 N8 D $end
$var wire 1 j7 ReadEnable1 $end
$var wire 1 k7 ReadEnable2 $end
$var wire 1 l7 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 m7 rst $end
$var wire 1 O8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N8 d $end
$var wire 1 m7 rst $end
$var wire 1 l7 wen $end
$var wire 1 O8 q $end
$var reg 1 O8 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module rf_0 $end
$var wire 16 P8 DstData [15:0] $end
$var wire 4 Q8 DstReg [3:0] $end
$var wire 4 R8 SrcReg1 [3:0] $end
$var wire 4 S8 SrcReg2 [3:0] $end
$var wire 1 r WriteReg $end
$var wire 1 , clk $end
$var wire 16 T8 imm1 [15:0] $end
$var wire 16 U8 imm2 [15:0] $end
$var wire 1 V8 rst $end
$var wire 16 W8 WriteLine [15:0] $end
$var wire 16 X8 SrcData2 [15:0] $end
$var wire 16 Y8 SrcData1 [15:0] $end
$var wire 16 Z8 ReadLine2 [15:0] $end
$var wire 16 [8 ReadLine1 [15:0] $end
$scope module readDecoder1 $end
$var wire 4 \8 RegId [3:0] $end
$var wire 16 ]8 Wordline [15:0] $end
$upscope $end
$scope module readDecoder2 $end
$var wire 4 ^8 RegId [3:0] $end
$var wire 16 _8 Wordline [15:0] $end
$upscope $end
$scope module regArray[0] $end
$var wire 16 `8 Bitline1 [15:0] $end
$var wire 16 a8 Bitline2 [15:0] $end
$var wire 16 b8 D [15:0] $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 f8 Bitline1 $end
$var wire 1 g8 Bitline2 $end
$var wire 1 h8 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 i8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h8 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 i8 q $end
$var reg 1 i8 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 j8 Bitline1 $end
$var wire 1 k8 Bitline2 $end
$var wire 1 l8 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 m8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l8 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 m8 q $end
$var reg 1 m8 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 n8 Bitline1 $end
$var wire 1 o8 Bitline2 $end
$var wire 1 p8 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 q8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p8 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 q8 q $end
$var reg 1 q8 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 r8 Bitline1 $end
$var wire 1 s8 Bitline2 $end
$var wire 1 t8 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 u8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t8 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 u8 q $end
$var reg 1 u8 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 v8 Bitline1 $end
$var wire 1 w8 Bitline2 $end
$var wire 1 x8 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 y8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x8 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 y8 q $end
$var reg 1 y8 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 z8 Bitline1 $end
$var wire 1 {8 Bitline2 $end
$var wire 1 |8 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 }8 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |8 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 }8 q $end
$var reg 1 }8 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 ~8 Bitline1 $end
$var wire 1 !9 Bitline2 $end
$var wire 1 "9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 #9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 #9 q $end
$var reg 1 #9 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 $9 Bitline1 $end
$var wire 1 %9 Bitline2 $end
$var wire 1 &9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 '9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 '9 q $end
$var reg 1 '9 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 (9 Bitline1 $end
$var wire 1 )9 Bitline2 $end
$var wire 1 *9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 +9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 +9 q $end
$var reg 1 +9 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 ,9 Bitline1 $end
$var wire 1 -9 Bitline2 $end
$var wire 1 .9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 /9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 /9 q $end
$var reg 1 /9 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 09 Bitline1 $end
$var wire 1 19 Bitline2 $end
$var wire 1 29 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 39 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 29 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 39 q $end
$var reg 1 39 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 49 Bitline1 $end
$var wire 1 59 Bitline2 $end
$var wire 1 69 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 79 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 69 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 79 q $end
$var reg 1 79 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 89 Bitline1 $end
$var wire 1 99 Bitline2 $end
$var wire 1 :9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ;9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 ;9 q $end
$var reg 1 ;9 state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 <9 Bitline1 $end
$var wire 1 =9 Bitline2 $end
$var wire 1 >9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ?9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 ?9 q $end
$var reg 1 ?9 state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 @9 Bitline1 $end
$var wire 1 A9 Bitline2 $end
$var wire 1 B9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 C9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 C9 q $end
$var reg 1 C9 state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 D9 Bitline1 $end
$var wire 1 E9 Bitline2 $end
$var wire 1 F9 D $end
$var wire 1 c8 ReadEnable1 $end
$var wire 1 d8 ReadEnable2 $end
$var wire 1 e8 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 G9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F9 d $end
$var wire 1 V8 rst $end
$var wire 1 e8 wen $end
$var wire 1 G9 q $end
$var reg 1 G9 state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[1] $end
$var wire 16 H9 Bitline1 [15:0] $end
$var wire 16 I9 Bitline2 [15:0] $end
$var wire 16 J9 D [15:0] $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 N9 Bitline1 $end
$var wire 1 O9 Bitline2 $end
$var wire 1 P9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Q9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 Q9 q $end
$var reg 1 Q9 state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 R9 Bitline1 $end
$var wire 1 S9 Bitline2 $end
$var wire 1 T9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 U9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 U9 q $end
$var reg 1 U9 state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 V9 Bitline1 $end
$var wire 1 W9 Bitline2 $end
$var wire 1 X9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Y9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 Y9 q $end
$var reg 1 Y9 state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 Z9 Bitline1 $end
$var wire 1 [9 Bitline2 $end
$var wire 1 \9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ]9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 ]9 q $end
$var reg 1 ]9 state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 ^9 Bitline1 $end
$var wire 1 _9 Bitline2 $end
$var wire 1 `9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 a9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 a9 q $end
$var reg 1 a9 state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 b9 Bitline1 $end
$var wire 1 c9 Bitline2 $end
$var wire 1 d9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 e9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 e9 q $end
$var reg 1 e9 state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 f9 Bitline1 $end
$var wire 1 g9 Bitline2 $end
$var wire 1 h9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 i9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 i9 q $end
$var reg 1 i9 state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 j9 Bitline1 $end
$var wire 1 k9 Bitline2 $end
$var wire 1 l9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 m9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 m9 q $end
$var reg 1 m9 state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 n9 Bitline1 $end
$var wire 1 o9 Bitline2 $end
$var wire 1 p9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 q9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 q9 q $end
$var reg 1 q9 state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 r9 Bitline1 $end
$var wire 1 s9 Bitline2 $end
$var wire 1 t9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 u9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 u9 q $end
$var reg 1 u9 state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 v9 Bitline1 $end
$var wire 1 w9 Bitline2 $end
$var wire 1 x9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 y9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 y9 q $end
$var reg 1 y9 state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 z9 Bitline1 $end
$var wire 1 {9 Bitline2 $end
$var wire 1 |9 D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 }9 dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |9 d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 }9 q $end
$var reg 1 }9 state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 ~9 Bitline1 $end
$var wire 1 !: Bitline2 $end
$var wire 1 ": D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 #: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ": d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 #: q $end
$var reg 1 #: state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 $: Bitline1 $end
$var wire 1 %: Bitline2 $end
$var wire 1 &: D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ': dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &: d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 ': q $end
$var reg 1 ': state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 (: Bitline1 $end
$var wire 1 ): Bitline2 $end
$var wire 1 *: D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 +: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *: d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 +: q $end
$var reg 1 +: state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 ,: Bitline1 $end
$var wire 1 -: Bitline2 $end
$var wire 1 .: D $end
$var wire 1 K9 ReadEnable1 $end
$var wire 1 L9 ReadEnable2 $end
$var wire 1 M9 WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 /: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .: d $end
$var wire 1 V8 rst $end
$var wire 1 M9 wen $end
$var wire 1 /: q $end
$var reg 1 /: state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[2] $end
$var wire 16 0: Bitline1 [15:0] $end
$var wire 16 1: Bitline2 [15:0] $end
$var wire 16 2: D [15:0] $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 6: Bitline1 $end
$var wire 1 7: Bitline2 $end
$var wire 1 8: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 9: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 9: q $end
$var reg 1 9: state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 :: Bitline1 $end
$var wire 1 ;: Bitline2 $end
$var wire 1 <: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 =: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 =: q $end
$var reg 1 =: state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 >: Bitline1 $end
$var wire 1 ?: Bitline2 $end
$var wire 1 @: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 A: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 A: q $end
$var reg 1 A: state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 B: Bitline1 $end
$var wire 1 C: Bitline2 $end
$var wire 1 D: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 E: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 E: q $end
$var reg 1 E: state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 F: Bitline1 $end
$var wire 1 G: Bitline2 $end
$var wire 1 H: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 I: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 I: q $end
$var reg 1 I: state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 J: Bitline1 $end
$var wire 1 K: Bitline2 $end
$var wire 1 L: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 M: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 M: q $end
$var reg 1 M: state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 N: Bitline1 $end
$var wire 1 O: Bitline2 $end
$var wire 1 P: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Q: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 Q: q $end
$var reg 1 Q: state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 R: Bitline1 $end
$var wire 1 S: Bitline2 $end
$var wire 1 T: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 U: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 U: q $end
$var reg 1 U: state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 V: Bitline1 $end
$var wire 1 W: Bitline2 $end
$var wire 1 X: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Y: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 Y: q $end
$var reg 1 Y: state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 Z: Bitline1 $end
$var wire 1 [: Bitline2 $end
$var wire 1 \: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ]: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 ]: q $end
$var reg 1 ]: state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ^: Bitline1 $end
$var wire 1 _: Bitline2 $end
$var wire 1 `: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 a: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 a: q $end
$var reg 1 a: state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 b: Bitline1 $end
$var wire 1 c: Bitline2 $end
$var wire 1 d: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 e: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 e: q $end
$var reg 1 e: state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 f: Bitline1 $end
$var wire 1 g: Bitline2 $end
$var wire 1 h: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 i: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 i: q $end
$var reg 1 i: state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 j: Bitline1 $end
$var wire 1 k: Bitline2 $end
$var wire 1 l: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 m: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 m: q $end
$var reg 1 m: state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 n: Bitline1 $end
$var wire 1 o: Bitline2 $end
$var wire 1 p: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 q: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 q: q $end
$var reg 1 q: state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 r: Bitline1 $end
$var wire 1 s: Bitline2 $end
$var wire 1 t: D $end
$var wire 1 3: ReadEnable1 $end
$var wire 1 4: ReadEnable2 $end
$var wire 1 5: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 u: dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t: d $end
$var wire 1 V8 rst $end
$var wire 1 5: wen $end
$var wire 1 u: q $end
$var reg 1 u: state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[3] $end
$var wire 16 v: Bitline1 [15:0] $end
$var wire 16 w: Bitline2 [15:0] $end
$var wire 16 x: D [15:0] $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 |: Bitline1 $end
$var wire 1 }: Bitline2 $end
$var wire 1 ~: D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 !; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~: d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 !; q $end
$var reg 1 !; state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 "; Bitline1 $end
$var wire 1 #; Bitline2 $end
$var wire 1 $; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 %; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 %; q $end
$var reg 1 %; state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 &; Bitline1 $end
$var wire 1 '; Bitline2 $end
$var wire 1 (; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ); dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 ); q $end
$var reg 1 ); state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 *; Bitline1 $end
$var wire 1 +; Bitline2 $end
$var wire 1 ,; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 -; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 -; q $end
$var reg 1 -; state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 .; Bitline1 $end
$var wire 1 /; Bitline2 $end
$var wire 1 0; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 1; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 1; q $end
$var reg 1 1; state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 2; Bitline1 $end
$var wire 1 3; Bitline2 $end
$var wire 1 4; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 5; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 5; q $end
$var reg 1 5; state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 6; Bitline1 $end
$var wire 1 7; Bitline2 $end
$var wire 1 8; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 9; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 9; q $end
$var reg 1 9; state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 :; Bitline1 $end
$var wire 1 ;; Bitline2 $end
$var wire 1 <; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 =; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 =; q $end
$var reg 1 =; state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 >; Bitline1 $end
$var wire 1 ?; Bitline2 $end
$var wire 1 @; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 A; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 A; q $end
$var reg 1 A; state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 B; Bitline1 $end
$var wire 1 C; Bitline2 $end
$var wire 1 D; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 E; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 E; q $end
$var reg 1 E; state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 F; Bitline1 $end
$var wire 1 G; Bitline2 $end
$var wire 1 H; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 I; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 I; q $end
$var reg 1 I; state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 J; Bitline1 $end
$var wire 1 K; Bitline2 $end
$var wire 1 L; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 M; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 M; q $end
$var reg 1 M; state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 N; Bitline1 $end
$var wire 1 O; Bitline2 $end
$var wire 1 P; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Q; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 Q; q $end
$var reg 1 Q; state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 R; Bitline1 $end
$var wire 1 S; Bitline2 $end
$var wire 1 T; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 U; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 U; q $end
$var reg 1 U; state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 V; Bitline1 $end
$var wire 1 W; Bitline2 $end
$var wire 1 X; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Y; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 Y; q $end
$var reg 1 Y; state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 Z; Bitline1 $end
$var wire 1 [; Bitline2 $end
$var wire 1 \; D $end
$var wire 1 y: ReadEnable1 $end
$var wire 1 z: ReadEnable2 $end
$var wire 1 {: WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ]; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \; d $end
$var wire 1 V8 rst $end
$var wire 1 {: wen $end
$var wire 1 ]; q $end
$var reg 1 ]; state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[4] $end
$var wire 16 ^; Bitline1 [15:0] $end
$var wire 16 _; Bitline2 [15:0] $end
$var wire 16 `; D [15:0] $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 d; Bitline1 $end
$var wire 1 e; Bitline2 $end
$var wire 1 f; D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 g; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f; d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 g; q $end
$var reg 1 g; state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 h; Bitline1 $end
$var wire 1 i; Bitline2 $end
$var wire 1 j; D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 k; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j; d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 k; q $end
$var reg 1 k; state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 l; Bitline1 $end
$var wire 1 m; Bitline2 $end
$var wire 1 n; D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 o; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n; d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 o; q $end
$var reg 1 o; state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 p; Bitline1 $end
$var wire 1 q; Bitline2 $end
$var wire 1 r; D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 s; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r; d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 s; q $end
$var reg 1 s; state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 t; Bitline1 $end
$var wire 1 u; Bitline2 $end
$var wire 1 v; D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 w; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v; d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 w; q $end
$var reg 1 w; state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 x; Bitline1 $end
$var wire 1 y; Bitline2 $end
$var wire 1 z; D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 {; dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z; d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 {; q $end
$var reg 1 {; state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 |; Bitline1 $end
$var wire 1 }; Bitline2 $end
$var wire 1 ~; D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 !< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~; d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 !< q $end
$var reg 1 !< state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 "< Bitline1 $end
$var wire 1 #< Bitline2 $end
$var wire 1 $< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 %< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 %< q $end
$var reg 1 %< state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 &< Bitline1 $end
$var wire 1 '< Bitline2 $end
$var wire 1 (< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 )< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 )< q $end
$var reg 1 )< state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 *< Bitline1 $end
$var wire 1 +< Bitline2 $end
$var wire 1 ,< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 -< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 -< q $end
$var reg 1 -< state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 .< Bitline1 $end
$var wire 1 /< Bitline2 $end
$var wire 1 0< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 1< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 1< q $end
$var reg 1 1< state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 2< Bitline1 $end
$var wire 1 3< Bitline2 $end
$var wire 1 4< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 5< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 5< q $end
$var reg 1 5< state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 6< Bitline1 $end
$var wire 1 7< Bitline2 $end
$var wire 1 8< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 9< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 9< q $end
$var reg 1 9< state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 :< Bitline1 $end
$var wire 1 ;< Bitline2 $end
$var wire 1 << D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 =< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 << d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 =< q $end
$var reg 1 =< state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 >< Bitline1 $end
$var wire 1 ?< Bitline2 $end
$var wire 1 @< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 A< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 A< q $end
$var reg 1 A< state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 B< Bitline1 $end
$var wire 1 C< Bitline2 $end
$var wire 1 D< D $end
$var wire 1 a; ReadEnable1 $end
$var wire 1 b; ReadEnable2 $end
$var wire 1 c; WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 E< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D< d $end
$var wire 1 V8 rst $end
$var wire 1 c; wen $end
$var wire 1 E< q $end
$var reg 1 E< state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[5] $end
$var wire 16 F< Bitline1 [15:0] $end
$var wire 16 G< Bitline2 [15:0] $end
$var wire 16 H< D [15:0] $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 L< Bitline1 $end
$var wire 1 M< Bitline2 $end
$var wire 1 N< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 O< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 O< q $end
$var reg 1 O< state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 P< Bitline1 $end
$var wire 1 Q< Bitline2 $end
$var wire 1 R< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 S< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 S< q $end
$var reg 1 S< state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 T< Bitline1 $end
$var wire 1 U< Bitline2 $end
$var wire 1 V< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 W< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 W< q $end
$var reg 1 W< state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 X< Bitline1 $end
$var wire 1 Y< Bitline2 $end
$var wire 1 Z< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 [< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 [< q $end
$var reg 1 [< state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 \< Bitline1 $end
$var wire 1 ]< Bitline2 $end
$var wire 1 ^< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 _< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 _< q $end
$var reg 1 _< state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 `< Bitline1 $end
$var wire 1 a< Bitline2 $end
$var wire 1 b< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 c< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 c< q $end
$var reg 1 c< state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 d< Bitline1 $end
$var wire 1 e< Bitline2 $end
$var wire 1 f< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 g< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 g< q $end
$var reg 1 g< state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 h< Bitline1 $end
$var wire 1 i< Bitline2 $end
$var wire 1 j< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 k< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 k< q $end
$var reg 1 k< state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 l< Bitline1 $end
$var wire 1 m< Bitline2 $end
$var wire 1 n< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 o< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 o< q $end
$var reg 1 o< state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 p< Bitline1 $end
$var wire 1 q< Bitline2 $end
$var wire 1 r< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 s< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 s< q $end
$var reg 1 s< state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 t< Bitline1 $end
$var wire 1 u< Bitline2 $end
$var wire 1 v< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 w< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 v< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 w< q $end
$var reg 1 w< state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 x< Bitline1 $end
$var wire 1 y< Bitline2 $end
$var wire 1 z< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 {< dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 {< q $end
$var reg 1 {< state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 |< Bitline1 $end
$var wire 1 }< Bitline2 $end
$var wire 1 ~< D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 != dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~< d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 != q $end
$var reg 1 != state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 "= Bitline1 $end
$var wire 1 #= Bitline2 $end
$var wire 1 $= D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 %= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $= d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 %= q $end
$var reg 1 %= state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 &= Bitline1 $end
$var wire 1 '= Bitline2 $end
$var wire 1 (= D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 )= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (= d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 )= q $end
$var reg 1 )= state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 *= Bitline1 $end
$var wire 1 += Bitline2 $end
$var wire 1 ,= D $end
$var wire 1 I< ReadEnable1 $end
$var wire 1 J< ReadEnable2 $end
$var wire 1 K< WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 -= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,= d $end
$var wire 1 V8 rst $end
$var wire 1 K< wen $end
$var wire 1 -= q $end
$var reg 1 -= state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[6] $end
$var wire 16 .= Bitline1 [15:0] $end
$var wire 16 /= Bitline2 [15:0] $end
$var wire 16 0= D [15:0] $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 4= Bitline1 $end
$var wire 1 5= Bitline2 $end
$var wire 1 6= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 7= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 7= q $end
$var reg 1 7= state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 8= Bitline1 $end
$var wire 1 9= Bitline2 $end
$var wire 1 := D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ;= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 := d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 ;= q $end
$var reg 1 ;= state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 <= Bitline1 $end
$var wire 1 == Bitline2 $end
$var wire 1 >= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ?= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 ?= q $end
$var reg 1 ?= state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 @= Bitline1 $end
$var wire 1 A= Bitline2 $end
$var wire 1 B= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 C= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 C= q $end
$var reg 1 C= state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 D= Bitline1 $end
$var wire 1 E= Bitline2 $end
$var wire 1 F= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 G= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 G= q $end
$var reg 1 G= state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 H= Bitline1 $end
$var wire 1 I= Bitline2 $end
$var wire 1 J= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 K= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 K= q $end
$var reg 1 K= state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 L= Bitline1 $end
$var wire 1 M= Bitline2 $end
$var wire 1 N= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 O= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 O= q $end
$var reg 1 O= state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 P= Bitline1 $end
$var wire 1 Q= Bitline2 $end
$var wire 1 R= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 S= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 S= q $end
$var reg 1 S= state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 T= Bitline1 $end
$var wire 1 U= Bitline2 $end
$var wire 1 V= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 W= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 W= q $end
$var reg 1 W= state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 X= Bitline1 $end
$var wire 1 Y= Bitline2 $end
$var wire 1 Z= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 [= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 [= q $end
$var reg 1 [= state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 \= Bitline1 $end
$var wire 1 ]= Bitline2 $end
$var wire 1 ^= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 _= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 _= q $end
$var reg 1 _= state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 `= Bitline1 $end
$var wire 1 a= Bitline2 $end
$var wire 1 b= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 c= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 b= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 c= q $end
$var reg 1 c= state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 d= Bitline1 $end
$var wire 1 e= Bitline2 $end
$var wire 1 f= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 g= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 f= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 g= q $end
$var reg 1 g= state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 h= Bitline1 $end
$var wire 1 i= Bitline2 $end
$var wire 1 j= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 k= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 j= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 k= q $end
$var reg 1 k= state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 l= Bitline1 $end
$var wire 1 m= Bitline2 $end
$var wire 1 n= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 o= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 n= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 o= q $end
$var reg 1 o= state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 p= Bitline1 $end
$var wire 1 q= Bitline2 $end
$var wire 1 r= D $end
$var wire 1 1= ReadEnable1 $end
$var wire 1 2= ReadEnable2 $end
$var wire 1 3= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 s= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 r= d $end
$var wire 1 V8 rst $end
$var wire 1 3= wen $end
$var wire 1 s= q $end
$var reg 1 s= state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[7] $end
$var wire 16 t= Bitline1 [15:0] $end
$var wire 16 u= Bitline2 [15:0] $end
$var wire 16 v= D [15:0] $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 z= Bitline1 $end
$var wire 1 {= Bitline2 $end
$var wire 1 |= D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 }= dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |= d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 }= q $end
$var reg 1 }= state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 ~= Bitline1 $end
$var wire 1 !> Bitline2 $end
$var wire 1 "> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 #> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 #> q $end
$var reg 1 #> state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 $> Bitline1 $end
$var wire 1 %> Bitline2 $end
$var wire 1 &> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 '> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 '> q $end
$var reg 1 '> state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 (> Bitline1 $end
$var wire 1 )> Bitline2 $end
$var wire 1 *> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 +> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 +> q $end
$var reg 1 +> state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 ,> Bitline1 $end
$var wire 1 -> Bitline2 $end
$var wire 1 .> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 /> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 /> q $end
$var reg 1 /> state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 0> Bitline1 $end
$var wire 1 1> Bitline2 $end
$var wire 1 2> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 3> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 3> q $end
$var reg 1 3> state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 4> Bitline1 $end
$var wire 1 5> Bitline2 $end
$var wire 1 6> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 7> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 7> q $end
$var reg 1 7> state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 8> Bitline1 $end
$var wire 1 9> Bitline2 $end
$var wire 1 :> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ;> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 ;> q $end
$var reg 1 ;> state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 <> Bitline1 $end
$var wire 1 => Bitline2 $end
$var wire 1 >> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ?> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 ?> q $end
$var reg 1 ?> state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 @> Bitline1 $end
$var wire 1 A> Bitline2 $end
$var wire 1 B> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 C> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 C> q $end
$var reg 1 C> state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 D> Bitline1 $end
$var wire 1 E> Bitline2 $end
$var wire 1 F> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 G> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 F> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 G> q $end
$var reg 1 G> state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 H> Bitline1 $end
$var wire 1 I> Bitline2 $end
$var wire 1 J> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 K> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 J> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 K> q $end
$var reg 1 K> state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 L> Bitline1 $end
$var wire 1 M> Bitline2 $end
$var wire 1 N> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 O> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 N> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 O> q $end
$var reg 1 O> state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 P> Bitline1 $end
$var wire 1 Q> Bitline2 $end
$var wire 1 R> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 S> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 R> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 S> q $end
$var reg 1 S> state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 T> Bitline1 $end
$var wire 1 U> Bitline2 $end
$var wire 1 V> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 W> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 V> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 W> q $end
$var reg 1 W> state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 X> Bitline1 $end
$var wire 1 Y> Bitline2 $end
$var wire 1 Z> D $end
$var wire 1 w= ReadEnable1 $end
$var wire 1 x= ReadEnable2 $end
$var wire 1 y= WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 [> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 Z> d $end
$var wire 1 V8 rst $end
$var wire 1 y= wen $end
$var wire 1 [> q $end
$var reg 1 [> state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[8] $end
$var wire 16 \> Bitline1 [15:0] $end
$var wire 16 ]> Bitline2 [15:0] $end
$var wire 16 ^> D [15:0] $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 b> Bitline1 $end
$var wire 1 c> Bitline2 $end
$var wire 1 d> D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 e> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d> d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 e> q $end
$var reg 1 e> state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 f> Bitline1 $end
$var wire 1 g> Bitline2 $end
$var wire 1 h> D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 i> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h> d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 i> q $end
$var reg 1 i> state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 j> Bitline1 $end
$var wire 1 k> Bitline2 $end
$var wire 1 l> D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 m> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l> d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 m> q $end
$var reg 1 m> state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 n> Bitline1 $end
$var wire 1 o> Bitline2 $end
$var wire 1 p> D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 q> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p> d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 q> q $end
$var reg 1 q> state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 r> Bitline1 $end
$var wire 1 s> Bitline2 $end
$var wire 1 t> D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 u> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t> d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 u> q $end
$var reg 1 u> state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 v> Bitline1 $end
$var wire 1 w> Bitline2 $end
$var wire 1 x> D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 y> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x> d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 y> q $end
$var reg 1 y> state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 z> Bitline1 $end
$var wire 1 {> Bitline2 $end
$var wire 1 |> D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 }> dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |> d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 }> q $end
$var reg 1 }> state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 ~> Bitline1 $end
$var wire 1 !? Bitline2 $end
$var wire 1 "? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 #? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 #? q $end
$var reg 1 #? state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 $? Bitline1 $end
$var wire 1 %? Bitline2 $end
$var wire 1 &? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 '? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 '? q $end
$var reg 1 '? state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 (? Bitline1 $end
$var wire 1 )? Bitline2 $end
$var wire 1 *? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 +? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 +? q $end
$var reg 1 +? state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 ,? Bitline1 $end
$var wire 1 -? Bitline2 $end
$var wire 1 .? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 /? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 /? q $end
$var reg 1 /? state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 0? Bitline1 $end
$var wire 1 1? Bitline2 $end
$var wire 1 2? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 3? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 3? q $end
$var reg 1 3? state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 4? Bitline1 $end
$var wire 1 5? Bitline2 $end
$var wire 1 6? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 7? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 7? q $end
$var reg 1 7? state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 8? Bitline1 $end
$var wire 1 9? Bitline2 $end
$var wire 1 :? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ;? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 ;? q $end
$var reg 1 ;? state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 <? Bitline1 $end
$var wire 1 =? Bitline2 $end
$var wire 1 >? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ?? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 ?? q $end
$var reg 1 ?? state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 @? Bitline1 $end
$var wire 1 A? Bitline2 $end
$var wire 1 B? D $end
$var wire 1 _> ReadEnable1 $end
$var wire 1 `> ReadEnable2 $end
$var wire 1 a> WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 C? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 B? d $end
$var wire 1 V8 rst $end
$var wire 1 a> wen $end
$var wire 1 C? q $end
$var reg 1 C? state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[9] $end
$var wire 16 D? Bitline1 [15:0] $end
$var wire 16 E? Bitline2 [15:0] $end
$var wire 16 F? D [15:0] $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 J? Bitline1 $end
$var wire 1 K? Bitline2 $end
$var wire 1 L? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 M? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 M? q $end
$var reg 1 M? state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 N? Bitline1 $end
$var wire 1 O? Bitline2 $end
$var wire 1 P? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Q? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 Q? q $end
$var reg 1 Q? state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 R? Bitline1 $end
$var wire 1 S? Bitline2 $end
$var wire 1 T? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 U? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 U? q $end
$var reg 1 U? state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 V? Bitline1 $end
$var wire 1 W? Bitline2 $end
$var wire 1 X? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Y? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 Y? q $end
$var reg 1 Y? state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 Z? Bitline1 $end
$var wire 1 [? Bitline2 $end
$var wire 1 \? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ]? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 ]? q $end
$var reg 1 ]? state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 ^? Bitline1 $end
$var wire 1 _? Bitline2 $end
$var wire 1 `? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 a? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 a? q $end
$var reg 1 a? state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 b? Bitline1 $end
$var wire 1 c? Bitline2 $end
$var wire 1 d? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 e? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 e? q $end
$var reg 1 e? state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 f? Bitline1 $end
$var wire 1 g? Bitline2 $end
$var wire 1 h? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 i? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 i? q $end
$var reg 1 i? state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 j? Bitline1 $end
$var wire 1 k? Bitline2 $end
$var wire 1 l? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 m? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 m? q $end
$var reg 1 m? state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 n? Bitline1 $end
$var wire 1 o? Bitline2 $end
$var wire 1 p? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 q? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 q? q $end
$var reg 1 q? state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 r? Bitline1 $end
$var wire 1 s? Bitline2 $end
$var wire 1 t? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 u? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 t? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 u? q $end
$var reg 1 u? state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 v? Bitline1 $end
$var wire 1 w? Bitline2 $end
$var wire 1 x? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 y? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 x? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 y? q $end
$var reg 1 y? state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 z? Bitline1 $end
$var wire 1 {? Bitline2 $end
$var wire 1 |? D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 }? dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |? d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 }? q $end
$var reg 1 }? state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 ~? Bitline1 $end
$var wire 1 !@ Bitline2 $end
$var wire 1 "@ D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 #@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "@ d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 #@ q $end
$var reg 1 #@ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 $@ Bitline1 $end
$var wire 1 %@ Bitline2 $end
$var wire 1 &@ D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 '@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &@ d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 '@ q $end
$var reg 1 '@ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 (@ Bitline1 $end
$var wire 1 )@ Bitline2 $end
$var wire 1 *@ D $end
$var wire 1 G? ReadEnable1 $end
$var wire 1 H? ReadEnable2 $end
$var wire 1 I? WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 +@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *@ d $end
$var wire 1 V8 rst $end
$var wire 1 I? wen $end
$var wire 1 +@ q $end
$var reg 1 +@ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[10] $end
$var wire 16 ,@ Bitline1 [15:0] $end
$var wire 16 -@ Bitline2 [15:0] $end
$var wire 16 .@ D [15:0] $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 2@ Bitline1 $end
$var wire 1 3@ Bitline2 $end
$var wire 1 4@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 5@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 5@ q $end
$var reg 1 5@ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 6@ Bitline1 $end
$var wire 1 7@ Bitline2 $end
$var wire 1 8@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 9@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 9@ q $end
$var reg 1 9@ state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 :@ Bitline1 $end
$var wire 1 ;@ Bitline2 $end
$var wire 1 <@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 =@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 =@ q $end
$var reg 1 =@ state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 >@ Bitline1 $end
$var wire 1 ?@ Bitline2 $end
$var wire 1 @@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 A@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 A@ q $end
$var reg 1 A@ state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 B@ Bitline1 $end
$var wire 1 C@ Bitline2 $end
$var wire 1 D@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 E@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 D@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 E@ q $end
$var reg 1 E@ state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 F@ Bitline1 $end
$var wire 1 G@ Bitline2 $end
$var wire 1 H@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 I@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 H@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 I@ q $end
$var reg 1 I@ state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 J@ Bitline1 $end
$var wire 1 K@ Bitline2 $end
$var wire 1 L@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 M@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 L@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 M@ q $end
$var reg 1 M@ state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 N@ Bitline1 $end
$var wire 1 O@ Bitline2 $end
$var wire 1 P@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Q@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 P@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 Q@ q $end
$var reg 1 Q@ state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 R@ Bitline1 $end
$var wire 1 S@ Bitline2 $end
$var wire 1 T@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 U@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 T@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 U@ q $end
$var reg 1 U@ state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 V@ Bitline1 $end
$var wire 1 W@ Bitline2 $end
$var wire 1 X@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 Y@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 X@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 Y@ q $end
$var reg 1 Y@ state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 Z@ Bitline1 $end
$var wire 1 [@ Bitline2 $end
$var wire 1 \@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ]@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 \@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 ]@ q $end
$var reg 1 ]@ state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 ^@ Bitline1 $end
$var wire 1 _@ Bitline2 $end
$var wire 1 `@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 a@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 `@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 a@ q $end
$var reg 1 a@ state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 b@ Bitline1 $end
$var wire 1 c@ Bitline2 $end
$var wire 1 d@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 e@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 d@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 e@ q $end
$var reg 1 e@ state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 f@ Bitline1 $end
$var wire 1 g@ Bitline2 $end
$var wire 1 h@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 i@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 h@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 i@ q $end
$var reg 1 i@ state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 j@ Bitline1 $end
$var wire 1 k@ Bitline2 $end
$var wire 1 l@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 m@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 l@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 m@ q $end
$var reg 1 m@ state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 n@ Bitline1 $end
$var wire 1 o@ Bitline2 $end
$var wire 1 p@ D $end
$var wire 1 /@ ReadEnable1 $end
$var wire 1 0@ ReadEnable2 $end
$var wire 1 1@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 q@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 p@ d $end
$var wire 1 V8 rst $end
$var wire 1 1@ wen $end
$var wire 1 q@ q $end
$var reg 1 q@ state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[11] $end
$var wire 16 r@ Bitline1 [15:0] $end
$var wire 16 s@ Bitline2 [15:0] $end
$var wire 16 t@ D [15:0] $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 x@ Bitline1 $end
$var wire 1 y@ Bitline2 $end
$var wire 1 z@ D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 {@ dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 z@ d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 {@ q $end
$var reg 1 {@ state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 |@ Bitline1 $end
$var wire 1 }@ Bitline2 $end
$var wire 1 ~@ D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 !A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~@ d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 !A q $end
$var reg 1 !A state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 "A Bitline1 $end
$var wire 1 #A Bitline2 $end
$var wire 1 $A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 %A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 %A q $end
$var reg 1 %A state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 &A Bitline1 $end
$var wire 1 'A Bitline2 $end
$var wire 1 (A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 )A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 )A q $end
$var reg 1 )A state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 *A Bitline1 $end
$var wire 1 +A Bitline2 $end
$var wire 1 ,A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 -A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 -A q $end
$var reg 1 -A state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 .A Bitline1 $end
$var wire 1 /A Bitline2 $end
$var wire 1 0A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 1A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 1A q $end
$var reg 1 1A state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 2A Bitline1 $end
$var wire 1 3A Bitline2 $end
$var wire 1 4A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 5A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 5A q $end
$var reg 1 5A state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 6A Bitline1 $end
$var wire 1 7A Bitline2 $end
$var wire 1 8A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 9A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 9A q $end
$var reg 1 9A state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 :A Bitline1 $end
$var wire 1 ;A Bitline2 $end
$var wire 1 <A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 =A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 =A q $end
$var reg 1 =A state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 >A Bitline1 $end
$var wire 1 ?A Bitline2 $end
$var wire 1 @A D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 AA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @A d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 AA q $end
$var reg 1 AA state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 BA Bitline1 $end
$var wire 1 CA Bitline2 $end
$var wire 1 DA D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 EA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 DA d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 EA q $end
$var reg 1 EA state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 FA Bitline1 $end
$var wire 1 GA Bitline2 $end
$var wire 1 HA D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 IA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 HA d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 IA q $end
$var reg 1 IA state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 JA Bitline1 $end
$var wire 1 KA Bitline2 $end
$var wire 1 LA D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 MA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 LA d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 MA q $end
$var reg 1 MA state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 NA Bitline1 $end
$var wire 1 OA Bitline2 $end
$var wire 1 PA D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 QA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 PA d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 QA q $end
$var reg 1 QA state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 RA Bitline1 $end
$var wire 1 SA Bitline2 $end
$var wire 1 TA D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 UA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 TA d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 UA q $end
$var reg 1 UA state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 VA Bitline1 $end
$var wire 1 WA Bitline2 $end
$var wire 1 XA D $end
$var wire 1 u@ ReadEnable1 $end
$var wire 1 v@ ReadEnable2 $end
$var wire 1 w@ WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 YA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 XA d $end
$var wire 1 V8 rst $end
$var wire 1 w@ wen $end
$var wire 1 YA q $end
$var reg 1 YA state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[12] $end
$var wire 16 ZA Bitline1 [15:0] $end
$var wire 16 [A Bitline2 [15:0] $end
$var wire 16 \A D [15:0] $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 `A Bitline1 $end
$var wire 1 aA Bitline2 $end
$var wire 1 bA D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 cA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 bA d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 cA q $end
$var reg 1 cA state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 dA Bitline1 $end
$var wire 1 eA Bitline2 $end
$var wire 1 fA D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 gA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 fA d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 gA q $end
$var reg 1 gA state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 hA Bitline1 $end
$var wire 1 iA Bitline2 $end
$var wire 1 jA D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 kA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 jA d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 kA q $end
$var reg 1 kA state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 lA Bitline1 $end
$var wire 1 mA Bitline2 $end
$var wire 1 nA D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 oA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 nA d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 oA q $end
$var reg 1 oA state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 pA Bitline1 $end
$var wire 1 qA Bitline2 $end
$var wire 1 rA D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 sA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 rA d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 sA q $end
$var reg 1 sA state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 tA Bitline1 $end
$var wire 1 uA Bitline2 $end
$var wire 1 vA D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 wA dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 vA d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 wA q $end
$var reg 1 wA state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 xA Bitline1 $end
$var wire 1 yA Bitline2 $end
$var wire 1 zA D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 {A dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 zA d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 {A q $end
$var reg 1 {A state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 |A Bitline1 $end
$var wire 1 }A Bitline2 $end
$var wire 1 ~A D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 !B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~A d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 !B q $end
$var reg 1 !B state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 "B Bitline1 $end
$var wire 1 #B Bitline2 $end
$var wire 1 $B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 %B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 %B q $end
$var reg 1 %B state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 &B Bitline1 $end
$var wire 1 'B Bitline2 $end
$var wire 1 (B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 )B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 )B q $end
$var reg 1 )B state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 *B Bitline1 $end
$var wire 1 +B Bitline2 $end
$var wire 1 ,B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 -B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ,B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 -B q $end
$var reg 1 -B state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 .B Bitline1 $end
$var wire 1 /B Bitline2 $end
$var wire 1 0B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 1B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 0B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 1B q $end
$var reg 1 1B state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 2B Bitline1 $end
$var wire 1 3B Bitline2 $end
$var wire 1 4B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 5B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 4B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 5B q $end
$var reg 1 5B state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 6B Bitline1 $end
$var wire 1 7B Bitline2 $end
$var wire 1 8B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 9B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 8B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 9B q $end
$var reg 1 9B state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 :B Bitline1 $end
$var wire 1 ;B Bitline2 $end
$var wire 1 <B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 =B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 <B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 =B q $end
$var reg 1 =B state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 >B Bitline1 $end
$var wire 1 ?B Bitline2 $end
$var wire 1 @B D $end
$var wire 1 ]A ReadEnable1 $end
$var wire 1 ^A ReadEnable2 $end
$var wire 1 _A WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 AB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 @B d $end
$var wire 1 V8 rst $end
$var wire 1 _A wen $end
$var wire 1 AB q $end
$var reg 1 AB state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[13] $end
$var wire 16 BB Bitline1 [15:0] $end
$var wire 16 CB Bitline2 [15:0] $end
$var wire 16 DB D [15:0] $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 HB Bitline1 $end
$var wire 1 IB Bitline2 $end
$var wire 1 JB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 KB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 JB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 KB q $end
$var reg 1 KB state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 LB Bitline1 $end
$var wire 1 MB Bitline2 $end
$var wire 1 NB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 OB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 NB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 OB q $end
$var reg 1 OB state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 PB Bitline1 $end
$var wire 1 QB Bitline2 $end
$var wire 1 RB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 SB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 RB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 SB q $end
$var reg 1 SB state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 TB Bitline1 $end
$var wire 1 UB Bitline2 $end
$var wire 1 VB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 WB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 VB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 WB q $end
$var reg 1 WB state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 XB Bitline1 $end
$var wire 1 YB Bitline2 $end
$var wire 1 ZB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 [B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ZB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 [B q $end
$var reg 1 [B state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 \B Bitline1 $end
$var wire 1 ]B Bitline2 $end
$var wire 1 ^B D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 _B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^B d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 _B q $end
$var reg 1 _B state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 `B Bitline1 $end
$var wire 1 aB Bitline2 $end
$var wire 1 bB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 cB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 bB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 cB q $end
$var reg 1 cB state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 dB Bitline1 $end
$var wire 1 eB Bitline2 $end
$var wire 1 fB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 gB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 fB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 gB q $end
$var reg 1 gB state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 hB Bitline1 $end
$var wire 1 iB Bitline2 $end
$var wire 1 jB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 kB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 jB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 kB q $end
$var reg 1 kB state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 lB Bitline1 $end
$var wire 1 mB Bitline2 $end
$var wire 1 nB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 oB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 nB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 oB q $end
$var reg 1 oB state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 pB Bitline1 $end
$var wire 1 qB Bitline2 $end
$var wire 1 rB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 sB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 rB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 sB q $end
$var reg 1 sB state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 tB Bitline1 $end
$var wire 1 uB Bitline2 $end
$var wire 1 vB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 wB dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 vB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 wB q $end
$var reg 1 wB state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 xB Bitline1 $end
$var wire 1 yB Bitline2 $end
$var wire 1 zB D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 {B dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 zB d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 {B q $end
$var reg 1 {B state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 |B Bitline1 $end
$var wire 1 }B Bitline2 $end
$var wire 1 ~B D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 !C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ~B d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 !C q $end
$var reg 1 !C state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 "C Bitline1 $end
$var wire 1 #C Bitline2 $end
$var wire 1 $C D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 %C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 $C d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 %C q $end
$var reg 1 %C state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 &C Bitline1 $end
$var wire 1 'C Bitline2 $end
$var wire 1 (C D $end
$var wire 1 EB ReadEnable1 $end
$var wire 1 FB ReadEnable2 $end
$var wire 1 GB WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 )C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 (C d $end
$var wire 1 V8 rst $end
$var wire 1 GB wen $end
$var wire 1 )C q $end
$var reg 1 )C state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[14] $end
$var wire 16 *C Bitline1 [15:0] $end
$var wire 16 +C Bitline2 [15:0] $end
$var wire 16 ,C D [15:0] $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 0C Bitline1 $end
$var wire 1 1C Bitline2 $end
$var wire 1 2C D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 3C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2C d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 3C q $end
$var reg 1 3C state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 4C Bitline1 $end
$var wire 1 5C Bitline2 $end
$var wire 1 6C D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 7C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6C d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 7C q $end
$var reg 1 7C state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 8C Bitline1 $end
$var wire 1 9C Bitline2 $end
$var wire 1 :C D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ;C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :C d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 ;C q $end
$var reg 1 ;C state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 <C Bitline1 $end
$var wire 1 =C Bitline2 $end
$var wire 1 >C D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ?C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >C d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 ?C q $end
$var reg 1 ?C state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 @C Bitline1 $end
$var wire 1 AC Bitline2 $end
$var wire 1 BC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 CC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 BC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 CC q $end
$var reg 1 CC state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 DC Bitline1 $end
$var wire 1 EC Bitline2 $end
$var wire 1 FC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 GC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 FC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 GC q $end
$var reg 1 GC state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 HC Bitline1 $end
$var wire 1 IC Bitline2 $end
$var wire 1 JC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 KC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 JC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 KC q $end
$var reg 1 KC state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 LC Bitline1 $end
$var wire 1 MC Bitline2 $end
$var wire 1 NC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 OC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 NC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 OC q $end
$var reg 1 OC state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 PC Bitline1 $end
$var wire 1 QC Bitline2 $end
$var wire 1 RC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 SC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 RC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 SC q $end
$var reg 1 SC state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 TC Bitline1 $end
$var wire 1 UC Bitline2 $end
$var wire 1 VC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 WC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 VC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 WC q $end
$var reg 1 WC state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 XC Bitline1 $end
$var wire 1 YC Bitline2 $end
$var wire 1 ZC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 [C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ZC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 [C q $end
$var reg 1 [C state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 \C Bitline1 $end
$var wire 1 ]C Bitline2 $end
$var wire 1 ^C D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 _C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ^C d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 _C q $end
$var reg 1 _C state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 `C Bitline1 $end
$var wire 1 aC Bitline2 $end
$var wire 1 bC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 cC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 bC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 cC q $end
$var reg 1 cC state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 dC Bitline1 $end
$var wire 1 eC Bitline2 $end
$var wire 1 fC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 gC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 fC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 gC q $end
$var reg 1 gC state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 hC Bitline1 $end
$var wire 1 iC Bitline2 $end
$var wire 1 jC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 kC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 jC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 kC q $end
$var reg 1 kC state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 lC Bitline1 $end
$var wire 1 mC Bitline2 $end
$var wire 1 nC D $end
$var wire 1 -C ReadEnable1 $end
$var wire 1 .C ReadEnable2 $end
$var wire 1 /C WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 oC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 nC d $end
$var wire 1 V8 rst $end
$var wire 1 /C wen $end
$var wire 1 oC q $end
$var reg 1 oC state $end
$upscope $end
$upscope $end
$upscope $end
$scope module regArray[15] $end
$var wire 16 pC Bitline1 [15:0] $end
$var wire 16 qC Bitline2 [15:0] $end
$var wire 16 rC D [15:0] $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteReg $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$scope module bitArray[0] $end
$var wire 1 vC Bitline1 $end
$var wire 1 wC Bitline2 $end
$var wire 1 xC D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 yC dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 xC d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 yC q $end
$var reg 1 yC state $end
$upscope $end
$upscope $end
$scope module bitArray[1] $end
$var wire 1 zC Bitline1 $end
$var wire 1 {C Bitline2 $end
$var wire 1 |C D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 }C dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 |C d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 }C q $end
$var reg 1 }C state $end
$upscope $end
$upscope $end
$scope module bitArray[2] $end
$var wire 1 ~C Bitline1 $end
$var wire 1 !D Bitline2 $end
$var wire 1 "D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 #D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 "D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 #D q $end
$var reg 1 #D state $end
$upscope $end
$upscope $end
$scope module bitArray[3] $end
$var wire 1 $D Bitline1 $end
$var wire 1 %D Bitline2 $end
$var wire 1 &D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 'D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 &D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 'D q $end
$var reg 1 'D state $end
$upscope $end
$upscope $end
$scope module bitArray[4] $end
$var wire 1 (D Bitline1 $end
$var wire 1 )D Bitline2 $end
$var wire 1 *D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 +D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 *D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 +D q $end
$var reg 1 +D state $end
$upscope $end
$upscope $end
$scope module bitArray[5] $end
$var wire 1 ,D Bitline1 $end
$var wire 1 -D Bitline2 $end
$var wire 1 .D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 /D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 .D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 /D q $end
$var reg 1 /D state $end
$upscope $end
$upscope $end
$scope module bitArray[6] $end
$var wire 1 0D Bitline1 $end
$var wire 1 1D Bitline2 $end
$var wire 1 2D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 3D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 2D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 3D q $end
$var reg 1 3D state $end
$upscope $end
$upscope $end
$scope module bitArray[7] $end
$var wire 1 4D Bitline1 $end
$var wire 1 5D Bitline2 $end
$var wire 1 6D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 7D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 6D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 7D q $end
$var reg 1 7D state $end
$upscope $end
$upscope $end
$scope module bitArray[8] $end
$var wire 1 8D Bitline1 $end
$var wire 1 9D Bitline2 $end
$var wire 1 :D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ;D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 :D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 ;D q $end
$var reg 1 ;D state $end
$upscope $end
$upscope $end
$scope module bitArray[9] $end
$var wire 1 <D Bitline1 $end
$var wire 1 =D Bitline2 $end
$var wire 1 >D D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 ?D dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 >D d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 ?D q $end
$var reg 1 ?D state $end
$upscope $end
$upscope $end
$scope module bitArray[10] $end
$var wire 1 @D Bitline1 $end
$var wire 1 AD Bitline2 $end
$var wire 1 BD D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 CD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 BD d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 CD q $end
$var reg 1 CD state $end
$upscope $end
$upscope $end
$scope module bitArray[11] $end
$var wire 1 DD Bitline1 $end
$var wire 1 ED Bitline2 $end
$var wire 1 FD D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 GD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 FD d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 GD q $end
$var reg 1 GD state $end
$upscope $end
$upscope $end
$scope module bitArray[12] $end
$var wire 1 HD Bitline1 $end
$var wire 1 ID Bitline2 $end
$var wire 1 JD D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 KD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 JD d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 KD q $end
$var reg 1 KD state $end
$upscope $end
$upscope $end
$scope module bitArray[13] $end
$var wire 1 LD Bitline1 $end
$var wire 1 MD Bitline2 $end
$var wire 1 ND D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 OD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 ND d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 OD q $end
$var reg 1 OD state $end
$upscope $end
$upscope $end
$scope module bitArray[14] $end
$var wire 1 PD Bitline1 $end
$var wire 1 QD Bitline2 $end
$var wire 1 RD D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 SD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 RD d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 SD q $end
$var reg 1 SD state $end
$upscope $end
$upscope $end
$scope module bitArray[15] $end
$var wire 1 TD Bitline1 $end
$var wire 1 UD Bitline2 $end
$var wire 1 VD D $end
$var wire 1 sC ReadEnable1 $end
$var wire 1 tC ReadEnable2 $end
$var wire 1 uC WriteEnable $end
$var wire 1 , clk $end
$var wire 1 V8 rst $end
$var wire 1 WD dffOut $end
$scope module floppy $end
$var wire 1 , clk $end
$var wire 1 VD d $end
$var wire 1 V8 rst $end
$var wire 1 uC wen $end
$var wire 1 WD q $end
$var reg 1 WD state $end
$upscope $end
$upscope $end
$upscope $end
$scope module writeDecoder2 $end
$var wire 4 XD RegId [3:0] $end
$var wire 1 r WriteReg $end
$var wire 16 YD Wordline [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 t6
b10000 %4
$end
#0
$dumpvars
b0 YD
b0 XD
0WD
0VD
xUD
xTD
0SD
0RD
xQD
xPD
0OD
0ND
xMD
xLD
0KD
0JD
xID
xHD
0GD
0FD
xED
xDD
0CD
0BD
xAD
x@D
0?D
0>D
x=D
x<D
0;D
0:D
x9D
x8D
07D
06D
x5D
x4D
03D
02D
x1D
x0D
0/D
0.D
x-D
x,D
0+D
0*D
x)D
x(D
0'D
0&D
x%D
x$D
0#D
0"D
x!D
x~C
0}C
0|C
x{C
xzC
0yC
0xC
xwC
xvC
0uC
xtC
xsC
b0 rC
bx qC
bx pC
0oC
0nC
xmC
xlC
0kC
0jC
xiC
xhC
0gC
0fC
xeC
xdC
0cC
0bC
xaC
x`C
0_C
0^C
x]C
x\C
0[C
0ZC
xYC
xXC
0WC
0VC
xUC
xTC
0SC
0RC
xQC
xPC
0OC
0NC
xMC
xLC
0KC
0JC
xIC
xHC
0GC
0FC
xEC
xDC
0CC
0BC
xAC
x@C
0?C
0>C
x=C
x<C
0;C
0:C
x9C
x8C
07C
06C
x5C
x4C
03C
02C
x1C
x0C
0/C
x.C
x-C
b0 ,C
bx +C
bx *C
0)C
0(C
x'C
x&C
0%C
0$C
x#C
x"C
0!C
0~B
x}B
x|B
0{B
0zB
xyB
xxB
0wB
0vB
xuB
xtB
0sB
0rB
xqB
xpB
0oB
0nB
xmB
xlB
0kB
0jB
xiB
xhB
0gB
0fB
xeB
xdB
0cB
0bB
xaB
x`B
0_B
0^B
x]B
x\B
0[B
0ZB
xYB
xXB
0WB
0VB
xUB
xTB
0SB
0RB
xQB
xPB
0OB
0NB
xMB
xLB
0KB
0JB
xIB
xHB
0GB
xFB
xEB
b0 DB
bx CB
bx BB
0AB
0@B
x?B
x>B
0=B
0<B
x;B
x:B
09B
08B
x7B
x6B
05B
04B
x3B
x2B
01B
00B
x/B
x.B
0-B
0,B
x+B
x*B
0)B
0(B
x'B
x&B
0%B
0$B
x#B
x"B
0!B
0~A
x}A
x|A
0{A
0zA
xyA
xxA
0wA
0vA
xuA
xtA
0sA
0rA
xqA
xpA
0oA
0nA
xmA
xlA
0kA
0jA
xiA
xhA
0gA
0fA
xeA
xdA
0cA
0bA
xaA
x`A
0_A
x^A
x]A
b0 \A
bx [A
bx ZA
0YA
0XA
xWA
xVA
0UA
0TA
xSA
xRA
0QA
0PA
xOA
xNA
0MA
0LA
xKA
xJA
0IA
0HA
xGA
xFA
0EA
0DA
xCA
xBA
0AA
0@A
x?A
x>A
0=A
0<A
x;A
x:A
09A
08A
x7A
x6A
05A
04A
x3A
x2A
01A
00A
x/A
x.A
0-A
0,A
x+A
x*A
0)A
0(A
x'A
x&A
0%A
0$A
x#A
x"A
0!A
0~@
x}@
x|@
0{@
0z@
xy@
xx@
0w@
xv@
xu@
b0 t@
bx s@
bx r@
0q@
0p@
xo@
xn@
0m@
0l@
xk@
xj@
0i@
0h@
xg@
xf@
0e@
0d@
xc@
xb@
0a@
0`@
x_@
x^@
0]@
0\@
x[@
xZ@
0Y@
0X@
xW@
xV@
0U@
0T@
xS@
xR@
0Q@
0P@
xO@
xN@
0M@
0L@
xK@
xJ@
0I@
0H@
xG@
xF@
0E@
0D@
xC@
xB@
0A@
0@@
x?@
x>@
0=@
0<@
x;@
x:@
09@
08@
x7@
x6@
05@
04@
x3@
x2@
01@
x0@
x/@
b0 .@
bx -@
bx ,@
0+@
0*@
x)@
x(@
0'@
0&@
x%@
x$@
0#@
0"@
x!@
x~?
0}?
0|?
x{?
xz?
0y?
0x?
xw?
xv?
0u?
0t?
xs?
xr?
0q?
0p?
xo?
xn?
0m?
0l?
xk?
xj?
0i?
0h?
xg?
xf?
0e?
0d?
xc?
xb?
0a?
0`?
x_?
x^?
0]?
0\?
x[?
xZ?
0Y?
0X?
xW?
xV?
0U?
0T?
xS?
xR?
0Q?
0P?
xO?
xN?
0M?
0L?
xK?
xJ?
0I?
xH?
xG?
b0 F?
bx E?
bx D?
0C?
0B?
xA?
x@?
0??
0>?
x=?
x<?
0;?
0:?
x9?
x8?
07?
06?
x5?
x4?
03?
02?
x1?
x0?
0/?
0.?
x-?
x,?
0+?
0*?
x)?
x(?
0'?
0&?
x%?
x$?
0#?
0"?
x!?
x~>
0}>
0|>
x{>
xz>
0y>
0x>
xw>
xv>
0u>
0t>
xs>
xr>
0q>
0p>
xo>
xn>
0m>
0l>
xk>
xj>
0i>
0h>
xg>
xf>
0e>
0d>
xc>
xb>
0a>
x`>
x_>
b0 ^>
bx ]>
bx \>
0[>
0Z>
xY>
xX>
0W>
0V>
xU>
xT>
0S>
0R>
xQ>
xP>
0O>
0N>
xM>
xL>
0K>
0J>
xI>
xH>
0G>
0F>
xE>
xD>
0C>
0B>
xA>
x@>
0?>
0>>
x=>
x<>
0;>
0:>
x9>
x8>
07>
06>
x5>
x4>
03>
02>
x1>
x0>
0/>
0.>
x->
x,>
0+>
0*>
x)>
x(>
0'>
0&>
x%>
x$>
0#>
0">
x!>
x~=
0}=
0|=
x{=
xz=
0y=
xx=
xw=
b0 v=
bx u=
bx t=
0s=
0r=
xq=
xp=
0o=
0n=
xm=
xl=
0k=
0j=
xi=
xh=
0g=
0f=
xe=
xd=
0c=
0b=
xa=
x`=
0_=
0^=
x]=
x\=
0[=
0Z=
xY=
xX=
0W=
0V=
xU=
xT=
0S=
0R=
xQ=
xP=
0O=
0N=
xM=
xL=
0K=
0J=
xI=
xH=
0G=
0F=
xE=
xD=
0C=
0B=
xA=
x@=
0?=
0>=
x==
x<=
0;=
0:=
x9=
x8=
07=
06=
x5=
x4=
03=
x2=
x1=
b0 0=
bx /=
bx .=
0-=
0,=
x+=
x*=
0)=
0(=
x'=
x&=
0%=
0$=
x#=
x"=
0!=
0~<
x}<
x|<
0{<
0z<
xy<
xx<
0w<
0v<
xu<
xt<
0s<
0r<
xq<
xp<
0o<
0n<
xm<
xl<
0k<
0j<
xi<
xh<
0g<
0f<
xe<
xd<
0c<
0b<
xa<
x`<
0_<
0^<
x]<
x\<
0[<
0Z<
xY<
xX<
0W<
0V<
xU<
xT<
0S<
0R<
xQ<
xP<
0O<
0N<
xM<
xL<
0K<
xJ<
xI<
b0 H<
bx G<
bx F<
0E<
0D<
xC<
xB<
0A<
0@<
x?<
x><
0=<
0<<
x;<
x:<
09<
08<
x7<
x6<
05<
04<
x3<
x2<
01<
00<
x/<
x.<
0-<
0,<
x+<
x*<
0)<
0(<
x'<
x&<
0%<
0$<
x#<
x"<
0!<
0~;
x};
x|;
0{;
0z;
xy;
xx;
0w;
0v;
xu;
xt;
0s;
0r;
xq;
xp;
0o;
0n;
xm;
xl;
0k;
0j;
xi;
xh;
0g;
0f;
xe;
xd;
0c;
xb;
xa;
b0 `;
bx _;
bx ^;
0];
0\;
x[;
xZ;
0Y;
0X;
xW;
xV;
0U;
0T;
xS;
xR;
0Q;
0P;
xO;
xN;
0M;
0L;
xK;
xJ;
0I;
0H;
xG;
xF;
0E;
0D;
xC;
xB;
0A;
0@;
x?;
x>;
0=;
0<;
x;;
x:;
09;
08;
x7;
x6;
05;
04;
x3;
x2;
01;
00;
x/;
x.;
0-;
0,;
x+;
x*;
0);
0(;
x';
x&;
0%;
0$;
x#;
x";
0!;
0~:
x}:
x|:
0{:
xz:
xy:
b0 x:
bx w:
bx v:
0u:
0t:
xs:
xr:
0q:
0p:
xo:
xn:
0m:
0l:
xk:
xj:
0i:
0h:
xg:
xf:
0e:
0d:
xc:
xb:
0a:
0`:
x_:
x^:
0]:
0\:
x[:
xZ:
0Y:
0X:
xW:
xV:
0U:
0T:
xS:
xR:
0Q:
0P:
xO:
xN:
0M:
0L:
xK:
xJ:
0I:
0H:
xG:
xF:
0E:
0D:
xC:
xB:
0A:
0@:
x?:
x>:
0=:
0<:
x;:
x::
09:
08:
x7:
x6:
05:
x4:
x3:
b0 2:
bx 1:
bx 0:
0/:
0.:
x-:
x,:
0+:
0*:
x):
x(:
0':
0&:
x%:
x$:
0#:
0":
x!:
x~9
0}9
0|9
x{9
xz9
0y9
0x9
xw9
xv9
0u9
0t9
xs9
xr9
0q9
0p9
xo9
xn9
0m9
0l9
xk9
xj9
0i9
0h9
xg9
xf9
0e9
0d9
xc9
xb9
0a9
0`9
x_9
x^9
0]9
0\9
x[9
xZ9
0Y9
0X9
xW9
xV9
0U9
0T9
xS9
xR9
0Q9
0P9
xO9
xN9
0M9
xL9
xK9
b0 J9
bx I9
bx H9
0G9
0F9
xE9
xD9
0C9
0B9
xA9
x@9
0?9
0>9
x=9
x<9
0;9
0:9
x99
x89
079
069
x59
x49
039
029
x19
x09
0/9
0.9
x-9
x,9
0+9
0*9
x)9
x(9
0'9
0&9
x%9
x$9
0#9
0"9
x!9
x~8
0}8
0|8
x{8
xz8
0y8
0x8
xw8
xv8
0u8
0t8
xs8
xr8
0q8
0p8
xo8
xn8
0m8
0l8
xk8
xj8
0i8
0h8
xg8
xf8
0e8
xd8
xc8
b0 b8
bx a8
bx `8
bx _8
bx ^8
bx ]8
bx \8
bx [8
bx Z8
bx Y8
bx X8
b0 W8
1V8
bx U8
bx T8
bx S8
bx R8
b0 Q8
b0 P8
0O8
xN8
zM8
0L8
0K8
xJ8
zI8
0H8
0G8
xF8
zE8
0D8
0C8
xB8
zA8
0@8
0?8
x>8
z=8
0<8
0;8
x:8
z98
088
078
x68
z58
048
038
x28
z18
008
0/8
x.8
z-8
0,8
0+8
x*8
z)8
0(8
0'8
x&8
z%8
0$8
0#8
x"8
z!8
0~7
0}7
x|7
z{7
0z7
0y7
xx7
zw7
0v7
0u7
xt7
zs7
0r7
0q7
xp7
zo7
0n7
1m7
xl7
0k7
1j7
bx i7
bz h7
b0 g7
xf7
xe7
zd7
xc7
xb7
xa7
z`7
x_7
x^7
x]7
z\7
x[7
xZ7
xY7
zX7
xW7
xV7
xU7
zT7
xS7
xR7
xQ7
zP7
xO7
xN7
xM7
zL7
xK7
xJ7
xI7
zH7
xG7
xF7
xE7
zD7
xC7
xB7
xA7
z@7
x?7
x>7
x=7
z<7
x;7
x:7
x97
z87
x77
x67
x57
z47
x37
x27
x17
z07
x/7
x.7
x-7
z,7
x+7
x*7
x)7
z(7
x'7
1&7
0%7
0$7
0#7
1"7
bx !7
bz ~6
bx }6
b0 |6
bx {6
b0 z6
bx y6
xx6
bz w6
bz v6
1u6
b0 s6
b1010000101010001 r6
0q6
1p6
1o6
bx n6
bx m6
bx l6
b0 k6
b0 j6
b0 i6
b0 h6
b0 g6
b0 f6
0e6
xd6
0c6
xb6
xa6
1`6
x_6
0^6
x]6
0\6
x[6
xZ6
xY6
1X6
xW6
0V6
xU6
0T6
xS6
xR6
xQ6
1P6
xO6
0N6
0M6
0L6
bx K6
bx J6
bx I6
xH6
xG6
0F6
zE6
xD6
xC6
0B6
zA6
x@6
x?6
0>6
z=6
x<6
x;6
0:6
z96
x86
x76
066
z56
x46
x36
026
z16
x06
x/6
0.6
z-6
x,6
x+6
0*6
z)6
x(6
x'6
0&6
z%6
x$6
x#6
0"6
z!6
x~5
x}5
0|5
z{5
xz5
xy5
0x5
zw5
xv5
xu5
0t5
zs5
xr5
xq5
0p5
zo5
xn5
xm5
0l5
zk5
xj5
xi5
0h5
zg5
xf5
b0 e5
0d5
1c5
bz b5
bx a5
x`5
0_5
z^5
x]5
x\5
0[5
zZ5
xY5
xX5
0W5
zV5
xU5
xT5
0S5
zR5
xQ5
xP5
0O5
zN5
xM5
xL5
0K5
zJ5
xI5
xH5
0G5
zF5
xE5
xD5
0C5
zB5
xA5
x@5
0?5
z>5
x=5
x<5
0;5
z:5
x95
x85
075
z65
x55
x45
035
z25
x15
x05
0/5
z.5
x-5
x,5
0+5
z*5
x)5
x(5
1'5
z&5
x%5
x$5
0#5
z"5
x!5
0~4
1}4
b10 |4
bz {4
bx z4
xy4
1x4
zw4
xv4
xu4
0t4
zs4
xr4
xq4
1p4
zo4
xn4
xm4
0l4
zk4
xj4
xi4
0h4
zg4
xf4
xe4
0d4
zc4
xb4
xa4
0`4
z_4
x^4
x]4
1\4
z[4
xZ4
xY4
0X4
zW4
xV4
xU4
1T4
zS4
xR4
xQ4
0P4
zO4
xN4
xM4
1L4
zK4
xJ4
xI4
0H4
zG4
xF4
xE4
0D4
zC4
xB4
xA4
0@4
z?4
x>4
x=4
1<4
z;4
x:4
b1010000101010001 94
084
174
bz 64
bx 54
x44
034
x24
014
x04
0/4
b1010000101010001 .4
b0 -4
x,4
1+4
bx *4
bx )4
b10 (4
bx '4
1&4
b0 $4
1#4
0"4
b0 !4
b0 ~3
bx }3
x|3
x{3
bx z3
b0 y3
0x3
0w3
0v3
0u3
0t3
0s3
0r3
0q3
0p3
0o3
0n3
0m3
b0 l3
b0 k3
b0 j3
0i3
0h3
0g3
0f3
0e3
0d3
0c3
0b3
0a3
0`3
0_3
0^3
b0 ]3
b0 \3
0[3
b0 Z3
b0 Y3
b0 X3
b0 W3
0V3
0U3
0T3
0S3
0R3
0Q3
0P3
0O3
0N3
0M3
0L3
0K3
b0 J3
b0 I3
b10 H3
0G3
0F3
1E3
0D3
0C3
0B3
0A3
0@3
0?3
0>3
0=3
0<3
b10 ;3
b0 :3
093
b10 83
b10 73
b0 63
b0 53
043
033
b10 23
013
b10 03
b1111 /3
1.3
1-3
1,3
1+3
0*3
0)3
0(3
0'3
0&3
0%3
0$3
0#3
b1111 "3
b0 !3
b1110 ~2
1}2
1|2
1{2
0z2
0y2
0x2
0w2
0v2
0u2
0t2
0s2
0r2
b1110 q2
b0 p2
0o2
b11111110 n2
b11111110 m2
b0 l2
b1010 k2
1j2
0i2
1h2
0g2
0f2
0e2
0d2
0c2
0b2
0a2
0`2
0_2
b1010 ^2
b0 ]2
b100 \2
0[2
0Z2
0Y2
0X2
0W2
0V2
1U2
0T2
0S2
0R2
1Q2
0P2
b10 O2
b10 N2
0M2
b10100100 L2
b10100010 K2
b10 J2
b10 I2
0H2
0G2
b1111111010100100 F2
0E2
b1111111010100010 D2
bx C2
b0 B2
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
092
082
z72
062
052
042
z32
022
012
002
z/2
0.2
0-2
0,2
z+2
0*2
0)2
0(2
z'2
0&2
0%2
0$2
z#2
0"2
0!2
0~1
z}1
0|1
0{1
0z1
zy1
0x1
0w1
0v1
zu1
0t1
0s1
0r1
zq1
0p1
0o1
0n1
zm1
0l1
0k1
0j1
zi1
0h1
0g1
0f1
ze1
0d1
0c1
0b1
za1
0`1
0_1
0^1
z]1
0\1
0[1
0Z1
zY1
0X1
0W1
1V1
b0 U1
bz T1
b0 S1
0R1
0Q1
zP1
0O1
0N1
0M1
zL1
0K1
0J1
0I1
zH1
0G1
0F1
0E1
zD1
0C1
0B1
0A1
z@1
0?1
0>1
0=1
z<1
0;1
0:1
091
z81
071
061
051
z41
031
021
011
z01
0/1
0.1
0-1
z,1
0+1
0*1
0)1
z(1
0'1
0&1
0%1
z$1
0#1
0"1
0!1
z~0
0}0
0|0
0{0
zz0
0y0
0x0
0w0
zv0
0u0
0t0
0s0
zr0
0q0
0p0
1o0
b0 n0
bz m0
b0 l0
0k0
0j0
zi0
0h0
0g0
0f0
ze0
0d0
0c0
0b0
za0
0`0
0_0
0^0
z]0
0\0
0[0
0Z0
zY0
0X0
0W0
0V0
zU0
0T0
0S0
0R0
zQ0
0P0
0O0
0N0
zM0
0L0
0K0
0J0
zI0
0H0
0G0
0F0
zE0
0D0
0C0
0B0
zA0
0@0
0?0
0>0
z=0
0<0
0;0
0:0
z90
080
070
060
z50
040
030
020
z10
000
0/0
0.0
z-0
0,0
0+0
1*0
b0 )0
bz (0
b0 '0
0&0
0%0
0$0
z#0
0"0
0!0
0~/
z}/
0|/
0{/
0z/
zy/
0x/
0w/
0v/
zu/
0t/
0s/
0r/
zq/
0p/
0o/
0n/
zm/
0l/
0k/
0j/
zi/
0h/
0g/
0f/
ze/
0d/
0c/
0b/
za/
0`/
0_/
0^/
z]/
0\/
0[/
0Z/
zY/
0X/
0W/
0V/
zU/
0T/
0S/
0R/
zQ/
0P/
0O/
0N/
zM/
0L/
0K/
0J/
zI/
0H/
0G/
0F/
zE/
0D/
0C/
1B/
b0 A/
bz @/
b0 ?/
0>/
0=/
0</
0;/
0:/
09/
08/
07/
06/
05/
04/
03/
z2/
01/
00/
0//
z./
0-/
0,/
0+/
z*/
0)/
0(/
0'/
z&/
0%/
0$/
0#/
z"/
0!/
0~.
0}.
z|.
0{.
0z.
0y.
zx.
0w.
0v.
0u.
zt.
0s.
0r.
0q.
zp.
0o.
0n.
0m.
zl.
0k.
0j.
0i.
zh.
0g.
0f.
0e.
zd.
0c.
0b.
0a.
z`.
0_.
0^.
0].
z\.
0[.
0Z.
0Y.
zX.
0W.
0V.
0U.
zT.
0S.
0R.
1Q.
b0 P.
bz O.
b0 N.
b0 M.
b0 L.
1K.
1J.
b0 I.
b0 H.
b0 G.
b0 F.
b0 E.
b0 D.
b0 C.
b0 B.
b0 A.
b0 @.
b0 ?.
b0 >.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
05.
04.
z3.
02.
01.
00.
z/.
0..
0-.
0,.
z+.
0*.
0).
0(.
z'.
0&.
0%.
0$.
z#.
0".
0!.
0~-
z}-
0|-
0{-
0z-
zy-
0x-
0w-
0v-
zu-
0t-
0s-
0r-
zq-
0p-
0o-
0n-
zm-
0l-
0k-
0j-
zi-
0h-
0g-
0f-
ze-
0d-
0c-
0b-
za-
0`-
0_-
0^-
z]-
0\-
0[-
0Z-
zY-
0X-
0W-
0V-
zU-
0T-
0S-
1R-
b0 Q-
bz P-
b0 O-
0N-
0M-
zL-
0K-
0J-
0I-
zH-
0G-
0F-
0E-
zD-
0C-
0B-
0A-
z@-
0?-
0>-
0=-
z<-
0;-
0:-
09-
z8-
07-
06-
05-
z4-
03-
02-
01-
z0-
0/-
0.-
0--
z,-
0+-
0*-
0)-
z(-
0'-
0&-
0%-
z$-
0#-
0"-
0!-
z~,
0},
0|,
0{,
zz,
0y,
0x,
0w,
zv,
0u,
0t,
0s,
zr,
0q,
0p,
0o,
zn,
0m,
0l,
1k,
b0 j,
bz i,
b0 h,
0g,
0f,
ze,
0d,
0c,
0b,
za,
0`,
0_,
0^,
z],
0\,
0[,
0Z,
zY,
0X,
0W,
0V,
zU,
0T,
0S,
0R,
zQ,
0P,
0O,
0N,
zM,
0L,
0K,
0J,
zI,
0H,
0G,
0F,
zE,
0D,
0C,
0B,
zA,
0@,
0?,
0>,
z=,
0<,
0;,
0:,
z9,
08,
07,
06,
z5,
04,
03,
02,
z1,
00,
0/,
0.,
z-,
0,,
0+,
0*,
z),
0(,
b0 ',
0&,
1%,
bz $,
b0 #,
0",
0!,
z~+
0}+
0|+
0{+
zz+
0y+
0x+
0w+
zv+
0u+
0t+
0s+
zr+
0q+
0p+
0o+
zn+
0m+
0l+
0k+
zj+
0i+
0h+
0g+
zf+
0e+
0d+
0c+
zb+
0a+
0`+
0_+
z^+
0]+
0\+
0[+
zZ+
0Y+
0X+
0W+
zV+
0U+
0T+
0S+
zR+
0Q+
0P+
0O+
zN+
0M+
0L+
0K+
zJ+
0I+
0H+
0G+
zF+
0E+
0D+
0C+
zB+
0A+
0@+
1?+
b0 >+
bz =+
b0 <+
0;+
0:+
z9+
08+
07+
06+
z5+
04+
03+
02+
z1+
00+
0/+
0.+
z-+
0,+
0++
0*+
z)+
0(+
0'+
0&+
z%+
0$+
0#+
0"+
z!+
0~*
0}*
0|*
z{*
0z*
0y*
0x*
zw*
0v*
0u*
0t*
zs*
0r*
0q*
0p*
zo*
0n*
0m*
0l*
zk*
0j*
0i*
0h*
zg*
0f*
0e*
0d*
zc*
0b*
0a*
0`*
z_*
0^*
0]*
0\*
z[*
0Z*
0Y*
1X*
b0 W*
bz V*
b0 U*
b0 T*
b0 S*
b0 R*
1Q*
1P*
b0 O*
b0 N*
b0 M*
b0 L*
b0 K*
b0 J*
b0 I*
b0 H*
b0 G*
0F*
xE*
0D*
xC*
0B*
xA*
0@*
x?*
0>*
x=*
z<*
0;*
0:*
x9*
z8*
07*
06*
x5*
z4*
03*
02*
x1*
z0*
0/*
0.*
x-*
z,*
0+*
0**
x)*
z(*
0'*
0&*
x%*
z$*
0#*
0"*
x!*
z~)
0})
0|)
x{)
zz)
0y)
0x)
xw)
zv)
0u)
0t)
xs)
zr)
0q)
0p)
xo)
zn)
0m)
0l)
xk)
zj)
0i)
0h)
xg)
zf)
0e)
0d)
xc)
zb)
0a)
0`)
x_)
z^)
0])
0\)
1[)
bx Z)
bz Y)
b0 X)
0W)
xV)
zU)
0T)
0S)
xR)
zQ)
0P)
0O)
xN)
zM)
0L)
0K)
xJ)
zI)
0H)
0G)
xF)
zE)
0D)
0C)
xB)
zA)
0@)
0?)
x>)
z=)
0<)
0;)
x:)
z9)
08)
07)
x6)
z5)
04)
03)
x2)
z1)
00)
0/)
x.)
z-)
0,)
0+)
x*)
z))
0()
0')
x&)
z%)
0$)
0#)
x")
z!)
0~(
0}(
x|(
z{(
0z(
0y(
xx(
zw(
0v(
0u(
1t(
bx s(
bz r(
b0 q(
0p(
xo(
zn(
0m(
0l(
xk(
zj(
0i(
0h(
xg(
zf(
0e(
0d(
xc(
zb(
0a(
0`(
x_(
z^(
0](
0\(
x[(
zZ(
0Y(
0X(
xW(
zV(
0U(
0T(
xS(
zR(
0Q(
0P(
xO(
zN(
0M(
0L(
xK(
zJ(
0I(
0H(
xG(
zF(
0E(
0D(
xC(
zB(
0A(
0@(
x?(
z>(
0=(
0<(
x;(
z:(
09(
08(
x7(
z6(
05(
04(
x3(
z2(
01(
00(
1/(
bx .(
bz -(
b0 ,(
0+(
x*(
z)(
0((
0'(
x&(
z%(
0$(
0#(
x"(
z!(
0~'
0}'
x|'
z{'
0z'
0y'
xx'
zw'
0v'
0u'
xt'
zs'
0r'
0q'
xp'
zo'
0n'
0m'
xl'
zk'
0j'
0i'
xh'
zg'
0f'
0e'
xd'
zc'
0b'
0a'
x`'
z_'
0^'
0]'
x\'
z['
0Z'
0Y'
xX'
zW'
0V'
0U'
xT'
zS'
0R'
0Q'
xP'
zO'
0N'
0M'
xL'
zK'
0J'
0I'
1H'
bx G'
bz F'
b0 E'
0D'
0C'
0B'
0A'
x@'
z?'
0>'
0='
x<'
z;'
0:'
09'
x8'
z7'
06'
05'
x4'
z3'
02'
01'
x0'
z/'
0.'
0-'
x,'
z+'
0*'
0)'
x('
z''
0&'
0%'
x$'
z#'
0"'
0!'
x~&
z}&
0|&
0{&
xz&
zy&
0x&
0w&
xv&
zu&
0t&
0s&
xr&
zq&
0p&
0o&
xn&
zm&
0l&
0k&
xj&
zi&
0h&
0g&
xf&
ze&
0d&
0c&
xb&
za&
0`&
bx _&
0^&
1]&
bz \&
b0 [&
0Z&
xY&
zX&
0W&
0V&
xU&
zT&
0S&
0R&
xQ&
zP&
0O&
0N&
xM&
zL&
0K&
0J&
xI&
zH&
0G&
0F&
xE&
zD&
0C&
0B&
xA&
z@&
0?&
0>&
x=&
z<&
0;&
0:&
x9&
z8&
07&
06&
x5&
z4&
03&
02&
x1&
z0&
0/&
0.&
x-&
z,&
0+&
0*&
x)&
z(&
0'&
0&&
x%&
z$&
0#&
0"&
x!&
z~%
0}%
0|%
x{%
zz%
0y%
bx x%
0w%
1v%
bz u%
b0 t%
0s%
xr%
0q%
xp%
0o%
xn%
0m%
xl%
0k%
xj%
0i%
xh%
0g%
xf%
0e%
xd%
0c%
0b%
0a%
0`%
0_%
0^%
b0 ]%
b0 \%
bx [%
bx Z%
b0 Y%
xX%
1W%
bx V%
b0 U%
bx T%
b0 S%
bx R%
b0 Q%
bx P%
b0 O%
bx N%
b0 M%
b0 L%
bx K%
bx J%
b0 I%
b0 H%
b0 G%
b0 F%
b0 E%
b0 D%
b0 C%
b0 B%
b0 A%
b0 @%
b0 ?%
0>%
b0 =%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
b0 0%
b0 /%
b0 .%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
b0 !%
b0 ~$
b0 }$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
b0 p$
b0 o$
b0 n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
b0 a$
b0 `$
0_$
0^$
0]$
0\$
b0 [$
b0 Z$
b0 Y$
0X$
b1111111111111111 W$
b0 V$
b0 U$
b0 T$
b0 S$
b0 R$
b0 Q$
b0 P$
b0 O$
b0 N$
b0 M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
b0 @$
b0 ?$
b0 >$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
b0 1$
b0 0$
0/$
b0 .$
0-$
b0 ,$
b0 +$
b0 *$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
b0 {#
b0 z#
b0 y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
b0 l#
b0 k#
0j#
b0 i#
0h#
b0 g#
b0 f#
b0 e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
b0 X#
b0 W#
b0 V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
b0 I#
b0 H#
0G#
b0 F#
0E#
b0 D#
b0 C#
0B#
0A#
0@#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
0:#
09#
08#
07#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
b0 $#
b0 ##
b0 "#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
b0 r"
b0 q"
b0 p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
b0 b"
b0 a"
b0 `"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
b0 R"
b0 Q"
0P"
0O"
0N"
0M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
1>"
0="
bx <"
0;"
b0 :"
09"
b1 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
b0 }
b0 |
b0 {
xz
xy
bx x
bx w
bx v
xu
0t
0s
0r
0q
0p
b0 o
0n
0m
b0 l
b0 k
bx j
b0 i
0h
0g
0f
0e
0d
0c
b0 b
b0 a
0`
0_
b0 ^
b0 ]
b1111111010100010 \
bx [
xZ
xY
xX
0W
b1010000101010001 V
b0 U
bx T
b1111111010100100 S
b10 R
b0 Q
b0 P
b0 O
bx N
bx M
bx L
xK
b0 J
b0 I
xH
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
x<
bx ;
bx :
bx 9
x8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b10 1
b100 0
b0 /
b0 .
0-
1,
0+
b0 *
b0 )
b0 (
0'
0&
0%
b0 $
b0 #
b0 "
b0 !
$end
#50
0p7
0t7
0x7
0|7
0"8
0&8
0*8
0.8
028
068
0:8
0>8
0B8
0F8
0J8
0N8
0'7
0+7
0/7
037
077
0;7
0?7
0C7
0G7
0K7
0O7
0S7
0W7
0[7
0_7
0c7
b0 y6
b0 }6
b0 i7
004
024
0u
044
0R6
0U6
0S6
0Z6
0]6
0[6
0a6
0d6
b0 K6
0b6
0*7
0.7
027
067
0:7
0>7
0B7
0F7
0J7
0N7
0R7
0V7
0Z7
0^7
0b7
0f7
x$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#100
0f8
0j8
0n8
0r8
0v8
0z8
0~8
0$9
0(9
0,9
009
049
089
0<9
0@9
0D9
0N9
0R9
0V9
0Z9
0^9
0b9
0f9
0j9
0n9
0r9
0v9
0z9
0~9
0$:
0(:
0,:
06:
0::
0>:
0B:
0F:
0J:
0N:
0R:
0V:
0Z:
0^:
0b:
0f:
0j:
0n:
0r:
0|:
0";
0&;
0*;
0.;
02;
06;
0:;
0>;
0B;
0F;
0J;
0N;
0R;
0V;
0Z;
0d;
0h;
0l;
0p;
0t;
0x;
0|;
0"<
0&<
0*<
0.<
02<
06<
0:<
0><
0B<
0L<
0P<
0T<
0X<
0\<
0`<
0d<
0h<
0l<
0p<
0t<
0x<
0|<
0"=
0&=
0*=
04=
08=
0<=
0@=
0D=
0H=
0L=
0P=
0T=
0X=
0\=
0`=
0d=
0h=
0l=
0p=
0z=
0~=
0$>
0(>
0,>
00>
04>
08>
0<>
0@>
0D>
0H>
0L>
0P>
0T>
0X>
0b>
0f>
0j>
0n>
0r>
0v>
0z>
0~>
0$?
0(?
0,?
00?
04?
08?
0<?
0@?
0J?
0N?
0R?
0V?
0Z?
0^?
0b?
0f?
0j?
0n?
0r?
0v?
0z?
0~?
0$@
0(@
02@
06@
0:@
0>@
0B@
0F@
0J@
0N@
0R@
0V@
0Z@
0^@
0b@
0f@
0j@
0n@
0x@
0|@
0"A
0&A
0*A
0.A
02A
06A
0:A
0>A
0BA
0FA
0JA
0NA
0RA
0VA
0`A
0dA
0hA
0lA
0pA
0tA
0xA
0|A
0"B
0&B
0*B
0.B
02B
06B
0:B
0>B
0HB
0LB
0PB
0TB
0XB
0\B
0`B
0dB
0hB
0lB
0pB
0tB
0xB
0|B
0"C
0&C
00C
04C
08C
0<C
0@C
0DC
0HC
0LC
0PC
0TC
0XC
0\C
0`C
0dC
0hC
0lC
0vC
0zC
0~C
0$D
0(D
0,D
00D
04D
08D
0<D
0@D
0DD
0HD
0LD
0PD
0TD
b0 T8
b0 `8
b0 H9
b0 0:
b0 v:
b0 ^;
b0 F<
b0 .=
b0 t=
b0 \>
b0 D?
b0 ,@
b0 r@
b0 ZA
b0 BB
b0 *C
b0 pC
0g8
0k8
0o8
0s8
0w8
0{8
0!9
0%9
0)9
0-9
019
059
099
0=9
0A9
0E9
0O9
0S9
0W9
0[9
0_9
0c9
0g9
0k9
0o9
0s9
0w9
0{9
0!:
0%:
0):
0-:
07:
0;:
0?:
0C:
0G:
0K:
0O:
0S:
0W:
0[:
0_:
0c:
0g:
0k:
0o:
0s:
0}:
0#;
0';
0+;
0/;
03;
07;
0;;
0?;
0C;
0G;
0K;
0O;
0S;
0W;
0[;
0e;
0i;
0m;
0q;
0u;
0y;
0};
0#<
0'<
0+<
0/<
03<
07<
0;<
0?<
0C<
0M<
0Q<
0U<
0Y<
0]<
0a<
0e<
0i<
0m<
0q<
0u<
0y<
0}<
0#=
0'=
0+=
05=
09=
0==
0A=
0E=
0I=
0M=
0Q=
0U=
0Y=
0]=
0a=
0e=
0i=
0m=
0q=
0{=
0!>
0%>
0)>
0->
01>
05>
09>
0=>
0A>
0E>
0I>
0M>
0Q>
0U>
0Y>
0c>
0g>
0k>
0o>
0s>
0w>
0{>
0!?
0%?
0)?
0-?
01?
05?
09?
0=?
0A?
0K?
0O?
0S?
0W?
0[?
0_?
0c?
0g?
0k?
0o?
0s?
0w?
0{?
0!@
0%@
0)@
03@
07@
0;@
0?@
0C@
0G@
0K@
0O@
0S@
0W@
0[@
0_@
0c@
0g@
0k@
0o@
0y@
0}@
0#A
0'A
0+A
0/A
03A
07A
0;A
0?A
0CA
0GA
0KA
0OA
0SA
0WA
0aA
0eA
0iA
0mA
0qA
0uA
0yA
0}A
0#B
0'B
0+B
0/B
03B
07B
0;B
0?B
0IB
0MB
0QB
0UB
0YB
0]B
0aB
0eB
0iB
0mB
0qB
0uB
0yB
0}B
0#C
0'C
01C
05C
09C
0=C
0AC
0EC
0IC
0MC
0QC
0UC
0YC
0]C
0aC
0eC
0iC
0mC
0wC
0{C
0!D
0%D
0)D
0-D
01D
05D
09D
0=D
0AD
0ED
0ID
0MD
0QD
0UD
b0 U8
b0 a8
b0 I9
b0 1:
b0 w:
b0 _;
b0 G<
b0 /=
b0 u=
b0 ]>
b0 E?
b0 -@
b0 s@
b0 [A
b0 CB
b0 +C
b0 qC
0]A
0_>
0a;
1c8
0^A
0`>
0b;
1d8
1-7
017
0=7
0E7
0M7
0Q7
0U7
0Y7
0]7
0a7
0e7
1,"
0-C
0/@
01=
03:
0.C
00@
02=
04:
1x6
0)7
057
097
0A7
0I7
0sC
0EB
0u@
0G?
0w=
0I<
0y:
0K9
0tC
0FB
0v@
0H?
0x=
0J<
0z:
0L9
b10 T
b10 {6
b10 !7
1-"
0O6
0W6
1_6
1X
0Y&
0U&
0Q&
0M&
0I&
0E&
0A&
0=&
09&
05&
01&
0-&
0)&
0%&
0!&
0{%
b1 [8
b1 ]8
0?*
0A*
0C*
0E*
0@'
0<'
08'
04'
00'
0,'
0('
0$'
0~&
0z&
0v&
0r&
0n&
0j&
0f&
0b&
b1 Z8
b1 _8
0L'
0P'
0T'
0X'
0\'
0`'
0d'
0h'
0l'
0p'
0t'
0x'
0|'
0"(
0&(
0*(
0H
0Z
b1 j
b1 <"
b1 I6
02"
0d%
0f%
0h%
0j%
b0 w
b0 [%
b0 x%
b0 Y8
b0 N
b0 V%
0l%
0n%
0p%
0r%
b0 v
b0 Z%
b0 _&
b0 X8
b0 x
b0 N%
b0 G'
1Q6
1Y6
1X%
1,4
0z
01"
1Y
b0 }3
b0 M
b0 J%
b0 l6
b0 R8
b0 \8
b0 L
b0 K%
b0 S8
b0 ^8
1H6
08
0<
0K
0{3
0y
00"
0."
0/"
0+"
0x(
0|(
0")
0&)
0*)
0.)
02)
06)
0:)
0>)
0B)
0F)
0J)
0N)
0R)
0V)
0_)
0c)
0g)
0k)
0o)
0s)
0w)
0{)
0!*
0%*
0)*
0-*
01*
05*
09*
0=*
b0 J6
b0 [
b0 C2
b0 m6
0|3
b0 z3
03(
07(
0;(
0?(
0C(
0G(
0K(
0O(
0S(
0W(
0[(
0_(
0c(
0g(
0k(
0o(
0!5
0%5
0)5
0-5
015
055
095
0=5
0A5
0E5
0I5
0M5
0Q5
0U5
0Y5
0]5
b0 :
b0 R%
b0 s(
b0 )4
b0 z4
0f5
0j5
0n5
0r5
0v5
0z5
0~5
0$6
0(6
0,6
006
046
086
0<6
0@6
0D6
b0 ;
b0 T%
b0 Z)
b0 *4
b0 a5
0:4
0>4
0B4
0F4
0J4
0N4
0R4
0V4
0Z4
0^4
0b4
0f4
0j4
0n4
0r4
0v4
b0 9
b0 P%
b0 .(
b0 '4
b0 54
0$7
b1 .
0`5
0\5
0X5
0T5
0P5
0L5
0H5
0D5
0@5
0<5
085
045
005
0,5
0(5
0$5
0G6
0C6
0?6
0;6
076
036
0/6
0+6
0'6
0#6
0}5
0y5
0u5
0q5
0m5
0i5
0y4
0u4
0q4
0m4
0i4
0e4
0a4
0]4
0Y4
0U4
0Q4
0M4
0I4
0E4
0A4
0=4
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#150
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#200
0$7
b10 .
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#201
0+4
0W%
0V8
0J.
0P*
0#4
0P6
0X6
0`6
0&7
0m7
1-
#250
1t7
1+7
b10 y6
b10 }6
b10 i7
1a6
1d6
1.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#300
0Q2
1Z2
b1111111010100110 S
b1111111010100110 F2
b10100110 L2
b110 \2
117
1Y2
0U2
0-7
1+5
b100 N2
b100 T
b100 {6
b100 !7
0'5
b100 J2
1=3
b100 R
b100 I2
b100 23
b100 (4
b100 |4
b100 83
b100 H3
0I<
0E3
1A3
1l4
1K9
0c8
1L9
0d8
1L'
1\'
1d'
0-"
0X
b1011000101010001 V
b1011000101010001 .4
b1011000101010001 94
b1011000101010001 r6
b10 :3
b10 [8
b10 ]8
b10 Z8
b10 _8
b1010001 x
b1010001 N%
b1010001 G'
12"
1l5
b10 63
1d%
0h%
1l%
1?*
0Q6
0Y6
11"
0Y
b0 }3
b10 Q
b10 53
b10 -4
b10 e5
b10 s6
b10 |6
b1 M
b1 J%
b1 l6
b1 R8
b1 \8
b1 L
b1 K%
b1 S8
b1 ^8
b1 N
b1 V%
0H6
1e8
1|(
b10 J6
b1010 m6
b1010 z3
13(
1C(
1K(
1S(
1g(
1o(
b1 W8
b1 YD
1r7
b10 z6
b10 g7
1%5
b10 :
b10 R%
b10 s(
b10 )4
b10 z4
1:4
1J4
1R4
1Z4
1n4
1v4
b1010000101010001 9
b1010000101010001 P%
b1010000101010001 .(
b1010000101010001 '4
b1010000101010001 54
0$7
b11 .
b1 /
1r
1'
1e
1%"
1a%
1$"
1b%
1u7
1(5
1y4
1q4
1]4
1U4
1M4
1=4
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#350
0t7
1x7
0+7
1/7
b100 y6
b100 }6
b100 i7
127
0.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#400
1Z2
b110 \2
b1100110 L2
b110 k2
b1 ~2
b101100110 S
b101100110 F2
b1 n2
b0 /3
1-7
117
1Y2
1i2
0j2
1z2
0{2
0|2
0}2
0+3
0,3
0-3
0.3
b110 N2
b110 T
b110 {6
b110 !7
b1 >$
b1010001 A"
b1010001 ?#
b1010001 <#
b1010001 .$
b101 M$
1'5
1+5
b110 J2
0=3
1:$
1I$
1K$
b0 O2
b110 ^2
b1 q2
b0 "3
b110 R
b110 I2
b110 23
b110 (4
b110 |4
b110 83
b110 H3
b1010001 B"
b1010001 L"
0>"
b1010001 C"
b1010001 [$
b1100000 K2
b1 m2
1E3
1F3
0A3
b1 1$
b101 @$
1U.
1e.
1m.
0L'
0\'
0d'
1l'
1|'
1&(
0l4
1`4
0\4
1X4
0T4
1P4
0<4
b101100000 \
b101100000 D2
b1 y#
b1010001 ;#
b1010001 i#
b1010001 ,$
b101 *$
b1 n$
b1010001 Y$
b101 }$
b1010001 i
b1010001 :"
b1010001 >.
b1010001 P.
b0 8"
b101000100000000 x
b101000100000000 N%
b101000100000000 G'
b1010001010110000 V
b1010001010110000 .4
b1010001010110000 94
b1010001010110000 r6
b100 :3
1u#
1&$
1($
b1 I"
b1 `"
b101 H"
b101 p"
1j$
1y$
1{$
1p5
0l5
b100 63
1\"
1l"
1n"
1y
b100 Q
b100 53
b100 -4
b100 e5
b100 s6
b100 |6
b1 l#
b101 {#
b1 a$
b101 p$
b11 J6
b1011 m6
b1011 z3
1c(
1c)
0|(
1")
19"
b1010001 6"
b1010001 6#
b1010001 g#
b1 @%
b1 P$
b1 R"
b101 b"
b1111111110101110 W$
b1010001 Z$
1F/
1V/
1^/
b10 7"
1.0
1>0
1F0
1N0
1b0
1j0
1w0
1j4
b1011000101010001 9
b1011000101010001 P%
b1011000101010001 .(
b1011000101010001 '4
b1011000101010001 54
1j5
b10 ;
b10 T%
b10 Z)
b10 *4
b10 a5
0%5
1)5
b100 :
b100 R%
b100 s(
b100 )4
b100 z4
0r7
1v7
b100 z6
b100 g7
b1010001 ]
b1010001 4"
b1010001 E"
b1010001 V$
b1010001 A.
b1010001 A/
1:2
17/
11(
1A(
1I(
1Q(
1e(
1m(
b1010000101010001 3
b1010000101010001 Q%
b1010000101010001 ,(
b1010000101010001 C.
b1010000101010001 )0
1J'
1Z'
1b'
b1010001 2
b1010001 O%
b1010001 E'
1z(
b10 4
b10 S%
b10 q(
b10 E.
b10 n0
0$7
1m4
1m5
0(5
1,5
0u7
1y7
1*"
0%"
0a%
1)"
b1 }
b1 Y%
b1 I.
b1 k6
1@*
b1 |
b1 ]%
b1 f6
1e%
b1 {
b1 \%
b1 @.
b1 g6
1m%
14(
1D(
1L(
1T(
1h(
1p(
1M'
1]'
1e'
1}(
b10 /
b100 .
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#450
1t7
1+7
b110 y6
b110 }6
b110 i7
1.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#500
1[2
1^$
1t$
157
1s$
0Z2
1r$
b1000 \2
017
1/5
1q$
0Y2
b101001000 S
b101001000 F2
b1001000 L2
b100 k2
0-7
0+5
1>3
1_$
1e$
0h2
b1000 N2
b1000 T
b1000 {6
b1000 !7
b101000100000000 B"
b101000100000000 L"
1d$
1;"
0'5
b1000 J2
1=3
1c$
b100 ^2
b1000 R
b1000 I2
b1000 23
b1000 (4
b1000 |4
b1000 83
b1000 H3
b0 }$
b1111 .%
b1010 =%
b1000000 K2
0E3
1A3
13:
1U.
1e.
1m.
0u.
0'/
0//
b0 I"
b0 `"
b0 H"
b0 p"
b1 G"
b1 "#
b101 F"
b101 2#
1j$
1k$
1l$
1m$
1y$
1z$
1{$
1|$
0*%
1+%
1,%
1-%
09%
1:%
0;%
1<%
b111111111111111 C"
b111111111111111 [$
1l4
0L4
b101000000 \
b101000000 D2
0K9
0c8
0L9
1d8
1\'
1`'
1h'
0l'
0|'
0&(
b1010001 i
b1010001 :"
b1010001 >.
b1010001 P.
0\"
0l"
0n"
1|"
1.#
10#
1b$
b1011001010100000 V
b1011001010100000 .4
b1011001010100000 94
b1011001010100000 r6
b110 :3
b100 [8
b100 ]8
0?*
b1 Z8
b1 _8
b10110000 x
b10110000 N%
b10110000 G'
b1 k#
b101 z#
b0 l#
b0 {#
b1111 a$
b1111 p$
b1110 !%
b1010 0%
b1010111100000000 Y$
b0 n$
1l5
b110 63
0d%
1f%
b0 N
b0 V%
0l%
1,"
b1010001 P
b1010001 O
b101000100000000 6"
b1010001 5#
b1010001 f#
b0 6#
b0 g#
b0 @%
b0 P$
b0 R"
b0 b"
b1 r"
b101 $#
b1010111011111111 W$
b1010111011111111 Z$
0F/
0V/
0^/
1f/
1v/
1~/
1X$
1>%
b110 Q
b110 53
b110 -4
b110 e5
b110 s6
b110 |6
b10 M
b10 J%
b10 l6
b10 R8
b10 \8
b0 L
b0 K%
b0 S8
b0 ^8
0y
1s,
1\*
1l*
1t*
b1010001 #
b1010001 U
b1010001 !4
1C+
1S+
1[+
1c+
1w+
1!,
1`
1_
0w0
1{0
1^1
b101000100000000 ]
b101000100000000 4"
b101000100000000 E"
b101000100000000 V$
b101000100000000 A.
b101000100000000 A/
b11 7"
1^0
1|(
0c)
1g)
b10 J6
b1 [
b1 C2
b1010 m6
b1010 z3
03(
1G(
0K(
1O(
0S(
1W(
0c(
1u0
b10 E
b10 L*
b10 j,
b10 F.
b10 l0
1S.
1c.
1k.
b1010001 "
b1010001 G
b1010001 ~3
b1010001 B
b1010001 G*
b1010001 W*
b1010001 ?.
b1010001 N.
1D/
1T/
1\/
b1010001 C
b1010001 B.
b1010001 ?/
1,0
1<0
1D0
1L0
1`0
1h0
b1010000101010001 !
b1010000101010001 D
b1010000101010001 I*
b1010000101010001 >+
b1010000101010001 D.
b1010000101010001 '0
16.
0z(
1~(
b100 4
b100 S%
b100 q(
b100 E.
b100 n0
1a)
b10 5
b10 U%
b10 X)
b10 G.
b10 U1
0J'
0Z'
0b'
1j'
1z'
1$(
b101000100000000 2
b101000100000000 O%
b101000100000000 E'
1a(
b1011000101010001 3
b1011000101010001 Q%
b1011000101010001 ,(
b1011000101010001 C.
b1011000101010001 )0
1r7
b110 z6
b110 g7
1%5
b110 :
b110 R%
b110 s(
b110 )4
b110 z4
0j5
1n5
b100 ;
b100 T%
b100 Z)
b100 *4
b100 a5
0:4
1N4
0R4
1V4
0Z4
1^4
0j4
b1010001010110000 9
b1010001010110000 P%
b1010001010110000 .(
b1010001010110000 '4
b1010001010110000 54
0$7
b101 .
b11 /
1x0
1n.
1f.
1V.
1_/
1W/
1G/
1k0
1c0
1O0
1G0
1?0
1/0
b1 a
b1 M.
b1 j6
18/
b1 )
b1 b
b1 S*
b1 L.
b1 i6
1;2
1#)
0}(
1d)
1'(
1}'
1m'
0e'
0]'
0M'
1d(
1!"
1C'
1u7
1(5
1q5
0m5
0m4
1a4
0]4
1Y4
0U4
1Q4
0=4
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#550
0t7
0x7
1|7
0+7
0/7
137
b1000 y6
b1000 }6
b1000 i7
167
027
0.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#600
09#
0R2
0@#
0D$
0C$
0B$
1Q2
0A$
0Z2
1[2
1U2
1I$
0E$
b1001100 L2
b1100 \2
b1110 ~2
b1111111001001100 S
b1111111001001100 F2
b11111110 n2
b1111 /3
1-7
017
157
0>3
0^$
0t$
0r$
0O"
0f"
b0 >$
b10110000 A"
b10110000 ?#
b10110000 <#
b10110000 .$
b1011 M$
b10110000 C"
b10110000 [$
0Y2
0z2
1{2
1|2
1}2
1+3
1,3
1-3
1.3
b1010 N2
b1010 T
b1010 {6
b1010 !7
0s$
b0 0$
b0 ?$
0e"
0d"
0:$
1J$
0K$
1L$
0;"
1'5
0+5
1/5
b1010 J2
0=3
0U.
0m.
b1011 }$
b0 V#
b0 =#
b0 F#
b0 +$
b0 e#
0q$
b0 5"
b0 ?"
b0 I%
b10110000 B"
b10110000 L"
b10 O2
b1110 q2
b1111 "3
b1010 R
b1010 I2
b1010 23
b1010 (4
b1010 |4
b1010 83
b1010 H3
0j$
0{$
0R#
0a#
0c#
b0 I"
b0 `"
0c"
b0 @"
b0 O$
b0 Q$
b0 E%
b0 A%
0_$
0e$
1e.
1i.
1q.
b0 1$
b1011 @$
b0 .%
b0 =%
b1000010 K2
b11111110 m2
1E3
0F3
1G3
0A3
0\"
0n"
0h"
b0 R$
1y$
0u$
b0 F%
b0 B%
0d$
b10110000 i
b10110000 :"
b10110000 >.
b10110000 P.
b0 y#
b10110000 ;#
b10110000 i#
b10110000 ,$
b1011 *$
0k$
0l$
0m$
0+%
0,%
0-%
0:%
0<%
0\'
0`'
0h'
1"(
1*(
0x4
0p4
0l4
1\4
0X4
1<4
b1111111001000010 \
b1111111001000010 D2
b0 I#
b0 X#
b0 S$
b0 G%
b0 C%
0c$
0u#
0($
1'$
1)$
b1011 H"
b1011 p"
b0 G"
b0 "#
b0 F"
b0 2#
b1010000000000000 x
b1010000000000000 N%
b1010000000000000 G'
b1100100001 V
b1100100001 .4
b1100100001 94
b1100100001 r6
b1000 :3
19"
b0 4#
b0 D#
b0 Q"
b0 a"
b0 T$
b0 `$
b0 o$
b0 H%
b0 D%
0b$
1l"
1m"
1o"
0|"
0.#
00#
b0 a$
b1011 p$
b0 !%
b0 0%
1t5
0p5
0l5
b1000 63
b0 ^
b0 3"
b0 D"
b0 N$
b0 U$
b0 ?%
b10110000 Y$
b0 n$
b0 k#
b0 z#
b1011 {#
b10110000 Z$
1M9
0e8
1h8
1x8
1"9
1P9
1`9
1h9
18:
1H:
1P:
1~:
10;
18;
1f;
1v;
1~;
1N<
1^<
1f<
16=
1F=
1N=
1|=
1.>
16>
1d>
1t>
1|>
1L?
1\?
1d?
14@
1D@
1L@
1z@
1,A
14A
1bA
1rA
1zA
1JB
1ZB
1bB
12C
1BC
1JC
1xC
1*D
12D
1y
b1000 Q
b1000 53
b1000 -4
b1000 e5
b1000 s6
b1000 |6
b0 P
b0 O
0X$
0>%
b10110000 6"
b0 5#
b0 f#
b10110000 6#
b10110000 g#
b1011 b"
b0 r"
b0 $#
b1111111101001111 W$
1V/
1Z/
1b/
0f/
0v/
0~/
b10 W8
b10 YD
b1010001 (
b1010001 J
b1010001 P8
b1010001 b8
b1010001 J9
b1010001 2:
b1010001 x:
b1010001 `;
b1010001 H<
b1010001 0=
b1010001 v=
b1010001 ^>
b1010001 F?
b1010001 .@
b1010001 t@
b1010001 \A
b1010001 DB
b1010001 ,C
b1010001 rC
b11 J6
b1011 m6
b1011 z3
0C(
1c(
1c)
0|(
0")
1&)
0`
0_
b10 7"
0.0
1B0
0F0
1J0
0N0
1R0
0^0
b10110000 ]
b10110000 4"
b10110000 E"
b10110000 V$
b10110000 A.
b10110000 A/
0^1
1b1
1w0
1s+
b101000100000000 #
b101000100000000 U
b101000100000000 !4
1Z-
0s,
1w,
0J4
1j4
b1011001010100000 9
b1011001010100000 P%
b1011001010100000 .(
b1011001010100000 '4
b1011001010100000 54
1j5
b110 ;
b110 T%
b110 Z)
b110 *4
b110 a5
0%5
0)5
1-5
b1000 :
b1000 R%
b1000 s(
b1000 )4
b1000 z4
0r7
0v7
1z7
b1000 z6
b1000 g7
0:2
07/
01(
1E(
0I(
1M(
0Q(
1U(
0a(
b1010001010110000 3
b1010001010110000 Q%
b1010001010110000 ,(
b1010001010110000 C.
b1010001010110000 )0
1Z'
1^'
1f'
0j'
0z'
0$(
b10110000 2
b10110000 O%
b10110000 E'
0a)
1e)
b100 5
b100 U%
b100 X)
b100 G.
b100 U1
1z(
b110 4
b110 S%
b110 q(
b110 E.
b110 n0
1\0
b1011000101010001 !
b1011000101010001 D
b1011000101010001 I*
b1011000101010001 >+
b1011000101010001 D.
b1011000101010001 '0
0D/
0T/
0\/
1d/
1t/
1|/
b101000100000000 C
b101000100000000 B.
b101000100000000 ?/
1\1
b10 F
b10 N*
b10 Q-
b10 H.
b10 S1
0u0
1y0
b100 E
b100 L*
b100 j,
b100 F.
b100 l0
1A+
1Q+
1Y+
1a+
1u+
1}+
b1010000101010001 >
b1010000101010001 J*
b1010000101010001 <+
1Z*
1j*
1r*
b1010001 =
b1010001 H*
b1010001 U*
1q,
b10 @
b10 M*
b10 h,
0$7
0M4
1m4
1m5
0(5
0,5
105
0u7
0y7
1}7
0!"
0C'
b0 }
b0 Y%
b0 I.
b0 k6
0@*
0e%
b10 |
b10 ]%
b10 f6
1g%
b0 {
b0 \%
b0 @.
b0 g6
0m%
04(
1H(
0L(
1P(
0T(
1X(
0d(
1]'
1a'
1i'
0m'
0}'
0'(
0d)
1h)
1}(
1_0
0G/
0W/
0_/
1g/
1w/
1!0
1_1
0x0
1|0
b1 o
b1 R*
b1 h6
b1 Q8
b1 XD
17.
1D+
1T+
1\+
1d+
1x+
1",
1]*
1m*
1u*
1t,
b100 /
b110 .
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#650
1t7
1+7
b1010 y6
b1010 }6
b1010 i7
1.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#700
11%
1]$
1%%
1$%
1#%
1M2
1S2
1"%
1R2
1^$
1t$
1s$
1r$
1V2
1q$
117
0Q2
b10100000 A"
b10100000 ?#
b10100000 <#
b10100000 .$
b1010 M$
1_$
1e$
b0 \2
b110000 L2
b11 k2
b0 ~2
b110000 S
b110000 F2
b0 n2
b0 /3
0-7
1+5
0I$
1d$
0Y2
0Z2
0U2
1h2
0i2
0{2
0|2
0}2
0+3
0,3
0-3
0.3
b1100 N2
b1100 T
b1100 {6
b1100 !7
1z&
1r&
1b&
b1010000000000000 B"
b1010000000000000 L"
1c$
0'5
b1100 J2
1=3
b1010001 v
b1010001 Z%
b1010001 _&
b1010001 X8
b1010 @$
1b$
b100 O2
b10 ^2
b0 q2
b0 "3
b1100 R
b1100 I2
b1100 23
b1100 (4
b1100 |4
b1100 83
b1100 H3
1g8
1w8
1!9
1O9
1_9
1g9
17:
1G:
1O:
1}:
1/;
17;
1e;
1u;
1};
1M<
1]<
1e<
15=
1E=
1M=
1{=
1->
15>
1c>
1s>
1{>
1K?
1[?
1c?
13@
1C@
1K@
1y@
1+A
13A
1aA
1qA
1yA
1IB
1YB
1aB
11C
1AC
1IC
1wC
1)D
11D
b1010001 U8
b1010001 a8
b1010001 I9
b1010001 1:
b1010001 w:
b1010001 _;
b1010001 G<
b1010001 /=
b1010001 u=
b1010001 ]>
b1010001 E?
b1010001 -@
b1010001 s@
b1010001 [A
b1010001 CB
b1010001 +C
b1010001 qC
1A*
b10100000 ;#
b10100000 i#
b10100000 ,$
b1010 *$
b0 }$
b0 .%
b110 =%
b100100 K2
b0 m2
0E3
1A3
1L'
0"(
0*(
0e.
1i.
1q.
0+/
03/
0&$
b0 H"
b0 p"
b1010 F"
b1010 2#
b0 J"
1j$
1k$
1l$
1m$
1y$
1z$
1{$
1|$
1*%
1+%
1,%
1-%
19%
0:%
1;%
0<%
b110000000000000 C"
b110000000000000 [$
1l4
1d4
0`4
0\4
0P4
1L4
1@4
0<4
b100100 \
b100100 D2
0y:
13:
1L9
0d8
b1 x
b1 N%
b1 G'
1-"
0_6
1X
b10100000 i
b10100000 :"
b10100000 >.
b10100000 P.
0l"
0m"
0o"
1/#
11#
b1010000010010 V
b1010000010010 .4
b1010000010010 94
b1010000010010 r6
b1010 :3
b100 [8
b100 ]8
1?*
b10 Z8
b10 _8
b0 j
b0 <"
b0 I6
02"
b1010 z#
b0 {#
b1111 a$
b1111 p$
b1111 !%
b101 0%
b110000000000000 Y$
b0 n$
1l5
b1010 63
0d%
b11 N
b11 V%
1l%
1Q6
1Y6
1,"
01"
1Y
09"
b1010000000000000 6"
b10100000 5#
b10100000 f#
b0 6#
b0 g#
b0 b"
b1010 $#
b101111111111111 W$
b101111111111111 Z$
0V/
0Z/
0b/
1z/
1$0
1X$
1>%
b1010 Q
b1010 53
b1010 -4
b1010 e5
b1010 s6
b1010 |6
b10 M
b10 J%
b10 l6
b10 R8
b10 \8
b1 L
b1 K%
b1 S8
b1 ^8
1H6
0y
1s,
0Z-
1^-
0\*
1p*
0t*
1x*
b10110000 #
b10110000 U
b10110000 !4
0C+
1W+
0[+
1_+
0c+
1g+
0s+
0w0
0{0
1!1
1^1
b1010000000000000 ]
b1010000000000000 4"
b1010000000000000 E"
b1010000000000000 V$
b1010000000000000 A.
b1010000000000000 A/
b11 7"
0>0
1^0
1|(
0c)
0g)
1k)
b0 J6
b0 m6
b0 z3
13(
0O(
1S(
0c(
0g(
0o(
0q,
1u,
b100 @
b100 M*
b100 h,
1X-
b10 *
b10 I
b10 A
b10 O*
b10 O-
1q+
b1011000101010001 >
b1011000101010001 J*
b1011000101010001 <+
1u0
b110 E
b110 L*
b110 j,
b110 F.
b110 l0
0\1
1`1
b100 F
b100 N*
b100 Q-
b100 H.
b100 S1
0S.
1g.
0k.
1o.
b10110000 "
b10110000 G
b10110000 ~3
b10110000 B
b10110000 G*
b10110000 W*
b10110000 ?.
b10110000 N.
1T/
1X/
1`/
0d/
0t/
0|/
b10110000 C
b10110000 B.
b10110000 ?/
0,0
1@0
0D0
1H0
0L0
1P0
0\0
b1010001010110000 !
b1010001010110000 D
b1010001010110000 I*
b1010001010110000 >+
b1010001010110000 D.
b1010001010110000 '0
06.
0z(
0~(
1$)
b1000 4
b1000 S%
b1000 q(
b1000 E.
b1000 n0
1a)
b110 5
b110 U%
b110 X)
b110 G.
b110 U1
0Z'
0^'
0f'
1~'
1((
b1010000000000000 2
b1010000000000000 O%
b1010000000000000 E'
0A(
1a(
b1011001010100000 3
b1011001010100000 Q%
b1011001010100000 ,(
b1011001010100000 C.
b1011001010100000 )0
1r7
b1010 z6
b1010 g7
1%5
b1010 :
b1010 R%
b1010 s(
b1010 )4
b1010 z4
0j5
0n5
1r5
b1000 ;
b1000 T%
b1000 Z)
b1000 *4
b1000 a5
1:4
0V4
1Z4
0j4
0n4
0v4
b1100100001 9
b1100100001 P%
b1100100001 .(
b1100100001 '4
b1100100001 54
0$7
b111 .
b101 /
1x,
0t,
1[-
1t+
1x0
1c1
0_1
1r.
0n.
1j.
0V.
0!0
0w/
0g/
1c/
1[/
1W/
0_0
1S0
0O0
1K0
0G0
1C0
0/0
b0 a
b0 M.
b0 j6
08/
b0 )
b0 b
b0 S*
b0 L.
b0 i6
0;2
1i9
1a9
1Q9
1')
0#)
0}(
1d)
1+(
1#(
0i'
0a'
0]'
1d(
0D(
1!"
1C'
1u7
1(5
1u5
0q5
0m5
0y4
0q4
0m4
1]4
0Y4
1=4
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#750
b1 k
b1 B2
1L6
0t7
1x7
0+7
1/7
b1100 y6
b1100 }6
b1100 i7
0a6
0d6
b1 K6
1b6
127
0.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#800
0R2
b1 >$
1Y2
1:$
1I$
1K$
b110 \2
b1110110 S
b1110110 F2
b1110110 L2
b111 k2
1-7
117
1e.
1m.
0u.
0y.
0}.
0#/
0'/
15&
1-&
1{%
0z&
0r&
0b&
1Z2
0[2
0V2
1W2
1i2
b1110 N2
b1110 T
b1110 {6
b1110 !7
b1010001 A"
b1010001 ?#
b1010001 <#
b1010001 .$
b101 M$
0Y.
b1 1$
b1010001 w
b1010001 [%
b1010001 x%
b1010001 Y8
b0 v
b0 Z%
b0 _&
b0 X8
1'5
1+5
b1110 J2
0=3
0J$
0L$
b1 y#
1f8
1v8
1~8
1N9
1^9
1f9
16:
1F:
1N:
1|:
1.;
16;
1d;
1t;
1|;
1L<
1\<
1d<
14=
1D=
1L=
1z=
1,>
14>
1b>
1r>
1z>
1J?
1Z?
1b?
12@
1B@
1J@
1x@
1*A
12A
1`A
1pA
1xA
1HB
1XB
1`B
10C
1@C
1HC
1vC
1(D
10D
b1010001 T8
b1010001 `8
b1010001 H9
b1010001 0:
b1010001 v:
b1010001 ^;
b1010001 F<
b1010001 .=
b1010001 t=
b1010001 \>
b1010001 D?
b1010001 ,@
b1010001 r@
b1010001 ZA
b1010001 BB
b1010001 *C
b1010001 pC
0g8
0w8
0!9
0O9
0_9
0g9
07:
0G:
0O:
0}:
0/;
07;
0e;
0u;
0};
0M<
0]<
0e<
05=
0E=
0M=
0{=
0->
05>
0c>
0s>
0{>
0K?
0[?
0c?
03@
0C@
0K@
0y@
0+A
03A
0aA
0qA
0yA
0IB
0YB
0aB
01C
0AC
0IC
0wC
0)D
01D
b0 U8
b0 a8
b0 I9
b0 1:
b0 w:
b0 _;
b0 G<
b0 /=
b0 u=
b0 ]>
b0 E?
b0 -@
b0 s@
b0 [A
b0 CB
b0 +C
b0 qC
b1000 O2
b110 ^2
b1110 R
b1110 I2
b1110 23
b1110 (4
b1110 |4
b1110 83
b1110 H3
b1010001 B"
b1010001 L"
0q$
0r$
0s$
0^$
0t$
0"%
0#%
0$%
0]$
0%%
01%
0_$
0e$
1U.
1u#
1&$
1($
b1 I"
b1 `"
b101 H"
b101 p"
1K9
14:
0L'
1P'
b1101000 K2
1E3
1F3
0A3
b101 @$
b101 }$
b0 .%
b0 =%
0d$
0i.
0q.
0+/
0//
1\"
1l"
1n"
0y:
03:
0L9
0d8
b10 x
b10 N%
b10 G'
1p4
0l4
1`4
1P4
1D4
0@4
b1101000 \
b1101000 D2
b1010001 ;#
b1010001 i#
b1010001 ,$
b101 *$
1j$
0k$
0l$
0m$
1y$
0z$
1{$
0|$
0*%
0+%
0,%
0-%
09%
0;%
0c$
b1010001 C"
b1010001 [$
b1010001 i
b1010001 :"
b1010001 >.
b1010001 P.
b1 l#
b101 {#
b10 [8
b10 ]8
b100 Z8
b100 _8
b10011000110100 V
b10011000110100 .4
b10011000110100 94
b10011000110100 r6
b1100 :3
0'$
0)$
b0 F"
b0 2#
b0 J"
0b$
19"
b1010001 6#
b1010001 g#
b1 @%
b1 P$
b1 R"
b101 b"
1F/
1V/
1^/
1d%
0f%
0l%
1n%
0?*
0A*
1C*
b1 }3
1p5
0l5
b1100 63
0/#
01#
b1 a$
b101 p$
b0 !%
b0 0%
b1010001 Y$
b1 n$
0M9
1e8
0h8
1|8
0"9
1&9
0P9
1d9
0h9
1l9
08:
1L:
0P:
1T:
0~:
14;
08;
1<;
0f;
1z;
0~;
1$<
0N<
1b<
0f<
1j<
06=
1J=
0N=
1R=
0|=
12>
06>
1:>
0d>
1x>
0|>
1"?
0L?
1`?
0d?
1h?
04@
1H@
0L@
1P@
0z@
10A
04A
18A
0bA
1vA
0zA
1~A
0JB
1^B
0bB
1fB
02C
1FC
0JC
1NC
0xC
1.D
02D
16D
b1 M
b1 J%
b1 l6
b1 R8
b1 \8
b10 L
b10 K%
b10 S8
b10 ^8
b100 N
b100 V%
1y
b1100 Q
b1100 53
b1100 -4
b1100 e5
b1100 s6
b1100 |6
b0 z#
b1010001 Z$
0X$
0>%
b1010001 O
b1 W8
b1 YD
b10110000 (
b10110000 J
b10110000 P8
b10110000 b8
b10110000 J9
b10110000 2:
b10110000 x:
b10110000 `;
b10110000 H<
b10110000 0=
b10110000 v=
b10110000 ^>
b10110000 F?
b10110000 .@
b10110000 t@
b10110000 \A
b10110000 DB
b10110000 ,C
b10110000 rC
b1 J6
b10 [
b10 C2
b1 m6
b1 z3
03(
17(
1C(
0G(
0S(
0W(
1[(
1c(
1c)
0|(
1")
b1010001 6"
b0 5#
b0 f#
b0 $#
b1111111110101110 W$
0z/
0$0
b0 7"
1.0
0J0
1N0
0^0
0b0
0j0
0^1
0b1
1f1
1w0
0S+
1s+
b1010000000000000 #
b1010000000000000 U
b1010000000000000 !4
0l*
1Z-
0s,
0w,
1{,
0:4
1>4
1J4
0N4
0Z4
0^4
1b4
1j4
b1010000010010 9
b1010000010010 P%
b1010000010010 .(
b1010000010010 '4
b1010000010010 54
1j5
b1010 ;
b1010 T%
b1010 Z)
b1010 *4
b1010 a5
0%5
1)5
b1100 :
b1100 R%
b1100 s(
b1100 )4
b1100 z4
0r7
1v7
b1100 z6
b1100 g7
b1010001 ]
b1010001 4"
b1010001 E"
b1010001 V$
b1010001 A.
b1010001 A/
1:2
1<2
17/
11(
0M(
1Q(
0a(
0e(
0m(
b1100100001 3
b1100100001 Q%
b1100100001 ,(
b1100100001 C.
b1100100001 )0
1`&
1p&
1x&
b1010001 7
b1010001 M%
b1010001 [&
1J'
0~'
0((
b1 2
b1 O%
b1 E'
0a)
0e)
1i)
b1000 5
b1000 U%
b1000 X)
b1000 G.
b1000 U1
1z(
b1010 4
b1010 S%
b1010 q(
b1010 E.
b1010 n0
0<0
1\0
b1011001010100000 !
b1011001010100000 D
b1011001010100000 I*
b1011001010100000 >+
b1011001010100000 D.
b1011001010100000 '0
0T/
0X/
0`/
1x/
1"0
b1010000000000000 C
b1010000000000000 B.
b1010000000000000 ?/
0c.
b10100000 "
b10100000 G
b10100000 ~3
b10100000 B
b10100000 G*
b10100000 W*
b10100000 ?.
b10100000 N.
1\1
b110 F
b110 N*
b110 Q-
b110 H.
b110 S1
0u0
0y0
1}0
b1000 E
b1000 L*
b1000 j,
b1000 F.
b1000 l0
0A+
1U+
0Y+
1]+
0a+
1e+
0q+
b1010001010110000 >
b1010001010110000 J*
b1010001010110000 <+
0Z*
1n*
0r*
1v*
b10110000 =
b10110000 H*
b10110000 U*
0X-
1\-
b100 *
b100 I
b100 A
b100 O*
b100 O-
1q,
b110 @
b110 M*
b110 h,
0$7
0=4
1A4
1M4
0Q4
0]4
0a4
1e4
1m4
1m5
0(5
1,5
0u7
1y7
0*"
0!"
0C'
1%"
1a%
0)"
1@*
b11 }
b11 Y%
b11 I.
b11 k6
1B*
b1 {
b1 \%
b1 @.
b1 g6
1m%
14(
0P(
1T(
0d(
0h(
0p(
1c&
1s&
1{&
1M'
0#(
0+(
0d)
0h)
1l)
1}(
0?0
1_0
0W/
0[/
0c/
1{/
1%0
0f.
1_1
0x0
0|0
1"1
b0 o
b0 R*
b0 h6
b0 Q8
b0 XD
07.
0D+
1X+
0\+
1`+
0d+
1h+
0t+
0]*
1q*
0u*
1y*
0[-
1_-
1t,
b110 /
b1000 .
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#850
b0 k
b0 B2
0L6
1t7
1+7
b1110 y6
b1110 }6
b1110 i7
b0 K6
0b6
1.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#900
1\$
14%
13%
12%
11%
0M2
0S2
1]$
1%%
0`2
1$%
0_2
1#%
1"%
1[2
0W2
1g2
057
197
1^$
1t$
b1 ]2
135
0R2
017
0/5
b1 W3
1r$
1s$
b0 8"
0].
0a.
1e.
0i.
1m.
0q.
0u.
0y.
0}.
0#/
0'/
0+/
0//
03/
0Y2
193
1?3
b1 0$
b101 ?$
b1010001 5"
b1010001 ?"
b1010001 I%
1_$
1e$
b1100 \2
b10111100 L2
b1011 k2
b1110 ~2
b1111111010111100 S
b1111111010111100 F2
b11111110 n2
b1111 /3
0-7
0+5
1>3
05&
0-&
0{%
0~&
0v&
0r&
b0 1$
b0 @$
1q$
b1 V#
b1010001 =#
b1010001 F#
b1010001 +$
b101 e#
b1010001 @"
b1010001 O$
b1010001 Q$
b1010001 E%
b1010001 A%
1d$
0;"
0Y.
1Z2
0V2
0i2
1j2
1{2
1|2
1}2
1+3
1,3
1-3
1.3
b0 N2
b10000 T
b10000 {6
b10000 !7
b0 w
b0 [%
b0 x%
b0 Y8
b0 v
b0 Z%
b0 _&
b0 X8
b0 y#
b0 ;#
b0 i#
b0 ,$
b0 *$
1f$
1u$
1w$
1R#
1a#
1c#
b1010001 R$
b1010001 F%
b1010001 B%
1c$
0'5
b10000 J2
1=3
0f8
0v8
0~8
0N9
0^9
0f9
06:
0F:
0N:
0|:
0.;
06;
0d;
0t;
0|;
0L<
0\<
0d<
04=
0D=
0L=
0z=
0,>
04>
0b>
0r>
0z>
0J?
0Z?
0b?
02@
0B@
0J@
0x@
0*A
02A
0`A
0pA
0xA
0HB
0XB
0`B
00C
0@C
0HC
0vC
0(D
00D
b0 T8
b0 `8
b0 H9
b0 0:
b0 v:
b0 ^;
b0 F<
b0 .=
b0 t=
b0 \>
b0 D?
b0 ,@
b0 r@
b0 ZA
b0 BB
b0 *C
b0 pC
0w8
0{8
0%9
0_9
0c9
0k9
0G:
0K:
0S:
0/;
03;
0;;
0u;
0y;
0#<
0]<
0a<
0i<
0E=
0I=
0Q=
0->
01>
09>
0s>
0w>
0!?
0[?
0_?
0g?
0C@
0G@
0O@
0+A
0/A
07A
0qA
0uA
0}A
0YB
0]B
0eB
0AC
0EC
0MC
0)D
0-D
05D
b0 U8
b0 a8
b0 I9
b0 1:
b0 w:
b0 _;
b0 G<
b0 /=
b0 u=
b0 ]>
b0 E?
b0 -@
b0 s@
b0 [A
b0 CB
b0 +C
b0 qC
0u#
0&$
0($
b1010001 S$
b1010001 G%
b1010001 C%
b101 }$
b0 .%
b0 =%
1U.
b1100 O2
b1010 ^2
b1110 q2
b1111 "3
b10000 R
b10000 I2
b10000 23
b10000 (4
b10000 |4
b10000 83
b0 H3
1b;
b1 I#
b101 X#
b1010001 T$
b1010001 H%
b1010001 D%
0j$
1k$
1l$
1m$
0y$
1z$
0{$
1|$
1*%
1+%
1,%
1-%
19%
1:%
1;%
1<%
b1010001 i
b1010001 :"
b1010001 >.
b1010001 P.
b10101100 K2
b11111110 m2
0E3
1A3
1y:
0K9
04:
0d8
0P'
1T'
b0 l#
b0 {#
b1010001 4#
b1010001 D#
b1 Q"
b101 a"
b1 `$
b101 o$
b1010001 C"
b1010001 [$
1t4
0p4
1\4
1T4
0P4
1@4
b1111111010101100 \
b1111111010101100 D2
b1000 [8
b1000 ]8
b10000 Z8
b10000 _8
b100 x
b100 N%
b100 G'
b0 6#
b0 g#
b0 @%
b0 P$
b0 R"
b0 b"
b1111111111111111 W$
0F/
0V/
0^/
b1010001 ^
b1010001 3"
b1010001 D"
b1010001 N$
b1010001 U$
b1010001 ?%
b1111 a$
b1111 p$
b1111 !%
b1111 0%
1b$
b100011101010110 V
b100011101010110 .4
b100011101010110 94
b100011101010110 r6
b1110 :3
0x8
0`9
0H:
00;
0v;
0^<
0F=
0.>
0t>
0\?
0D@
0,A
0rA
0ZB
0BC
0*D
b0 ]
b0 4"
b0 E"
b0 V$
b0 A.
b0 A/
b1111111111111111 Z$
b1010001 Y$
b1 n$
1l5
b1110 63
1f%
0n%
1p%
1A*
0Q6
0Y6
0Y
b10 }3
b10100000 (
b10100000 J
b10100000 P8
b10100000 b8
b10100000 J9
b10100000 2:
b10100000 x:
b10100000 `;
b10100000 H<
b10100000 0=
b10100000 v=
b10100000 ^>
b10100000 F?
b10100000 .@
b10100000 t@
b10100000 \A
b10100000 DB
b10100000 ,C
b10100000 rC
b0 O
b1010001 P
1X$
1>%
b1110 Q
b1110 53
b1110 -4
b1110 e5
b1110 s6
b1110 |6
b11 M
b11 J%
b11 l6
b11 R8
b11 \8
b100 L
b100 K%
b100 S8
b100 ^8
b110 N
b110 V%
0y
1s,
0Z-
0^-
1b-
1\*
1l*
0p*
1t*
0x*
b1010001 #
b1010001 U
b1010001 !4
1C+
0_+
1c+
0s+
0w+
0!,
0w0
1{0
1^1
b1 7"
0.0
120
1>0
0B0
0N0
0R0
1V0
1^0
1|(
0c)
1g)
b10 J6
b11 [
b11 C2
b10 m6
b10 z3
07(
1;(
1G(
1W(
0c(
1g(
0q,
0u,
1y,
b1000 @
b1000 M*
b1000 h,
1X-
b110 *
b110 I
b110 A
b110 O*
b110 O-
0j*
b10100000 =
b10100000 H*
b10100000 U*
0Q+
1q+
b1011001010100000 >
b1011001010100000 J*
b1011001010100000 <+
1u0
b1010 E
b1010 L*
b1010 j,
b1010 F.
b1010 l0
0\1
0`1
1d1
b1000 F
b1000 N*
b1000 Q-
b1000 H.
b1000 S1
1S.
1c.
0g.
1k.
0o.
b1010001 "
b1010001 G
b1010001 ~3
b1010001 B
b1010001 G*
b1010001 W*
b1010001 ?.
b1010001 N.
1D/
1T/
1\/
0x/
0"0
b1010001 C
b1010001 B.
b1010001 ?/
1,0
0H0
1L0
0\0
0`0
0h0
b1100100001 !
b1100100001 D
b1100100001 I*
b1100100001 >+
b1100100001 D.
b1100100001 '0
18.
16.
0z(
1~(
b1100 4
b1100 S%
b1100 q(
b1100 E.
b1100 n0
1a)
b1010 5
b1010 U%
b1010 X)
b1010 G.
b1010 U1
0J'
1N'
b10 2
b10 O%
b10 E'
0`&
0p&
0x&
b0 7
b0 M%
b0 [&
1y%
1+&
13&
b1010001 6
b1010001 L%
b1010001 t%
01(
15(
1A(
0E(
0Q(
0U(
1Y(
1a(
b1010000010010 3
b1010000010010 Q%
b1010000010010 ,(
b1010000010010 C.
b1010000010010 )0
19/
07/
1>2
0<2
0:2
1r7
b1110 z6
b1110 g7
1%5
b1110 :
b1110 R%
b1110 s(
b1110 )4
b1110 z4
0j5
1n5
b1100 ;
b1100 T%
b1100 Z)
b1100 *4
b1100 a5
0>4
1B4
1N4
1^4
0j4
1n4
b10011000110100 9
b10011000110100 P%
b10011000110100 .(
b10011000110100 '4
b10011000110100 54
0$7
b1001 .
b111 /
1|,
0x,
0t,
1[-
0m*
1t+
0T+
1x0
1g1
0c1
0_1
0r.
1n.
0j.
1f.
1V.
0%0
0{/
1_/
1W/
1G/
0k0
0c0
0_0
1O0
0K0
1/0
b1 a
b1 M.
b1 j6
18/
1=2
b11 )
b11 b
b11 S*
b11 L.
b11 i6
1;2
1'9
1}8
1y8
1#)
0}(
1d)
1Q'
0M'
0{&
0s&
0c&
16&
1.&
1|%
1d(
1\(
0X(
0T(
0H(
1D(
18(
04(
1o%
b10 {
b10 \%
b10 @.
b10 g6
0m%
0g%
b1 |
b1 ]%
b1 f6
1e%
1D*
0B*
b100 }
b100 Y%
b100 I.
b100 k6
0@*
1!"
1C'
1u7
1(5
1q5
0m5
1q4
0m4
1a4
1Q4
1E4
0A4
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#950
0t7
0x7
0|7
1"8
0+7
0/7
037
177
b10000 y6
b10000 }6
b10000 i7
1:7
067
027
0.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#1000
0H2
0b2
0a2
0`2
0_2
1C$
0M2
0S2
b10 >$
12$
b10100010 A"
b10100010 ?#
b10100010 <#
b10100010 .$
b1010 M$
1A$
b10 J"
0R2
x_6
0:$
16$
0I$
0K$
1E$
1G$
b0x j
b0x <"
b0x I6
b1110010 B"
b1110010 L"
0=7
1e"
1Y2
1Z2
0V2
1g2
0^$
0t$
05&
0-&
0{%
b110 \2
b11010110 L2
b1101 k2
b0 ~2
b11010110 S
b11010110 F2
b0 n2
b0 /3
093
0?3
0>3
075
1-7
017
057
197
0U.
0e.
0m.
b0x 8"
b10 I"
b10 `"
1S"
b1010 H"
b1010 p"
1c"
b1 0$
b101 ?$
b0 w
b0 [%
b0 x%
b0 Y8
0[2
0h2
1i2
0{2
0|2
0}2
0+3
0,3
0-3
0.3
b10 N2
b1 ]2
b10010 T
b10010 {6
b10010 !7
b0 i
b0 :"
b0 >.
b0 P.
0\"
1X"
0l"
0n"
1h"
1j"
b1 1$
b101 @$
0d$
0_$
0e$
0c$
0r$
1s$
0;"
b1 V#
b1010001 =#
b1010001 F#
b1010001 +$
b101 e#
b10100010 5"
b10100010 ?"
b10100010 I%
0f8
0v8
0~8
0N9
0^9
0f9
06:
0F:
0N:
0|:
0.;
06;
0d;
0t;
0|;
0L<
0\<
0d<
04=
0D=
0L=
0z=
0,>
04>
0b>
0r>
0z>
0J?
0Z?
0b?
02@
0B@
0J@
0x@
0*A
02A
0`A
0pA
0xA
0HB
0XB
0`B
00C
0@C
0HC
0vC
0(D
00D
b0 T8
b0 `8
b0 H9
b0 0:
b0 v:
b0 ^;
b0 F<
b0 .=
b0 t=
b0 \>
b0 D?
b0 ,@
b0 r@
b0 ZA
b0 BB
b0 *C
b0 pC
1'5
0+5
0/5
0=3
0K3
135
b10010 J2
b1 y#
b1010001 ;#
b1010001 i#
b1010001 ,$
b101 *$
0"%
0#%
0$%
0]$
0%%
01%
02%
03%
0\$
04%
1R#
1a#
1c#
b1000000000101000 @"
b1000000000101000 O$
b1000000000101000 Q$
b10100010 E%
b101000 A%
1I<
b100 O2
b1100 ^2
b0 q2
b0 "3
b10 H3
b10010 R
b10010 I2
b10010 23
b10010 (4
b10010 |4
b10010 83
b1 W3
09"
b0 6"
1u#
1&$
1($
0j$
0y$
0{$
1b$
b1010 }$
1q$
b0 .%
b0 =%
b1000000000101000 R$
b10100010 F%
b101000 B%
0y:
0K9
12=
0b;
1P'
b11000100 K2
b0 m2
1E3
0F3
0G3
0A3
1S3
0k$
0l$
0m$
1f$
0z$
0|$
1u$
1w$
0*%
0+%
0,%
0-%
09%
0:%
0;%
0<%
b1 I#
b101 X#
b1000000000101000 S$
b10100010 G%
b101000 C%
b100000 [8
b100000 ]8
b1000000 Z8
b1000000 _8
b110 x
b110 N%
b110 G'
12"
1l4
1h4
0d4
0`4
0\4
1P4
0L4
0D4
b11000100 \
b11000100 D2
b1 l#
b101 {#
b10100010 C"
b10100010 [$
b1010001 4#
b1010001 D#
b1 Q"
b101 a"
b1000000000101000 T$
b1 `$
b101 o$
b10100010 H%
b101000 D%
b101100001100010 V
b101100001100010 .4
b101100001100010 94
b101100001100010 r6
b0 :3
b1 I3
b1010001 6#
b1010001 g#
b1 @%
b1 P$
b1 R"
b101 b"
b1111111110101110 W$
1F/
1V/
1^/
b1 a$
b101 p$
b0 !%
b0 0%
b1010001 ^
b1010001 3"
b1010001 D"
b1010001 N$
b1010001 U$
b1010001 ?%
0f%
1h%
1n%
1?*
b100 }3
1x5
0t5
0p5
0l5
b10000 63
b1010001 ]
b1010001 4"
b1010001 E"
b1010001 V$
b1010001 A.
b1010001 A/
b1010001 Z$
b10100010 Y$
b10 n$
1{:
0e8
1h8
1x8
0|8
1"9
0&9
1P9
1`9
0d9
1h9
0l9
18:
1H:
0L:
1P:
0T:
1~:
10;
04;
18;
0<;
1f;
1v;
0z;
1~;
0$<
1N<
1^<
0b<
1f<
0j<
16=
1F=
0J=
1N=
0R=
1|=
1.>
02>
16>
0:>
1d>
1t>
0x>
1|>
0"?
1L?
1\?
0`?
1d?
0h?
14@
1D@
0H@
1L@
0P@
1z@
1,A
00A
14A
08A
1bA
1rA
0vA
1zA
0~A
1JB
1ZB
0^B
1bB
0fB
12C
1BC
0FC
1JC
0NC
1xC
1*D
0.D
12D
06D
b101 M
b101 J%
b101 l6
b101 R8
b101 \8
b110 L
b110 K%
b110 S8
b110 ^8
b111 N
b111 V%
b10000 Q
b10000 53
b10000 -4
b10000 e5
b10000 s6
b10000 |6
1n
b1010001 O
0X$
0>%
b1010001 P
b1000 W8
b1000 YD
b1010001 (
b1010001 J
b1010001 P8
b1010001 b8
b1010001 J9
b1010001 2:
b1010001 x:
b1010001 `;
b1010001 H<
b1010001 0=
b1010001 v=
b1010001 ^>
b1010001 F?
b1010001 .@
b1010001 t@
b1010001 \A
b1010001 DB
b1010001 ,C
b1010001 rC
b100 J6
b100 m6
b100 z3
17(
0G(
1K(
1S(
0g(
1k(
1c)
0|(
0")
0&)
1*)
1_
b10 7"
020
160
1B0
1R0
0^0
1b0
0^1
1b1
1w0
0C+
1G+
1S+
0W+
0c+
0g+
1k+
1s+
b0 #
b0 U
b0 !4
1Z-
0s,
1w,
1>4
0N4
1R4
1Z4
0n4
1r4
b100011101010110 9
b100011101010110 P%
b100011101010110 .(
b100011101010110 '4
b100011101010110 54
1j5
b1110 ;
b1110 T%
b1110 Z)
b1110 *4
b1110 a5
0%5
0)5
0-5
115
b10000 :
b10000 R%
b10000 s(
b10000 )4
b10000 z4
0r7
0v7
0z7
1~7
b10000 z6
b10000 g7
1<2
09/
1;/
05(
19(
1E(
1U(
0a(
1e(
b10011000110100 3
b10011000110100 Q%
b10011000110100 ,(
b10011000110100 C.
b10011000110100 )0
0y%
0+&
03&
b0 6
b0 L%
b0 t%
0N'
1R'
b100 2
b100 O%
b100 E'
0a)
1e)
b1100 5
b1100 U%
b1100 X)
b1100 G.
b1100 U1
1z(
b1110 4
b1110 S%
b1110 q(
b1110 E.
b1110 n0
06.
08.
1:.
0,0
100
1<0
0@0
0L0
0P0
1T0
1\0
b1010000010010 !
b1010000010010 D
b1010000010010 I*
b1010000010010 >+
b1010000010010 D.
b1010000010010 '0
0D/
0T/
0\/
b0 C
b0 B.
b0 ?/
1\1
b1010 F
b1010 N*
b1010 Q-
b1010 H.
b1010 S1
0u0
1y0
b1100 E
b1100 L*
b1100 j,
b1100 F.
b1100 l0
1A+
0]+
1a+
0q+
0u+
0}+
b1100100001 >
b1100100001 J*
b1100100001 <+
1Z*
1j*
0n*
1r*
0v*
b1010001 =
b1010001 H*
b1010001 U*
0X-
0\-
1`-
b1000 *
b1000 I
b1000 A
b1000 O*
b1000 O-
1q,
b1010 @
b1010 M*
b1010 h,
0$7
1A4
0Q4
1U4
1]4
0q4
1u4
1m5
0(5
0,5
005
145
0u7
0y7
0}7
1#8
0!"
0C'
b110 }
b110 Y%
b110 I.
b110 k6
1B*
b11 |
b11 ]%
b11 f6
1g%
0o%
b100 {
b100 \%
b100 @.
b100 g6
1q%
08(
1<(
1H(
1X(
0d(
1h(
0|%
0.&
06&
0Q'
1U'
0d)
1h)
1}(
0y8
0;2
0=2
b100 )
b100 b
b100 S*
b100 L.
b100 i6
1?2
08/
b10 a
b10 M.
b10 j6
1:/
0/0
130
1?0
0C0
0O0
0S0
1W0
1_0
0G/
0W/
0_/
1_1
0x0
1|0
17.
b11 o
b11 R*
b11 h6
b11 Q8
b11 XD
19.
1D+
0`+
1d+
0t+
0x+
0",
1]*
1m*
0q*
1u*
0y*
0[-
0_-
1c-
1t,
b1000 /
b1010 .
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
#1050
1t7
1+7
b10010 y6
b10010 }6
b10010 i7
xa6
xd6
1.7
1$7
114
134
1T6
1V6
1\6
1^6
1c6
1e6
1%7
0l7
0,
#1100
1R2
0}.
0'/
0q.
0+/
0Z2
1V2
b0 0$
b0 ?$
b1000 \2
117
b0 V#
b0 =#
b0 F#
b0 +$
b0 e#
0C$
0Y2
0R#
0a#
0c#
b101000 L2
b10 k2
1_2
b1111 ~2
b1111111100101000 S
b1111111100101000 F2
b11111111 n2
b1111 /3
0-7
1+5
1;$
0y.
0#/
b110 >$
02$
b110 A"
b110 ?#
b110 <#
b110 .$
b0 M$
0A$
b0 J"
0g2
0i2
0j2
1c2
1z2
1{2
1|2
1}2
1+3
1,3
1-3
1.3
b100 N2
b10100 T
b10100 {6
b10100 !7
b0 I#
b0 X#
1_6
0:$
1<$
06$
0I$
0K$
0E$
0G$
0'5
b10100 J2
1=3
0a.
0i.
03/
b0 4#
b0 D#
b0 Q"
b0 a"
b0 `$
b0 o$
b1 j
b1 <"
b1 I6
b110 B"
b110 L"
b110 C"
b110 [$
0s$
b1 ^2
b1111 q2
b1111 "3
b10100 R
b10100 I2
b10100 23
b10100 (4
b10100 |4
b10100 83
b100 H3
02=
14:
b0 ^
b0 3"
b0 D"
b0 N$
b0 U$
b0 ?%
b110 1$
b0 @$
0e"
b10100 K2
b11111111 m2
0E3
1A3
11=
b100 Z8
b100 _8
0T'
1c;
0Y.
1v#
1k$
b110 y#
b110 ;#
b110 i#
b110 ,$
b0 *$
b0 5"
b0 ?"
b0 I%
b110 n$
0b$
b110 Y$
b0 }$
0q$
1p4
0l4
1\4
1X4
0T4
0P4
1H4
b1111111100010100 \
b1111111100010100 D2
0I<
0a;
b10 x
b10 N%
b10 G'
0e8
1]"
b0 P
0U.
0].
0e.
0m.
b1 8"
0u#
1w#
0&$
0($
b0 G%
b0 E%
b0 C%
b0 A%
b0 S$
b0 @"
b0 O$
b0 Q$
b110 I"
b110 `"
0S"
b0 H"
b0 p"
0c"
0j$
1l$
0f$
0y$
0{$
0u$
0w$
b110100110001010 V
b110100110001010 .4
b110100110001010 94
b110100110001010 r6
b10 :3
b1000000 [8
b1000000 ]8
0{:
05:
b0 i
b0 :"
b0 >.
b0 P.
b0 H%
b0 F%
b0 D%
b0 B%
b0 T$
b0 R$
0\"
1^"
0X"
0l"
0n"
0h"
0j"
1l5
b10010 63
0d%
1f%
0p%
0?*
0A*
0C*
1E*
b101 }3
b10000 W8
b10000 YD
09"
1J/
0n
b110 l#
b0 {#
b110 a$
b0 p$
b10010 Q
b10010 53
b10010 -4
b10010 e5
b10010 s6
b10010 |6
b110 M
b110 J%
b110 l6
b110 R8
b110 \8
b10 L
b10 K%
b10 S8
b10 ^8
b1000 N
b1000 V%
1y
1s,
0Z-
1^-
b0 O
0\*
0l*
0t*
b1010001 #
b1010001 U
b1010001 !4
0G+
1K+
1W+
1g+
0s+
1w+
0w0
0{0
0!1
1%1
1^1
b100 7"
120
0B0
1F0
1N0
0b0
1f0
b110 6"
b110 6#
b110 g#
b110 @%
b110 P$
b110 R"
b0 b"
b1111111111111001 W$
b110 Z$
0F/
1N/
0V/
0^/
1|(
0c)
0g)
0k)
1o)
b101 J6
b100 [
b100 C2
b101 m6
b101 z3
0;(
0C(
1G(
0S(
0W(
0[(
1_(
1c(
0q,
1u,
b1100 @
b1100 M*
b1100 h,
1X-
b1010 *
b1010 I
b1010 A
b1010 O*
b1010 O-
0A+
1E+
1Q+
0U+
0a+
0e+
1i+
1q+
b1010000010010 >
b1010000010010 J*
b1010000010010 <+
1u0
b1110 E
b1110 L*
b1110 j,
b1110 F.
b1110 l0
0\1
1`1
b1100 F
b1100 N*
b1100 Q-
b1100 H.
b1100 S1
0S.
0c.
0k.
b0 "
b0 G
b0 ~3
b0 B
b0 G*
b0 W*
b0 ?.
b0 N.
1D/
1T/
1\/
b1010001 C
b1010001 B.
b1010001 ?/
000
140
1@0
1P0
0\0
1`0
b10011000110100 !
b10011000110100 D
b10011000110100 I*
b10011000110100 >+
b10011000110100 D.
b10011000110100 '0
18.
0z(
0~(
0$)
1()
b10000 4
b10000 S%
b10000 q(
b10000 E.
b10000 n0
1a)
b1110 5
b1110 U%
b1110 X)
b1110 G.
b1110 U1
1N'
b110 2
b110 O%
b110 E'
15(
0E(
1I(
1Q(
0e(
1i(
b100011101010110 3
b100011101010110 Q%
b100011101010110 ,(
b100011101010110 C.
b100011101010110 )0
19/
1:2
b110 ]
b110 4"
b110 E"
b110 V$
b110 A.
b110 A/
1r7
b10010 z6
b10010 g7
1%5
b10010 :
b10010 R%
b10010 s(
b10010 )4
b10010 z4
0j5
0n5
0r5
1v5
b10000 ;
b10000 T%
b10000 Z)
b10000 *4
b10000 a5
0B4
0J4
1N4
0Z4
0^4
0b4
1f4
1j4
b101100001100010 9
b101100001100010 P%
b101100001100010 .(
b101100001100010 '4
b101100001100010 54
0$7
b1011 .
b1001 /
1x,
0t,
1[-
1t+
1l+
0h+
0d+
0X+
1T+
1H+
0D+
1;.
09.
b100 o
b100 R*
b100 h6
b100 Q8
b100 XD
07.
1x0
1c1
0_1
0n.
0f.
0V.
1_/
1W/
1G/
1c0
0_0
1S0
1C0
170
030
1</
b100 a
b100 M.
b100 j6
0:/
b110 )
b110 b
b110 S*
b110 L.
b110 i6
1=2
19;
11;
1!;
1+)
0')
0#)
0}(
1d)
1Q'
1l(
0h(
1T(
1L(
0H(
18(
b110 {
b110 \%
b110 @.
b110 g6
1o%
1i%
b101 |
b101 ]%
b101 f6
0g%
b111 }
b111 Y%
b111 I.
b111 k6
1@*
1*"
1u7
1(5
1y5
0u5
0q5
0m5
1m4
1i4
0e4
0a4
0]4
1Q4
0M4
0E4
014
034
0T6
0V6
0\6
0^6
0c6
0e6
0%7
1l7
1,
